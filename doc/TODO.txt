Tasks:
------
Get(key) should access only one replica:  
 - No need for that, because conflicts might happen with other put operations

Distributed Commit:
 - No need to abort a Replica that voted NO for commit 
 
Dead Places Handling:
 - Dead Leader           (DONE - tested)
 - Dead Deputy Leader    (DONE - tested)  unable to reproduce issue #3 
 - Dead Replica          (DONE - tested)
 - Dead ReplicaClient    (DONE - tested)
 
TimeOut Handling:
 - Replica waiting for Replica Client    (DONE) 
 - ReplicaClient waiting for Replica     (DONE)
 - ReplicaClient waiting for migration   (DONE - tested)    
 - Leader waiting for replicas to copy partitions
 
Serialization:
 - Currently keys and values are copied by "at". 
   For large objects (like matrix blocks), this will be slow compared to using Rail.asyncCopy.  

Caching:
  - Repeated put operations due to conflicts, cache the values for next retries!!!!!
  
Test Cases:
 - All Places Increment All Keys in random order   (DONE)
 - Each Place puts and gets its own data
 - Performance Benchmarking
 
Migration:   
 - How to suspend transactions while migrating????   (DONE)
       If any UPDATE transaction exist, wait till they complete
  
- Before issuing a request, if replicas are dead,  make the user wait till migration is complete !!!!
Should we better throw an exception here?
no, because the application will keep repeating the request multiple times and getting exceptions
better hold the request

Invalid DataStore:
   - no actions should be done on an invalid data store

Assumptions:
- no place failure until the data store is first initialized
- leader and deputy leader will not die at the same time
- migration leader does not die while migrating partitions
- Place.isDead() will return the same at all places!!!!

======================
Statistics Collection:
======================
- Store statistics about the number of aborts and the reason (dead place, timeout, conflict) 