Place(0) [PartitionTable] Node partitions 
Node0->>> Part-0 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-4 - 3 - 
Node5->>> Part-4 - 5 - 
Place(0) [PartitionTable] Place partitions 
Place0->>> Part-0 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place4->>> Part-4 - 3 - 
Place5->>> Part-4 - 5 - 
Place(0) [PartitionTable] Parition places
0 => 0 - 1 - 
1 => 1 - 2 - 
2 => 2 - 3 - 
3 => 3 - 4 - 
4 => 4 - 5 - 
5 => 5 - 0 - 
Place(0) [DataStore] Initialization done successfully ...
Place(5) [PartitionTable] Node partitions 
Node0->>> Part-0 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-4 - 3 - 
Node5->>> Part-4 - 5 - 
Place(5) [PartitionTable] Place partitions 
Place0->>> Part-0 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place4->>> Part-4 - 3 - 
Place5->>> Part-4 - 5 - 
Place(1) [PartitionTable] Node partitions 
Node0->>> Part-0 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-4 - 3 - 
Node5->>> Part-4 - 5 - 
Place(1) [PartitionTable] Place partitions 
Place0->>> Part-0 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place4->>> Part-4 - 3 - 
Place5->>> Part-4 - 5 - 
Place(5) [DataStore] Initialization done successfully ...
Place(1) [DataStore] Initialization done successfully ...
Place(3) [PartitionTable] Node partitions 
Node0->>> Part-0 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-4 - 3 - 
Node5->>> Part-4 - 5 - 
Place(3) [PartitionTable] Place partitions 
Place0->>> Part-0 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place4->>> Part-4 - 3 - 
Place5->>> Part-4 - 5 - 
Place(3) [DataStore] Initialization done successfully ...
Place(4) [PartitionTable] Node partitions 
Node0->>> Part-0 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-4 - 3 - 
Node5->>> Part-4 - 5 - 
Place(4) [PartitionTable] Place partitions 
Place0->>> Part-0 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place4->>> Part-4 - 3 - 
Place5->>> Part-4 - 5 - 
Place(4) [DataStore] Initialization done successfully ...
Place(2) [PartitionTable] Node partitions 
Node0->>> Part-0 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-4 - 3 - 
Node5->>> Part-4 - 5 - 
Place(2) [PartitionTable] Place partitions 
Place0->>> Part-0 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place4->>> Part-4 - 3 - 
Place5->>> Part-4 - 5 - 
Place(2) [DataStore] Initialization done successfully ...
Place(0) [ResilientMapImpl] get[100001]  { await ... 
Place(0) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100001] ReqId[1] type[Get]  key[I]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100001] ReqId[1] type[Get]  key[I]>
Place(2) [ResilientMapImpl] get[300001]  { await ... 
Place(2) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300001] ReqId[1] type[Get]  key[L]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300001] ReqId[1] type[Get]  key[L]>
Place(3) [ResilientMapImpl] get[400001]  { await ... 
Place(3) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400001] ReqId[1] type[Get]  key[A]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400001] ReqId[1] type[Get]  key[A]>
Place(1) [ResilientMapImpl] get[200001]  { await ... 
Place(1) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200001] ReqId[1] type[Get]  key[H]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200001] ReqId[1] type[Get]  key[H]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300001] clientId[2] ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200001] clientId[1] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100001] clientId[0] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300001] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(1) [MapRequest] TransId[200001] From [1] adding response for request === <request TransactionId[200001] ReqId[1] type[Get]  key[H]> ..... output[null] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100001] clientId[0] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(4) [ResilientMapImpl] get[500001]  { await ... 
Place(4) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [MapRequest] TransId[300001] From [5] adding response for request === <request TransactionId[300001] ReqId[1] type[Get]  key[L]> ..... output[null] exception[null] 
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500001] ReqId[1] type[Get]  key[W]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500001] ReqId[1] type[Get]  key[W]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500001] clientId[4] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400001] clientId[3] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(4) [MapRequest] TransId[500001] From [4] adding response for request === <request TransactionId[500001] ReqId[1] type[Get]  key[W]> ..... output[null] exception[null] 
Place(5) [ResilientMapImpl] get[600001]  { await ... 
Place(5) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200001] clientId[1] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600001] ReqId[1] type[Get]  key[Z]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600001] ReqId[1] type[Get]  key[Z]>
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(2) [MapRequest] TransId[300001] From [4] adding response for request === <request TransactionId[300001] ReqId[1] type[Get]  key[L]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400001] clientId[3] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500001] clientId[4] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(1) [MapRequest] TransId[200001] From [0] adding response for request === <request TransactionId[200001] ReqId[1] type[Get]  key[H]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400001] From [5] adding response for request === <request TransactionId[400001] ReqId[1] type[Get]  key[A]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400001] From [0] adding response for request === <request TransactionId[400001] ReqId[1] type[Get]  key[A]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500001] From [3] adding response for request === <request TransactionId[500001] ReqId[1] type[Get]  key[W]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600001] clientId[5] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600001] clientId[5] ...
Place(0) [MapRequest] TransId[100001] From [2] adding response for request === <request TransactionId[100001] ReqId[1] type[Get]  key[I]> ..... output[null] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(5) [MapRequest] TransId[600001] From [1] adding response for request === <request TransactionId[600001] ReqId[1] type[Get]  key[Z]> ..... output[null] exception[null] 
Place(0) [MapRequest] TransId[100001] From [1] adding response for request === <request TransactionId[100001] ReqId[1] type[Get]  key[I]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600001] From [0] adding response for request === <request TransactionId[600001] ReqId[1] type[Get]  key[Z]> ..... output[null] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100001]          ... released }    Success=true
Place(0) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100001] ReqId[2] type[Put]  key[I]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100001] ReqId[2] type[Put]  key[I]>
Place(0) [ResilientMapImpl] put[100001]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100001] clientId[0] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100001] clientId[0] ...
Place(0) [MapRequest] TransId[100001] From [2] adding response for request === <request TransactionId[100001] ReqId[2] type[Put]  key[I]> ..... output[null] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300001]          ... released }    Success=true
Place(2) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300001] ReqId[2] type[Put]  key[L]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300001] ReqId[2] type[Put]  key[L]>
Place(2) [ResilientMapImpl] put[300001]  { await ... 
Place(0) [MapRequest] TransId[100001] From [1] adding response for request === <request TransactionId[100001] ReqId[2] type[Put]  key[I]> ..... output[null] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400001]          ... released }    Success=true
Place(3) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400001] ReqId[2] type[Put]  key[A]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400001] ReqId[2] type[Put]  key[A]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300001] clientId[2] ...
Place(3) [ResilientMapImpl] put[400001]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200001]          ... released }    Success=true
Place(1) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300001] clientId[2] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200001] ReqId[2] type[Put]  key[H]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200001] ReqId[2] type[Put]  key[H]>
Place(2) [MapRequest] TransId[300001] From [5] adding response for request === <request TransactionId[300001] ReqId[2] type[Put]  key[L]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300001] From [4] adding response for request === <request TransactionId[300001] ReqId[2] type[Put]  key[L]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400001] clientId[3] ...
Place(1) [ResilientMapImpl] put[200001]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200001] clientId[1] ...
Place(1) [MapRequest] TransId[200001] From [1] adding response for request === <request TransactionId[200001] ReqId[2] type[Put]  key[H]> ..... output[null] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400001] clientId[3] ...
Place(3) [MapRequest] TransId[400001] From [0] adding response for request === <request TransactionId[400001] ReqId[2] type[Put]  key[A]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400001] From [5] adding response for request === <request TransactionId[400001] ReqId[2] type[Put]  key[A]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200001] clientId[1] ...
Place(1) [MapRequest] TransId[200001] From [0] adding response for request === <request TransactionId[200001] ReqId[2] type[Put]  key[H]> ..... output[null] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500001]          ... released }    Success=true
Place(4) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500001] ReqId[2] type[Put]  key[W]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500001] ReqId[2] type[Put]  key[W]>
Place(5) [ResilientMapImpl] get[600001]          ... released }    Success=true
Place(5) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600001] ReqId[2] type[Put]  key[Z]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600001] ReqId[2] type[Put]  key[Z]>
Place(4) [ResilientMapImpl] put[500001]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500001] clientId[4] ...
Place(5) [ResilientMapImpl] put[600001]  { await ... 
Place(4) [MapRequest] TransId[500001] From [4] adding response for request === <request TransactionId[500001] ReqId[2] type[Put]  key[W]> ..... output[null] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500001] clientId[4] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600001] clientId[5] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600001] clientId[5] ...
Place(4) [MapRequest] TransId[500001] From [3] adding response for request === <request TransactionId[500001] ReqId[2] type[Put]  key[W]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600001] From [1] adding response for request === <request TransactionId[600001] ReqId[2] type[Put]  key[Z]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600001] From [0] adding response for request === <request TransactionId[600001] ReqId[2] type[Put]  key[Z]> ..... output[null] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100001]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100001] ReqId[3] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100001] ReqId[3] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300001]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300001] ReqId[3] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300001] ReqId[3] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300001]  { await ... 
Place(0) [ResilientMapImpl] commitTransaction[100001]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400001]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400001] ReqId[3] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400001] ReqId[3] type[PrepareCommit]  key[null]>
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] ConflictReport for transaction[100001] is null
Place(3) [ResilientMapImpl] commitTransaction[400001]  { await ... 
Place(4) [Transaction] Tx(300001) and Tx(500001) no overlap
Place(4) [Transaction] Tx(300001) and Tx(500001) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[300001] is null
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(5) [Transaction] Tx(300001) and Tx(400001) no overlap
Place(5) [Transaction] Tx(300001) and Tx(400001) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[300001] is null
Place(2) [MapRequest] TransId[300001] From [4] adding vote response [1] ...
Place(2) [MapRequest] TransId[300001] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [4] adding vote response completed ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(1) [Transaction] Tx(100001) and Tx(200001) no overlap
Place(1) [Transaction] Tx(100001) and Tx(200001) conflicting=[false] ...
Place(2) [MapRequest] TransId[300001] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300001] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(0) [MapRequest] TransId[100001] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100001] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Transaction] Tx(100001) and Tx(600001) no overlap
Place(5) [Transaction] Tx(400001) and Tx(300001) no overlap
Place(5) [Transaction] Tx(400001) and Tx(300001) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Replica(5)] ConflictReport for transaction[400001] is null
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(1) [ResilientMapImpl] put[200001]          ... released }    Success=true
Place(1) [Transaction] Tx(100001) and Tx(600001) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[100001] is null
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Transaction] Tx(400001) and Tx(200001) no overlap
Place(0) [Transaction] Tx(400001) and Tx(200001) conflicting=[false] ...
Place(0) [Transaction] Tx(400001) and Tx(600001) no overlap
Place(0) [Transaction] Tx(400001) and Tx(600001) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[400001] is null
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200001] ReqId[3] type[PrepareCommit]  key[null]>
Place(3) [MapRequest] TransId[400001] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400001] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200001] ReqId[3] type[PrepareCommit]  key[null]>
Place(3) [MapRequest] TransId[400001] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400001] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(1) [ResilientMapImpl] commitTransaction[200001]  { await ... 
Place(1) [Transaction] Tx(200001) and Tx(100001) no overlap
Place(1) [Transaction] Tx(200001) and Tx(100001) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(1) [Transaction] Tx(200001) and Tx(600001) no overlap
Place(1) [Transaction] Tx(200001) and Tx(600001) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[200001] is null
Place(0) [MapRequest] TransId[100001] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100001] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(1) [MapRequest] TransId[200001] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200001] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(0) [Transaction] Tx(200001) and Tx(400001) no overlap
Place(0) [Transaction] Tx(200001) and Tx(400001) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(0) [Transaction] Tx(200001) and Tx(600001) no overlap
Place(0) [Transaction] Tx(200001) and Tx(600001) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[200001] is null
Place(1) [MapRequest] TransId[200001] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200001] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500001]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500001] ReqId[3] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500001] ReqId[3] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600001]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ResilientMapImpl] commitTransaction[500001]  { await ... 
Place(4) [Transaction] Tx(500001) and Tx(300001) no overlap
Place(4) [Transaction] Tx(500001) and Tx(300001) conflicting=[false] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600001] ReqId[3] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600001] ReqId[3] type[PrepareCommit]  key[null]>
Place(4) [Replica(4)] ConflictReport for transaction[500001] is null
Place(4) [MapRequest] TransId[500001] From [4] adding vote response [1] ...
Place(4) [MapRequest] TransId[500001] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [4] adding vote response completed ...
Place(5) [ResilientMapImpl] commitTransaction[600001]  { await ... 
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Replica(3)] ConflictReport for transaction[500001] is null
Place(0) [Transaction] Tx(600001) and Tx(400001) no overlap
Place(0) [Transaction] Tx(600001) and Tx(400001) conflicting=[false] ...
Place(0) [Transaction] Tx(600001) and Tx(200001) no overlap
Place(0) [Transaction] Tx(600001) and Tx(200001) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Replica(0)] ConflictReport for transaction[600001] is null
Place(4) [MapRequest] TransId[500001] From [3] adding vote response [1] ...
Place(4) [MapRequest] TransId[500001] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [3] adding vote response completed ...
Place(1) [Transaction] Tx(600001) and Tx(100001) no overlap
Place(1) [Transaction] Tx(600001) and Tx(100001) conflicting=[false] ...
Place(1) [Transaction] Tx(600001) and Tx(200001) no overlap
Place(1) [Transaction] Tx(600001) and Tx(200001) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [Replica(1)] ConflictReport for transaction[600001] is null
Place(5) [MapRequest] TransId[600001] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600001] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(5) [MapRequest] TransId[600001] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600001] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300001] ReqId[3] type[Commit]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100001] ReqId[3] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100001] ReqId[3] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300001] ReqId[3] type[Commit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400001] ReqId[3] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400001] ReqId[3] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300001] ReqId[3] type[Commit]  key[null]>  Exception: null
Place(0) [MapRequest] Completing request: <request TransactionId[100001] ReqId[3] type[Commit]  key[null]>  Exception: null
Place(3) [MapRequest] Completing request: <request TransactionId[400001] ReqId[3] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] TransId[100001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (I,1) ...
Place(4) [Replica(4)] TransId[300001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (L,1) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200001] ReqId[3] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200001] ReqId[3] type[Commit]  key[null]>
Place(5) [Replica(5)] TransId[300001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (L,1) ...
Place(0) [Replica(0)] TransId[400001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (A,1) ...
Place(5) [Replica(5)] TransId[400001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (A,1) ...
Place(1) [MapRequest] Completing request: <request TransactionId[200001] ReqId[3] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[200001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (H,1) ...
Place(0) [Replica(0)] TransId[200001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (H,1) ...
Place(1) [Replica(1)] TransId[100001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (I,1) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600001] ReqId[3] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600001] ReqId[3] type[Commit]  key[null]>
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500001] ReqId[3] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500001] ReqId[3] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600001] ReqId[3] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[500001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(4) [MapRequest] Completing request: <request TransactionId[500001] ReqId[3] type[Commit]  key[null]>  Exception: null
Place(4) [Partition] Partition [3]  PUT (W,1) ...
Place(3) [Replica(3)] TransId[500001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (W,1) ...
Place(1) [Replica(1)] TransId[600001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (Z,1) ...
Place(0) [Replica(0)] TransId[600001] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (Z,1) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300001]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300002]  { await ... 
Place(2) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100001]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100002]  { await ... 
Place(0) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100002] ReqId[4] type[Get]  key[H]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300002] ReqId[4] type[Get]  key[F]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300002] ReqId[4] type[Get]  key[F]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100002] ReqId[4] type[Get]  key[H]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100002] clientId[0] ...
Place(3) [ResilientMapImpl] commitTransaction[400001]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400002]  { await ... 
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(0) [MapRequest] TransId[100002] From [0] adding response for request === <request TransactionId[100002] ReqId[4] type[Get]  key[H]> ..... output[1] exception[null] 
Place(3) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400002] ReqId[4] type[Get]  key[R]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400002] ReqId[4] type[Get]  key[R]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300002] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400002] clientId[3] ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300002] clientId[2] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200001]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200002]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200002] ReqId[4] type[Get]  key[L]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200002] ReqId[4] type[Get]  key[L]>
Place(3) [MapRequest] TransId[400002] From [4] adding response for request === <request TransactionId[400002] ReqId[4] type[Get]  key[R]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400002] From [5] adding response for request === <request TransactionId[400002] ReqId[4] type[Get]  key[R]> ..... output[null] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200002] clientId[1] ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400002] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300002] From [4] adding response for request === <request TransactionId[300002] ReqId[4] type[Get]  key[F]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300002] From [5] adding response for request === <request TransactionId[300002] ReqId[4] type[Get]  key[F]> ..... output[null] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200002] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(1) [MapRequest] TransId[200002] From [4] adding response for request === <request TransactionId[200002] ReqId[4] type[Get]  key[L]> ..... output[1] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100002] clientId[0] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(1) [MapRequest] TransId[200002] From [5] adding response for request === <request TransactionId[200002] ReqId[4] type[Get]  key[L]> ..... output[1] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100002] From [1] adding response for request === <request TransactionId[100002] ReqId[4] type[Get]  key[H]> ..... output[1] exception[null] 
Place(4) [ResilientMapImpl] commitTransaction[500001]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500002]  { await ... 
Place(4) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600001]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600002]  { await ... 
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500002] ReqId[4] type[Get]  key[O]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500002] ReqId[4] type[Get]  key[O]>
Place(5) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600002] ReqId[4] type[Get]  key[N]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600002] ReqId[4] type[Get]  key[N]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500002] clientId[4] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500002] clientId[4] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [MapRequest] TransId[500002] From [1] adding response for request === <request TransactionId[500002] ReqId[4] type[Get]  key[O]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500002] From [2] adding response for request === <request TransactionId[500002] ReqId[4] type[Get]  key[O]> ..... output[null] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600002] clientId[5] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600002] clientId[5] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(5) [MapRequest] TransId[600002] From [0] adding response for request === <request TransactionId[600002] ReqId[4] type[Get]  key[N]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600002] From [1] adding response for request === <request TransactionId[600002] ReqId[4] type[Get]  key[N]> ..... output[null] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300002]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100002]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300002] ReqId[5] type[Put]  key[F]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100002] ReqId[5] type[Put]  key[H]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100002] ReqId[5] type[Put]  key[H]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300002] ReqId[5] type[Put]  key[F]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300002]  { await ... 
Place(3) [ResilientMapImpl] get[400002]          ... released }    Success=true
Place(3) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400002] ReqId[5] type[Put]  key[R]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400002] ReqId[5] type[Put]  key[R]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100002] clientId[0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400002]  { await ... 
Place(0) [MapRequest] TransId[100002] From [0] adding response for request === <request TransactionId[100002] ReqId[5] type[Put]  key[H]> ..... output[1] exception[null] 
Place(0) [ResilientMapImpl] put[100002]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300002] clientId[2] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200002]          ... released }    Success=true
Place(1) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200002] ReqId[5] type[Put]  key[L]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200002] ReqId[5] type[Put]  key[L]>
Place(1) [ResilientMapImpl] put[200002]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400002] clientId[3] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300002] clientId[2] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400002] clientId[3] ...
Place(2) [MapRequest] TransId[300002] From [4] adding response for request === <request TransactionId[300002] ReqId[5] type[Put]  key[F]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400002] From [4] adding response for request === <request TransactionId[400002] ReqId[5] type[Put]  key[R]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300002] From [5] adding response for request === <request TransactionId[300002] ReqId[5] type[Put]  key[F]> ..... output[null] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200002] clientId[1] ...
Place(3) [MapRequest] TransId[400002] From [5] adding response for request === <request TransactionId[400002] ReqId[5] type[Put]  key[R]> ..... output[null] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200002] clientId[1] ...
Place(1) [MapRequest] TransId[200002] From [5] adding response for request === <request TransactionId[200002] ReqId[5] type[Put]  key[L]> ..... output[1] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500002]          ... released }    Success=true
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100002] clientId[0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500002] ReqId[5] type[Put]  key[O]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500002] ReqId[5] type[Put]  key[O]>
Place(5) [ResilientMapImpl] get[600002]          ... released }    Success=true
Place(5) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600002] ReqId[5] type[Put]  key[N]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600002] ReqId[5] type[Put]  key[N]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500002]  { await ... 
Place(1) [MapRequest] TransId[200002] From [4] adding response for request === <request TransactionId[200002] ReqId[5] type[Put]  key[L]> ..... output[1] exception[null] 
Place(5) [ResilientMapImpl] put[600002]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500002] clientId[4] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500002] clientId[4] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600002] clientId[5] ...
Place(0) [MapRequest] TransId[100002] From [1] adding response for request === <request TransactionId[100002] ReqId[5] type[Put]  key[H]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500002] From [1] adding response for request === <request TransactionId[500002] ReqId[5] type[Put]  key[O]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500002] From [2] adding response for request === <request TransactionId[500002] ReqId[5] type[Put]  key[O]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600002] From [0] adding response for request === <request TransactionId[600002] ReqId[5] type[Put]  key[N]> ..... output[null] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600002] clientId[5] ...
Place(5) [MapRequest] TransId[600002] From [1] adding response for request === <request TransactionId[600002] ReqId[5] type[Put]  key[N]> ..... output[null] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300002]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100002]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300002] ReqId[6] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300002] ReqId[6] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100002] ReqId[6] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100002] ReqId[6] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100002]  { await ... 
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400002]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400002] ReqId[6] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400002] ReqId[6] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400002]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300002]  { await ... 
Place(0) [Transaction] Tx(100002) and Tx(600002) no overlap
Place(0) [Transaction] Tx(100002) and Tx(600002) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100002] is null
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(0) [MapRequest] TransId[100002] From [0] adding vote response [1] ...
Place(1) [Transaction] Tx(100002) and Tx(500002) no overlap
Place(1) [Transaction] Tx(100002) and Tx(500002) conflicting=[false] ...
Place(0) [MapRequest] TransId[100002] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(1) [Transaction] Tx(100002) and Tx(600002) no overlap
Place(1) [Transaction] Tx(100002) and Tx(600002) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[100002] is null
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200002]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200002] ReqId[6] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200002] ReqId[6] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200002]  { await ... 
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(5) [Transaction] Tx(400002) and Tx(300002) no overlap
Place(5) [Transaction] Tx(400002) and Tx(300002) conflicting=[false] ...
Place(5) [Transaction] Tx(400002) and Tx(200002) no overlap
Place(5) [Transaction] Tx(400002) and Tx(200002) conflicting=[false] ...
Place(4) [Transaction] Tx(400002) and Tx(300002) no overlap
Place(4) [Transaction] Tx(400002) and Tx(300002) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[400002] is null
Place(4) [Transaction] Tx(400002) and Tx(200002) no overlap
Place(4) [Transaction] Tx(400002) and Tx(200002) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[400002] is null
Place(5) [Transaction] Tx(300002) and Tx(400002) no overlap
Place(5) [Transaction] Tx(300002) and Tx(400002) conflicting=[false] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Transaction] Tx(300002) and Tx(200002) no overlap
Place(5) [Transaction] Tx(300002) and Tx(200002) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[300002] is null
Place(4) [Transaction] Tx(300002) and Tx(400002) no overlap
Place(4) [Transaction] Tx(300002) and Tx(400002) conflicting=[false] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Transaction] Tx(300002) and Tx(200002) no overlap
Place(4) [Transaction] Tx(300002) and Tx(200002) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[300002] is null
Place(5) [Transaction] Tx(200002) and Tx(300002) no overlap
Place(5) [Transaction] Tx(200002) and Tx(300002) conflicting=[false] ...
Place(5) [Transaction] Tx(200002) and Tx(400002) no overlap
Place(5) [Transaction] Tx(200002) and Tx(400002) conflicting=[false] ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(5) [Replica(5)] ConflictReport for transaction[200002] is null
Place(0) [MapRequest] TransId[100002] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100002] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(3) [MapRequest] TransId[400002] From [4] adding vote response [1] ...
Place(3) [MapRequest] TransId[400002] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [4] adding vote response completed ...
Place(3) [MapRequest] TransId[400002] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400002] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600002]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600002] ReqId[6] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600002] ReqId[6] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [Transaction] Tx(200002) and Tx(300002) no overlap
Place(4) [Transaction] Tx(200002) and Tx(300002) conflicting=[false] ...
Place(4) [ResilientMapImpl] put[500002]          ... released }    Success=true
Place(4) [Transaction] Tx(200002) and Tx(400002) no overlap
Place(5) [ResilientMapImpl] commitTransaction[600002]  { await ... 
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [Transaction] Tx(200002) and Tx(400002) conflicting=[false] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(2) [MapRequest] TransId[300002] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300002] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500002] ReqId[6] type[PrepareCommit]  key[null]>
Place(4) [Replica(4)] ConflictReport for transaction[200002] is null
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(2) [MapRequest] TransId[300002] From [4] adding vote response [1] ...
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500002] ReqId[6] type[PrepareCommit]  key[null]>
Place(2) [MapRequest] TransId[300002] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [4] adding vote response completed ...
Place(4) [ResilientMapImpl] commitTransaction[500002]  { await ... 
Place(1) [Transaction] Tx(600002) and Tx(100002) no overlap
Place(1) [Transaction] Tx(600002) and Tx(100002) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Transaction] Tx(600002) and Tx(500002) no overlap
Place(1) [Transaction] Tx(600002) and Tx(500002) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[600002] is null
Place(0) [Transaction] Tx(600002) and Tx(100002) no overlap
Place(0) [Transaction] Tx(600002) and Tx(100002) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Transaction] Tx(500002) and Tx(100002) no overlap
Place(1) [Transaction] Tx(500002) and Tx(100002) conflicting=[false] ...
Place(1) [Transaction] Tx(500002) and Tx(600002) no overlap
Place(1) [Transaction] Tx(500002) and Tx(600002) conflicting=[false] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(1) [Replica(1)] ConflictReport for transaction[500002] is null
Place(0) [Replica(0)] ConflictReport for transaction[600002] is null
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(2) [Replica(2)] ConflictReport for transaction[500002] is null
Place(1) [MapRequest] TransId[200002] From [4] adding vote response [1] ...
Place(1) [MapRequest] TransId[200002] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [4] adding vote response completed ...
Place(1) [MapRequest] TransId[200002] From [5] adding vote response [1] ...
Place(1) [MapRequest] TransId[200002] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [5] adding vote response completed ...
Place(5) [MapRequest] TransId[600002] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600002] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(5) [MapRequest] TransId[600002] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600002] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500002] From [2] adding vote response [1] ...
Place(4) [MapRequest] TransId[500002] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [2] adding vote response completed ...
Place(4) [MapRequest] TransId[500002] From [1] adding vote response [1] ...
Place(4) [MapRequest] TransId[500002] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300002] ReqId[6] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300002] ReqId[6] type[Commit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100002] ReqId[6] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100002] ReqId[6] type[Commit]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100002] ReqId[6] type[Commit]  key[null]>  Exception: null
Place(0) [Replica(0)] TransId[100002] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (H,2) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400002] ReqId[6] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400002] ReqId[6] type[Commit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200002] ReqId[6] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200002] ReqId[6] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300002] ReqId[6] type[Commit]  key[null]>  Exception: null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200002] ReqId[6] type[Commit]  key[null]>  Exception: null
Place(3) [MapRequest] Completing request: <request TransactionId[400002] ReqId[6] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[100002] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (H,2) ...
Place(4) [Replica(4)] TransId[200002] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (L,2) ...
Place(4) [Replica(4)] TransId[300002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (F,1) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600002] ReqId[6] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600002] ReqId[6] type[Commit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600002] ReqId[6] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[400002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (R,1) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500002] ReqId[6] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500002] ReqId[6] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500002] ReqId[6] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500002]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500003]  { await ... 
Place(4) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500003] ReqId[7] type[Get]  key[Y]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500003] ReqId[7] type[Get]  key[Y]>
Place(1) [Replica(1)] TransId[600002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (N,1) ...
Place(1) [Replica(1)] TransId[500002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (O,1) ...
Place(2) [Replica(2)] TransId[500002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (O,1) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500003] clientId[4] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Replica(0)] TransId[600002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (N,1) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200002]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200003]  { await ... 
Place(1) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200003] ReqId[7] type[Get]  key[P]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200003] ReqId[7] type[Get]  key[P]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300002]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300003]  { await ... 
Place(2) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300003] ReqId[7] type[Get]  key[B]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300003] ReqId[7] type[Get]  key[B]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100002]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100003]  { await ... 
Place(0) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100003] ReqId[7] type[Get]  key[P]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100003] ReqId[7] type[Get]  key[P]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400002]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400003]  { await ... 
Place(3) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400003] ReqId[7] type[Get]  key[L]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400003] ReqId[7] type[Get]  key[L]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600002]          ... released }    Success=true
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100003] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(5) [ResilientMapImpl] get[600003]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] TransId[200002] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (L,2) ...
Place(5) [Replica(5)] TransId[300002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (F,1) ...
Place(0) [MapRequest] TransId[100003] From [3] adding response for request === <request TransactionId[100003] ReqId[7] type[Get]  key[P]> ..... output[null] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500003] clientId[4] ...
Place(5) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300003] clientId[2] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [Replica(5)] TransId[400002] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (R,1) ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600003] ReqId[7] type[Get]  key[O]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600003] ReqId[7] type[Get]  key[O]>
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400003] clientId[3] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300003] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100003] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(2) [MapRequest] TransId[300003] From [0] adding response for request === <request TransactionId[300003] ReqId[7] type[Get]  key[B]> ..... output[null] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200003] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200003] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(1) [MapRequest] TransId[200003] From [3] adding response for request === <request TransactionId[200003] ReqId[7] type[Get]  key[P]> ..... output[null] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600003] clientId[5] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(2) [MapRequest] TransId[300003] From [1] adding response for request === <request TransactionId[300003] ReqId[7] type[Get]  key[B]> ..... output[null] exception[null] 
Place(1) [MapRequest] TransId[200003] From [2] adding response for request === <request TransactionId[200003] ReqId[7] type[Get]  key[P]> ..... output[null] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600003] clientId[5] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(5) [MapRequest] TransId[600003] From [1] adding response for request === <request TransactionId[600003] ReqId[7] type[Get]  key[O]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400003] From [5] adding response for request === <request TransactionId[400003] ReqId[7] type[Get]  key[L]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600003] From [2] adding response for request === <request TransactionId[600003] ReqId[7] type[Get]  key[O]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100003] From [2] adding response for request === <request TransactionId[100003] ReqId[7] type[Get]  key[P]> ..... output[null] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100003]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200003]          ... released }    Success=true
Place(1) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300003]          ... released }    Success=true
Place(0) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100003] ReqId[8] type[Put]  key[P]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100003] ReqId[8] type[Put]  key[P]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200003] ReqId[8] type[Put]  key[P]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200003] ReqId[8] type[Put]  key[P]>
Place(2) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300003] ReqId[8] type[Put]  key[B]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300003] ReqId[8] type[Put]  key[B]>
Place(2) [ResilientMapImpl] put[300003]  { await ... 
Place(0) [ResilientMapImpl] put[100003]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200003]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100003] clientId[0] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100003] clientId[0] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300003] clientId[2] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200003] clientId[1] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200003] clientId[1] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600003]          ... released }    Success=true
Place(5) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600003] ReqId[8] type[Put]  key[O]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600003] ReqId[8] type[Put]  key[O]>
Place(5) [ResilientMapImpl] put[600003]  { await ... 
Place(0) [MapRequest] TransId[100003] From [2] adding response for request === <request TransactionId[100003] ReqId[8] type[Put]  key[P]> ..... output[null] exception[null] 
Place(1) [MapRequest] TransId[200003] From [3] adding response for request === <request TransactionId[200003] ReqId[8] type[Put]  key[P]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300003] clientId[2] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600003] clientId[5] ...
Place(0) [MapRequest] TransId[100003] From [3] adding response for request === <request TransactionId[100003] ReqId[8] type[Put]  key[P]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300003] From [1] adding response for request === <request TransactionId[300003] ReqId[8] type[Put]  key[B]> ..... output[null] exception[null] 
Place(1) [MapRequest] TransId[200003] From [2] adding response for request === <request TransactionId[200003] ReqId[8] type[Put]  key[P]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300003] From [0] adding response for request === <request TransactionId[300003] ReqId[8] type[Put]  key[B]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600003] From [1] adding response for request === <request TransactionId[600003] ReqId[8] type[Put]  key[O]> ..... output[1] exception[null] 
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(4) [MapRequest] TransId[500003] From [0] adding response for request === <request TransactionId[500003] ReqId[7] type[Get]  key[Y]> ..... output[null] exception[null] 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[600003] ClientPlace [5] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[300003] ClientPlace [2] isDead[false] ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400003] clientId[3] ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600003] clientId[5] ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[400003] ClientPlace [3] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[500003] ClientPlace [4] isDead[false] ...
Place(3) [MapRequest] TransId[400003] From [4] adding response for request === <request TransactionId[400003] ReqId[7] type[Get]  key[L]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600003] From [2] adding response for request === <request TransactionId[600003] ReqId[8] type[Put]  key[O]> ..... output[1] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[100003] ClientPlace [0] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[600003] ClientPlace [5] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[200003] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300003] ClientPlace [2] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[500003] ClientPlace [4] isDead[false] ...
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[100003] ClientPlace [0] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[200003] ClientPlace [1] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200003]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200003] ReqId[9] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200003] ReqId[9] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200003]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300003]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300003] ReqId[9] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300003] ReqId[9] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300003]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100003]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100003] ReqId[9] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100003] ReqId[9] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100003]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400003]          ... released }    Success=true
Place(3) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400003] ReqId[8] type[Put]  key[L]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400003] ReqId[8] type[Put]  key[L]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400003]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600003]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600003] ReqId[9] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600003] ReqId[9] type[PrepareCommit]  key[null]>
Place(3) [Transaction] Tx(100003) and Tx(200003) overlapped keys = P,
Place(3) [Transaction] Tx(100003) and Tx(200003) conflict in key [P]
Place(3) [Transaction] Tx(100003) and Tx(200003) conflicting=[true] ...
Place(3) [Replica(3)] ConflictReport for transaction[100003] is::: ConflictReport with active transactions: 200003,   and maxTransId is: 200003
Place(3) [Replica(3)] TransId[100003] Abort my self, NOT ready to commit ...
Place(5) [ResilientMapImpl] commitTransaction[600003]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(2) [Transaction] Tx(100003) and Tx(200003) overlapped keys = P,
Place(2) [Transaction] Tx(100003) and Tx(200003) conflict in key [P]
Place(2) [Transaction] Tx(100003) and Tx(200003) conflicting=[true] ...
Place(2) [Transaction] Tx(100003) and Tx(600003) no overlap
Place(2) [Transaction] Tx(100003) and Tx(600003) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[100003] is::: ConflictReport with active transactions: 200003,   and maxTransId is: 200003
Place(2) [Replica(2)] TransId[100003] Abort my self, NOT ready to commit ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(2) [Transaction] Tx(200003) and Tx(600003) no overlap
Place(2) [Transaction] Tx(200003) and Tx(600003) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[200003] is null
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(1) [Transaction] Tx(600003) and Tx(300003) no overlap
Place(1) [Transaction] Tx(600003) and Tx(300003) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[600003] is null
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Replica(3)] ConflictReport for transaction[200003] is null
Place(1) [Transaction] Tx(300003) and Tx(600003) no overlap
Place(1) [Transaction] Tx(300003) and Tx(600003) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [Replica(1)] ConflictReport for transaction[300003] is null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400003] clientId[3] ...
Place(2) [Transaction] Tx(600003) and Tx(200003) no overlap
Place(2) [Transaction] Tx(600003) and Tx(200003) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(5) [MapRequest] TransId[600003] From [1] adding vote response [1] ...
Place(2) [Replica(2)] ConflictReport for transaction[600003] is null
Place(5) [MapRequest] TransId[600003] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(3) [MapRequest] TransId[400003] From [5] adding response for request === <request TransactionId[400003] ReqId[8] type[Put]  key[L]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300003] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300003] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(1) [MapRequest] TransId[200003] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200003] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(1) [MapRequest] TransId[200003] From [3] adding vote response [1] ...
Place(1) [MapRequest] TransId[200003] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [3] adding vote response completed ...
Place(5) [MapRequest] TransId[600003] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600003] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100003] From [3] adding vote response [0] ...
Place(0) [MapRequest] TransId[100003] Waiting for votes from places [2,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [3] adding vote response completed ...
Place(0) [MapRequest] TransId[100003] From [2] adding vote response [0] ...
Place(0) [MapRequest] TransId[100003] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [Transaction] Tx(300003) and Tx(500003) no overlap
Place(0) [Transaction] Tx(300003) and Tx(500003) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[300003] is null
Place(2) [MapRequest] TransId[300003] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300003] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200003] ReqId[9] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200003] ReqId[9] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300003] ReqId[9] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300003] ReqId[9] type[Commit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100003] ReqId[9] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100003]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200003] ReqId[9] type[Commit]  key[null]>  Exception: null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100003] ReqId[10] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100003] ReqId[10] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300003] ReqId[9] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100003] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100003] ReqId[10] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100003]  { await ... 
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600003] ReqId[9] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600003] ReqId[9] type[Commit]  key[null]>
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100003] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600003] ReqId[9] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[600003] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (O,2) ...
Place(3) [Replica(3)] TransId[200003] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (P,1) ...
Place(2) [Replica(2)] TransId[200003] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (P,1) ...
Place(2) [Replica(2)] TransId[600003] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (O,2) ...
Place(0) [Replica(0)] TransId[300003] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (B,1) ...
Place(1) [Replica(1)] TransId[300003] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (B,1) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100003]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 2ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200003]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200004]  { await ... 
Place(1) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200004] ReqId[10] type[Get]  key[F]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200004] ReqId[10] type[Get]  key[F]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300003]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300004]  { await ... 
Place(2) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300004] ReqId[10] type[Get]  key[U]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300004] ReqId[10] type[Get]  key[U]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600003]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600004]  { await ... 
Place(5) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600004] ReqId[10] type[Get]  key[Y]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600004] ReqId[10] type[Get]  key[Y]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300004] clientId[2] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600004] clientId[5] ...
Place(2) [MapRequest] TransId[300004] From [2] adding response for request === <request TransactionId[300004] ReqId[10] type[Get]  key[U]> ..... output[null] exception[null] 
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [MapRequest] TransId[600004] From [5] adding response for request === <request TransactionId[600004] ReqId[10] type[Get]  key[Y]> ..... output[null] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300004] clientId[2] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200004] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(2) [MapRequest] TransId[300004] From [1] adding response for request === <request TransactionId[300004] ReqId[10] type[Get]  key[U]> ..... output[null] exception[null] 
Place(1) [MapRequest] TransId[200004] From [5] adding response for request === <request TransactionId[200004] ReqId[10] type[Get]  key[F]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600004] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [MapRequest] TransId[600004] From [0] adding response for request === <request TransactionId[600004] ReqId[10] type[Get]  key[Y]> ..... output[null] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300004]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100004]  { await ... 
Place(0) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600004]          ... released }    Success=true
Place(5) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600004] ReqId[11] type[Put]  key[Y]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600004] ReqId[11] type[Put]  key[Y]>
Place(2) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300004] ReqId[11] type[Put]  key[U]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300004] ReqId[11] type[Put]  key[U]>
Place(2) [ResilientMapImpl] put[300004]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300004] clientId[2] ...
Place(2) [MapRequest] TransId[300004] FromPlace(0) [ReplicaClient] Added Pending Request <request TransactionId[100004] ReqId[11] type[Get]  key[P]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100004] ReqId[11] type[Get]  key[P]>
 [2] adding response for request === <request TransactionId[300004] ReqId[11] type[Put]  key[U]> ..... output[null] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600004]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600004] clientId[5] ...
Place(5) [MapRequest] TransId[600004] From [5] adding response for request === <request TransactionId[600004] ReqId[11] type[Put]  key[Y]> ..... output[null] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100004] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100004] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300004] clientId[2] ...
Place(2) [MapRequest] TransId[300004] From [1] adding response for request === <request TransactionId[300004] ReqId[11] type[Put]  key[U]> ..... output[null] exception[null] 
Place(0) [MapRequest] TransId[100004] From [2] adding response for request === <request TransactionId[100004] ReqId[11] type[Get]  key[P]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600004] clientId[5] ...
Place(0) [MapRequest] TransId[100004] From [3] adding response for request === <request TransactionId[100004] ReqId[11] type[Get]  key[P]> ..... output[1] exception[null] 
Place(5) [MapRequest] TransId[600004] From [0] adding response for request === <request TransactionId[600004] ReqId[11] type[Put]  key[Y]> ..... output[null] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300004]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300004] ReqId[12] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300004] ReqId[12] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] get[100004]          ... released }    Success=true
Place(0) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100004] ReqId[12] type[Put]  key[P]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100004] ReqId[12] type[Put]  key[P]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600004]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600004] ReqId[12] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600004] ReqId[12] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600004]  { await ... 
Place(2) [ResilientMapImpl] commitTransaction[300004]  { await ... 
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [Transaction] Tx(600004) and Tx(500003) overlapped keys = Y,
Place(5) [Transaction] Tx(600004) and Tx(500003) conflict in key [Y]
Place(5) [Transaction] Tx(600004) and Tx(500003) conflicting=[true] ...
Place(5) [Transaction] Tx(600004) and Tx(400003) no overlap
Place(5) [Transaction] Tx(600004) and Tx(400003) conflicting=[false] ...
Place(5) [Transaction] Tx(600004) and Tx(200004) no overlap
Place(5) [Transaction] Tx(600004) and Tx(200004) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[600004] is::: ConflictReport with active transactions: 500003,   and maxTransId is: 600004
Place(5) [Replica(5)] TransId[600004] Abort other transaction and become ready to commit ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Transaction] Tx(300004) and Tx(100004) no overlap
Place(2) [Transaction] Tx(300004) and Tx(100004) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[300004] is null
Place(2) [MapRequest] TransId[300004] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300004] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(5) [MapRequest] TransId[600004] From [5] adding vote response [1] ...
Place(5) [MapRequest] TransId[600004] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [5] adding vote response completed ...
Place(0) [ResilientMapImpl] put[100004]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100004] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100004] clientId[0] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [Replica(1)] ConflictReport for transaction[300004] is null
Place(2) [MapRequest] TransId[300004] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300004] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(0) [MapRequest] TransId[100004] From [2] adding response for request === <request TransactionId[100004] ReqId[12] type[Put]  key[P]> ..... output[1] exception[null] 
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [MapRequest] TransId[100004] From [3] adding response for request === <request TransactionId[100004] ReqId[12] type[Put]  key[P]> ..... output[1] exception[null] 
Place(0) [Transaction] Tx(600004) and Tx(500003) overlapped keys = Y,
Place(0) [Transaction] Tx(600004) and Tx(500003) conflict in key [Y]
Place(0) [Transaction] Tx(600004) and Tx(500003) conflicting=[true] ...
Place(0) [Replica(0)] ConflictReport for transaction[600004] is::: ConflictReport with active transactions: 500003,   and maxTransId is: 600004
Place(0) [Replica(0)] TransId[600004] Abort other transaction and become ready to commit ...
Place(5) [MapRequest] TransId[600004] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600004] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300004] ReqId[12] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300004] ReqId[12] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300004] ReqId[12] type[Commit]  key[null]>  Exception: null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100004]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100004] ReqId[13] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100004] ReqId[13] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600004] ReqId[12] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600004] ReqId[12] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600004] ReqId[12] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] TransId[600004] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (Y,1) ...
Place(2) [Replica(2)] TransId[300004] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (U,1) ...
Place(0) [ResilientMapImpl] commitTransaction[100004]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(2) [Replica(2)] ConflictReport for transaction[100004] is null
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Replica(3)] ConflictReport for transaction[100004] is null
Place(0) [MapRequest] TransId[100004] From [3] adding vote response [1] ...
Place(0) [MapRequest] TransId[100004] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(1) [Replica(1)] TransId[300004] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (U,1) ...
Place(0) [MapRequest] From [3] adding vote response completed ...
Place(0) [MapRequest] TransId[100004] From [2] adding vote response [1] ...
Place(0) [Replica(0)] TransId[600004] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(0) [MapRequest] TransId[100004] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [Partition] Partition [5]  PUT (Y,1) ...
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300004]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300005]  { await ... 
Place(2) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300005] ReqId[13] type[Get]  key[S]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300005] ReqId[13] type[Get]  key[S]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100004] ReqId[13] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100004] ReqId[13] type[Commit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600004]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600005]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600005] ReqId[13] type[Get]  key[A]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600005] ReqId[13] type[Get]  key[A]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600005] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(5) [MapRequest] TransId[600005] From [5] adding response for request === <request TransactionId[600005] ReqId[13] type[Get]  key[A]> ..... output[1] exception[null] 
Place(0) [MapRequest] Completing request: <request TransactionId[100004] ReqId[13] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[100004] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (P,2) ...
Place(2) [Replica(2)] TransId[100004] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (P,2) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300005] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600005] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300005] clientId[2] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(5) [MapRequest] TransId[600005] From [0] adding response for request === <request TransactionId[600005] ReqId[13] type[Get]  key[A]> ..... output[1] exception[null] 
Place(2) [MapRequest] TransId[300005] From [0] adding response for request === <request TransactionId[300005] ReqId[13] type[Get]  key[S]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300005] From [5] adding response for request === <request TransactionId[300005] ReqId[13] type[Get]  key[S]> ..... output[null] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [MapRequest] Completing request: <request TransactionId[500003] ReqId[7] type[Get]  key[Y]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(4) [ResilientMapImpl] get[500003]          ... released }    Success=false
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [MapRequest] TransId[500003] From [5] adding response for request === <request TransactionId[500003] ReqId[7] type[Get]  key[Y]> ..... output[null] exception[null] 
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [MapRequest] TransId[500003] From [5] RESPONSE IGNORED  for request ==== <request TransactionId[500003] ReqId[7] type[Get]  key[Y]>
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500003] ReqId[8] type[Abort]  key[null]>
Place(4) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600005]          ... released }    Success=true
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500003] ReqId[8] type[Abort]  key[null]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200004] clientId[1] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400003] clientId[3] ...
Place(5) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600005] ReqId[14] type[Put]  key[A]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600005] ReqId[14] type[Put]  key[A]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300005]          ... released }    Success=true
Place(2) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ResilientMapImpl] put[600005]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600005] clientId[5] ...
Place(5) [MapRequest] TransId[600005] From [5] adding response for request === <request TransactionId[600005] ReqId[14] type[Put]  key[A]> ..... output[1] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100004]          ... released }    Success=true
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300005] ReqId[14] type[Put]  key[S]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300005] ReqId[14] type[Put]  key[S]>
Place(2) [ResilientMapImpl] put[300005]  { await ... 
Place(0) [ResilientMapImpl] get[100005]  { await ... 
Place(4) [MapRequest] Completing request: <request TransactionId[500003] ReqId[8] type[Abort]  key[null]>  Exception: null
Place(4) [ResilientMapImpl] abortTransaction[500003]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300005] clientId[2] ...
Place(2) [MapRequest] TransId[300005] From [5] adding response for request === <request TransactionId[300005] ReqId[14] type[Put]  key[S]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400003] From [4] adding response for request === <request TransactionId[400003] ReqId[8] type[Put]  key[L]> ..... output[2] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[500003] ...
Place(1) [MapRequest] TransId[200004] From [4] adding response for request === <request TransactionId[200004] ReqId[10] type[Get]  key[F]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600005] clientId[5] ...
Place(0) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(5) [Replica(5)] calling abortNoResponse for transactionId[500003] ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300005] clientId[2] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100005] ReqId[14] type[Get]  key[S]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100005] ReqId[14] type[Get]  key[S]>
Place(5) [MapRequest] TransId[600005] From [0] adding response for request === <request TransactionId[600005] ReqId[14] type[Put]  key[A]> ..... output[1] exception[null] 
Place(2) [MapRequest] TransId[300005] From [0] adding response for request === <request TransactionId[300005] ReqId[14] type[Put]  key[S]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100005] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [MapRequest] TransId[100005] From [0] adding response for request === <request TransactionId[100005] ReqId[14] type[Get]  key[S]> ..... output[null] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100005] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(0) [MapRequest] TransId[100005] From [5] adding response for request === <request TransactionId[100005] ReqId[14] type[Get]  key[S]> ..... output[null] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400003]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200004]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400003] ReqId[9] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400003] ReqId[9] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200004] ReqId[11] type[Put]  key[F]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200004] ReqId[11] type[Put]  key[F]>
Place(1) [ResilientMapImpl] put[200004]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600005]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600005] ReqId[15] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600005] ReqId[15] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600005]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400003]  { await ... 
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(2) [ResilientMapImpl] put[300005]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [Transaction] Tx(600005) and Tx(400003) no overlap
Place(5) [Transaction] Tx(600005) and Tx(400003) conflicting=[false] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300005] ReqId[15] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300005] ReqId[15] type[PrepareCommit]  key[null]>
Place(5) [Transaction] Tx(600005) and Tx(200004) no overlap
Place(5) [Transaction] Tx(600005) and Tx(200004) conflicting=[false] ...
Place(5) [Transaction] Tx(600005) and Tx(300005) no overlap
Place(5) [Transaction] Tx(600005) and Tx(300005) conflicting=[false] ...
Place(5) [Transaction] Tx(600005) and Tx(100005) no overlap
Place(5) [Transaction] Tx(600005) and Tx(100005) conflicting=[false] ...
Place(2) [ResilientMapImpl] commitTransaction[300005]  { await ... 
Place(5) [Replica(5)] ConflictReport for transaction[600005] is null
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] abortTransaction[500003]          ... released }    Success=true
Place(5) [MapRequest] TransId[600005] From [5] adding vote response [1] ...
Place(5) [MapRequest] TransId[600005] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [5] adding vote response completed ...
Place(4) [ResilientMapImpl] sleeping for 2ms
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200004] clientId[1] ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(4) [Transaction] Tx(400003) and Tx(200004) no overlap
Place(4) [Transaction] Tx(400003) and Tx(200004) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[400003] is null
Place(1) [MapRequest] TransId[200004] From [4] adding response for request === <request TransactionId[200004] ReqId[11] type[Put]  key[F]> ..... output[1] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200004] clientId[1] ...
Place(5) [Transaction] Tx(300005) and Tx(600005) no overlap
Place(5) [Transaction] Tx(300005) and Tx(600005) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(5) [Transaction] Tx(300005) and Tx(400003) no overlap
Place(5) [Transaction] Tx(300005) and Tx(400003) conflicting=[false] ...
Place(5) [Transaction] Tx(300005) and Tx(200004) no overlap
Place(5) [Transaction] Tx(300005) and Tx(200004) conflicting=[false] ...
Place(5) [Transaction] Tx(300005) and Tx(100005) overlapped keys = S,
Place(5) [Transaction] Tx(300005) and Tx(100005) conflict in key [S]
Place(5) [Transaction] Tx(300005) and Tx(100005) conflicting=[true] ...
Place(5) [Replica(5)] ConflictReport for transaction[300005] is::: ConflictReport with active transactions: 100005,   and maxTransId is: 300005
Place(5) [Replica(5)] TransId[300005] Abort other transaction and become ready to commit ...
Place(5) [Transaction] Tx(400003) and Tx(600005) no overlap
Place(5) [Transaction] Tx(400003) and Tx(600005) conflicting=[false] ...
Place(5) [Transaction] Tx(400003) and Tx(300005) no overlap
Place(5) [Transaction] Tx(400003) and Tx(300005) conflicting=[false] ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(5) [Transaction] Tx(400003) and Tx(200004) no overlap
Place(5) [Transaction] Tx(400003) and Tx(200004) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[400003] is null
Place(1) [MapRequest] TransId[200004] From [5] adding response for request === <request TransactionId[200004] ReqId[11] type[Put]  key[F]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400003] From [4] adding vote response [1] ...
Place(3) [MapRequest] TransId[400003] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [4] adding vote response completed ...
Place(2) [MapRequest] TransId[300005] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300005] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(3) [MapRequest] TransId[400003] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400003] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Transaction] Tx(600005) and Tx(300005) no overlap
Place(0) [Transaction] Tx(600005) and Tx(300005) conflicting=[false] ...
Place(0) [Transaction] Tx(600005) and Tx(100005) no overlap
Place(0) [Transaction] Tx(600005) and Tx(100005) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[600005] is null
Place(0) [Transaction] Tx(300005) and Tx(600005) no overlap
Place(0) [Transaction] Tx(300005) and Tx(600005) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Transaction] Tx(300005) and Tx(100005) overlapped keys = S,
Place(0) [Transaction] Tx(300005) and Tx(100005) conflict in key [S]
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100005]          ... released }    Success=true
Place(0) [Transaction] Tx(300005) and Tx(100005) conflicting=[true] ...
Place(0) [Replica(0)] ConflictReport for transaction[300005] is::: ConflictReport with active transactions: 100005,   and maxTransId is: 300005
Place(0) [Replica(0)] TransId[300005] Abort other transaction and become ready to commit ...
Place(0) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [MapRequest] TransId[600005] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600005] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100005] ReqId[15] type[Put]  key[S]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100005] ReqId[15] type[Put]  key[S]>
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(2) [MapRequest] TransId[300005] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300005] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100005] clientId[0] ...
Place(0) [Replica(0)] (put) Transaction [100005]  is not active. Return TransactionAbortedException ...
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(4) [Replica(4)] check transaction client  TransId=[200004] ClientPlace [1] isDead[false] ...
Place(4) [Replica(4)] check transaction client  TransId=[400003] ClientPlace [3] isDead[false] ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(0) [MapRequest] TransId[100005] From [0] adding response for request === <request TransactionId[100005] ReqId[15] type[Put]  key[S]> ..... output[null] exception[x10.util.resilient.map.exception.TransactionAbortedException] 
Place(0) [ResilientMapImpl] put[100005]  { await ... 
Place(5) [Replica(5)] check transaction client  TransId=[400003] ClientPlace [3] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[200004] ClientPlace [1] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[600005] ClientPlace [5] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[300005] ClientPlace [2] isDead[false] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100005] clientId[0] ...
Place(5) [Replica(5)] (put) Transaction [100005]  is not active. Return TransactionAbortedException ...
Place(0) [MapRequest] TransId[100005] From [5] adding response for request === <request TransactionId[100005] ReqId[15] type[Put]  key[S]> ..... output[null] exception[x10.util.resilient.map.exception.TransactionAbortedException] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[600005] ClientPlace [5] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[300005] ClientPlace [2] isDead[false] ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400003] ReqId[9] type[Commit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400003] ReqId[9] type[Commit]  key[null]>
Place(1) [ResilientMapImpl] put[200004]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200004] ReqId[12] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200004] ReqId[12] type[PrepareCommit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400003] ReqId[9] type[Commit]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] commitTransaction[200004]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600005] ReqId[15] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600005] ReqId[15] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600005] ReqId[15] type[Commit]  key[null]>  Exception: null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] TransId[600005] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (A,2) ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300005] ReqId[15] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300005] ReqId[15] type[Commit]  key[null]>
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300005] ReqId[15] type[Commit]  key[null]>  Exception: null
Place(4) [ResilientMapImpl] get[500004]  { await ... 
Place(4) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500004] ReqId[9] type[Get]  key[Y]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500004] ReqId[9] type[Get]  key[Y]>
Place(4) [Replica(4)] TransId[400003] Applying commit changes:=> InitVersion[1] value[3] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (L,3) ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Replica(4)] ConflictReport for transaction[200004] is null
Place(5) [Replica(5)] TransId[400003] Applying commit changes:=> InitVersion[1] value[3] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (L,3) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500004] clientId[4] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [Transaction] Tx(200004) and Tx(300005) no overlap
Place(5) [Transaction] Tx(200004) and Tx(300005) conflicting=[false] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Transaction] Tx(200004) and Tx(500004) no overlap
Place(5) [Transaction] Tx(200004) and Tx(500004) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[200004] is null
Place(5) [Replica(5)] TransId[300005] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (S,1) ...
Place(4) [MapRequest] TransId[500004] From [5] adding response for request === <request TransactionId[500004] ReqId[9] type[Get]  key[Y]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200004] From [4] adding vote response [1] ...
Place(1) [MapRequest] TransId[200004] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [4] adding vote response completed ...
Place(1) [MapRequest] TransId[200004] From [5] adding vote response [1] ...
Place(1) [MapRequest] TransId[200004] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [5] adding vote response completed ...
Place(0) [Replica(0)] TransId[600005] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (A,2) ...
Place(0) [Replica(0)] TransId[300005] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(0) [Replica(0)] getOrAddActiveTransaction transId[500004] clientId[4] ...
Place(0) [Partition] Partition [5]  PUT (S,1) ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100005]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100005] ReqId[16] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100005] ReqId[16] type[Abort]  key[null]>
Place(4) [MapRequest] TransId[500004] From [0] adding response for request === <request TransactionId[500004] ReqId[9] type[Get]  key[Y]> ..... output[1] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100005] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100005] ReqId[16] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100005]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100005] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200004] ReqId[12] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200004] ReqId[12] type[Commit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400003]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400004]  { await ... 
Place(3) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400004] ReqId[10] type[Get]  key[M]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400004] ReqId[10] type[Get]  key[M]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600005]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600006]  { await ... 
Place(5) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600006] ReqId[16] type[Get]  key[V]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600006] ReqId[16] type[Get]  key[V]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300005]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300006]  { await ... 
Place(2) [ReplicaClient] Key[X] ParitionId: 4 Replicas[4  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300006] ReqId[16] type[Get]  key[X]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300006] ReqId[16] type[Get]  key[X]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500004]          ... released }    Success=true
Place(4) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500004] ReqId[10] type[Put]  key[Y]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500004] ReqId[10] type[Put]  key[Y]>
Place(1) [MapRequest] Completing request: <request TransactionId[200004] ReqId[12] type[Commit]  key[null]>  Exception: null
Place(4) [ResilientMapImpl] put[500004]  { await ... 
Place(4) [Replica(4)] TransId[200004] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (F,2) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300006] clientId[2] ...
Place(4) [Partition] Partition [4]  GET_V (X) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600006] clientId[5] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(5) [Replica(5)] TransId[200004] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (F,2) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300006] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400004] clientId[3] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500004] clientId[4] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600006] clientId[5] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(5) [MapRequest] TransId[600006] From [2] adding response for request === <request TransactionId[600006] ReqId[16] type[Get]  key[V]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600006] From [3] adding response for request === <request TransactionId[600006] ReqId[16] type[Get]  key[V]> ..... output[null] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100005]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 17ms
Place(2) [MapRequest] TransId[300006] From [5] adding response for request === <request TransactionId[300006] ReqId[16] type[Get]  key[X]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400004] clientId[3] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(3) [MapRequest] TransId[400004] From [0] adding response for request === <request TransactionId[400004] ReqId[10] type[Get]  key[M]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400004] From [5] adding response for request === <request TransactionId[400004] ReqId[10] type[Get]  key[M]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500004] From [5] adding response for request === <request TransactionId[500004] ReqId[10] type[Put]  key[Y]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500004] clientId[4] ...
Place(2) [MapRequest] TransId[300006] From [4] adding response for request === <request TransactionId[300006] ReqId[16] type[Get]  key[X]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500004] From [0] adding response for request === <request TransactionId[500004] ReqId[10] type[Put]  key[Y]> ..... output[1] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300006]          ... released }    Success=true
Place(2) [ReplicaClient] Key[X] ParitionId: 4 Replicas[4  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300006] ReqId[17] type[Put]  key[X]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300006] ReqId[17] type[Put]  key[X]>
Place(2) [ResilientMapImpl] put[300006]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600006]          ... released }    Success=true
Place(5) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600006] ReqId[17] type[Put]  key[V]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600006] RPlace(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400004]          ... released }    Success=true
Place(3) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400004] ReqId[11] type[Put]  key[M]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500004]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500004] ReqId[11] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500004] ReqId[11] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) eqId[17] type[Put]  key[V]>
Place(5) [ResilientMapImpl] put[600006]  { await ... 
[ResilientMapImpl] commitTransaction[200004]          ... released }    Success=true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400004] ReqId[11] type[Put]  key[M]>
Place(1) [ResilientMapImpl] get[200005]  { await ... 
Place(4) [ResilientMapImpl] commitTransaction[500004]  { await ... 
Place(1) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200005] ReqId[13] type[Get]  key[I]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200005] ReqId[13] type[Get]  key[I]>
Place(3) [ResilientMapImpl] put[400004]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200005] clientId[1] ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(1) [MapRequest] TransId[200005] From [1] adding response for request === <request TransactionId[200005] ReqId[13] type[Get]  key[I]> ..... output[1] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600006] clientId[5] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200005] clientId[1] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300006] clientId[2] ...
Place(0) [ResilientMapImpl] get[100006]  { await ... 
Place(0) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100006] ReqId[17] type[Get]  key[S]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100006] ReqId[17] type[Get]  key[S]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600006] clientId[5] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300006] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100006] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [MapRequest] TransId[100006] From [0] adding response for request === <request TransactionId[100006] ReqId[17] type[Get]  key[S]> ..... output[1] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100006] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [Transaction] Tx(500004) and Tx(300006) no overlap
Place(5) [Transaction] Tx(500004) and Tx(300006) conflicting=[false] ...
Place(5) [Transaction] Tx(500004) and Tx(400004) no overlap
Place(5) [Transaction] Tx(500004) and Tx(400004) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[500004] is null
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(2) [MapRequest] TransId[300006] From [5] adding response for request === <request TransactionId[300006] ReqId[17] type[Put]  key[X]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600006] From [2] adding response for request === <request TransactionId[600006] ReqId[17] type[Put]  key[V]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600006] From [3] adding response for request === <request TransactionId[600006] ReqId[17] type[Put]  key[V]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300006] From [4] adding response for request === <request TransactionId[300006] ReqId[17] type[Put]  key[X]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400004] clientId[3] ...
Place(1) [MapRequest] TransId[200005] From [2] adding response for request === <request TransactionId[200005] ReqId[13] type[Get]  key[I]> ..... output[1] exception[null] 
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Transaction] Tx(500004) and Tx(400004) no overlap
Place(0) [Transaction] Tx(500004) and Tx(400004) conflicting=[false] ...
Place(0) [Transaction] Tx(500004) and Tx(100006) no overlap
Place(0) [Transaction] Tx(500004) and Tx(100006) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[500004] is null
Place(3) [MapRequest] TransId[400004] From [0] adding response for request === <request TransactionId[400004] ReqId[11] type[Put]  key[M]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500004] From [5] adding vote response [1] ...
Place(4) [MapRequest] TransId[500004] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [5] adding vote response completed ...
Place(4) [MapRequest] TransId[500004] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500004] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(0) [MapRequest] TransId[100006] From [5] adding response for request === <request TransactionId[100006] ReqId[17] type[Get]  key[S]> ..... output[1] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400004] clientId[3] ...
Place(3) [MapRequest] TransId[400004] From [5] adding response for request === <request TransactionId[400004] ReqId[11] type[Put]  key[M]> ..... output[null] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400004]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400004] ReqId[12] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400004] ReqId[12] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500004] ReqId[11] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500004] ReqId[11] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500004] ReqId[11] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pePlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300006]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300006] ReqId[18] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300006] ReqId[18] type[PrepareCommit]  key[null]>
nding transactions new iteration ...
Place(1) [ResilientMapImpl] get[200005]          ... released }    Success=true
Place(1) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200005] ReqId[14] type[Put]  key[I]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200005] ReqId[14] type[Put]  key[I]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600006]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600006] ReqId[18] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600006] ReqId[18] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600006]  { await ... 
Place(2) [ResilientMapImpl] commitTransaction[300006]  { await ... 
Place(3) [ResilientMapImpl] commitTransaction[400004]  { await ... 
Place(1) [ResilientMapImpl] put[200005]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200005] clientId[1] ...
Place(1) [MapRequest] TransId[200005] From [1] adding response for request === <request TransactionId[200005] ReqId[14] type[Put]  key[I]> ..... output[1] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100006]          ... released }    Success=true
Place(0) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100006] ReqId[18] type[Put]  key[S]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100006] ReqId[18] type[Put]  key[S]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200005] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(0) [ResilientMapImpl] put[100006]  { await ... 
Place(2) [Transaction] Tx(600006) and Tx(200005) no overlap
Place(2) [Transaction] Tx(600006) and Tx(200005) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[600006] is null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100006] clientId[0] ...
Place(4) [Partition] Partition [4]  GET_V (X) ...
Place(4) [Replica(4)] ConflictReport for transaction[300006] is null
Place(0) [Transaction] Tx(400004) and Tx(500004) no overlap
Place(0) [Transaction] Tx(400004) and Tx(500004) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Transaction] Tx(400004) and Tx(100006) no overlap
Place(0) [Transaction] Tx(400004) and Tx(100006) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[400004] is null
Place(5) [Replica(5)] TransId[500004] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (Y,2) ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Transaction] Tx(300006) and Tx(400004) no overlap
Place(5) [Transaction] Tx(300006) and Tx(400004) conflicting=[false] ...
Place(5) [Transaction] Tx(300006) and Tx(100006) no overlap
Place(5) [Transaction] Tx(300006) and Tx(100006) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[300006] is null
Place(3) [MapRequest] TransId[400004] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400004] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(5) [Transaction] Tx(400004) and Tx(300006) no overlap
Place(5) [Transaction] Tx(400004) and Tx(300006) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(5) [Transaction] Tx(400004) and Tx(100006) no overlap
Place(5) [Transaction] Tx(400004) and Tx(100006) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[400004] is null
Place(2) [MapRequest] TransId[300006] From [4] adding vote response [1] ...
Place(2) [MapRequest] TransId[300006] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [4] adding vote response completed ...
Place(0) [MapRequest] TransId[100006] From [5] adding response for request === <request TransactionId[100006] ReqId[18] type[Put]  key[S]> ..... output[1] exception[null] 
Place(5) [MapRequest] TransId[600006] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600006] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(0) [Replica(0)] TransId[500004] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (Y,2) ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Replica(3)] ConflictReport for transaction[600006] is null
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100006] clientId[0] ...
Place(0) [MapRequest] TransId[100006] From [0] adding response for request === <request TransactionId[100006] ReqId[18] type[Put]  key[S]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200005] From [2] adding response for request === <request TransactionId[200005] ReqId[14] type[Put]  key[I]> ..... output[1] exception[null] 
Place(5) [MapRequest] TransId[600006] From [3] adding vote response [1] ...
Place(5) [MapRequest] TransId[600006] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [3] adding vote response completed ...
Place(3) [MapRequest] TransId[400004] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400004] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(2) [MapRequest] TransId[300006] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300006] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400004] ReqId[12] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400004] ReqId[12] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400004] ReqId[12] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500004]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500005]  { await ... 
Place(4) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500005] ReqId[12] tPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300006] ReqId[18] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300006] ReqId[18] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300006] ReqId[18] type[Commit]  key[null]>  Exception: null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100006]          ... released }    Success=true
ype[Get]  key[U]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500005] ReqId[12] type[Get]  key[U]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200005]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200005] ReqId[15] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200005] ReqId[15] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ResilientMapImpl] commitTransaction[200005]  { await ... 
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(1) [Replica(1)] ConflictReport for transaction[200005] is null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600006] ReqId[18] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600006] ReqId[18] type[Commit]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100006] ReqId[19] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100006] ReqId[19] type[PrepareCommit]  key[null]>
Place(1) [MapRequest] TransId[200005] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200005] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(5) [MapRequest] Completing request: <request TransactionId[600006] ReqId[18] type[Commit]  key[null]>  Exception: null
Place(0) [Transaction] Tx(100006) and Tx(400004) no overlap
Place(0) [Transaction] Tx(100006) and Tx(400004) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[100006] is null
Place(0) [ResilientMapImpl] commitTransaction[100006]  { await ... 
Place(0) [MapRequest] TransId[100006] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100006] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(5) [Transaction] Tx(100006) and Tx(300006) no overlap
Place(5) [Transaction] Tx(100006) and Tx(300006) conflicting=[false] ...
Place(5) [Transaction] Tx(100006) and Tx(400004) no overlap
Place(5) [Transaction] Tx(100006) and Tx(400004) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(5) [Replica(5)] ConflictReport for transaction[100006] is null
Place(4) [Replica(4)] TransId[300006] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (X,1) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500005] clientId[4] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(0) [Replica(0)] TransId[400004] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (M,1) ...
Place(2) [Replica(2)] TransId[600006] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (V,1) ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] ConflictReport for transaction[200005] is null
Place(5) [Replica(5)] TransId[300006] Applying commit changes:=> InitVersion[-1] value[1] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (X,1) ...
Place(5) [Replica(5)] TransId[400004] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (M,1) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500005] clientId[4] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(3) [Replica(3)] TransId[600006] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (V,1) ...
Place(4) [MapRequest] TransId[500005] From [1] adding response for request === <request TransactionId[500005] ReqId[12] type[Get]  key[U]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200005] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200005] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(4) [MapRequest] TransId[500005] From [2] adding response for request === <request TransactionId[500005] ReqId[12] type[Get]  key[U]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100006] From [5] adding vote response [1] ...
Place(0) [MapRequest] TransId[100006] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [5] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200005] ReqId[15] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200005] ReqId[15] type[Commit]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200005] ReqId[15] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[200005] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (I,2) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500005]          ... released }    Success=true
Place(4) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending RePlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300006]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300007]  { await ... 
Place(2) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300007] ReqId[19] type[Get]  key[W]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300007] ReqId[19] type[Get]  key[W]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100006] ReqId[19] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100006] ReqId[19] type[Commit]  key[null]>
quest <request TransactionId[500005] ReqId[13] type[Put]  key[U]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500005] ReqId[13] type[Put]  key[U]>
Place(4) [ResilientMapImpl] put[500005]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400004]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400005]  { await ... 
Place(3) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600006]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600007]  { await ... 
Place(5) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600007] ReqId[19] type[Get]  key[C]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600007] ReqId[19] type[Get]  key[C]>
Place(0) [MapRequest] Completing request: <request TransactionId[100006] ReqId[19] type[Commit]  key[null]>  Exception: null
Place(0) [Replica(0)] TransId[100006] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (S,2) ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400005] ReqId[13] type[Get]  key[G]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400005] ReqId[13] type[Get]  key[G]>
Place(5) [Replica(5)] TransId[100006] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (S,2) ...
Place(2) [Replica(2)] TransId[200005] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (I,2) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400005] clientId[3] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300007] clientId[2] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600007] clientId[5] ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(3) [MapRequest] TransId[400005] From [0] adding response for request === <request TransactionId[400005] ReqId[13] type[Get]  key[G]> ..... output[null] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600007] clientId[5] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(5) [MapRequest] TransId[600007] From [1] adding response for request === <request TransactionId[600007] ReqId[19] type[Get]  key[C]> ..... output[null] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300007] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400005] clientId[3] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500005] clientId[4] ...
Place(2) [MapRequest] TransId[300007] From [4] adding response for request === <request TransactionId[300007] ReqId[19] type[Get]  key[W]> ..... output[1] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500005] clientId[4] ...
Place(5) [MapRequest] TransId[600007] From [2] adding response for request === <request TransactionId[600007] ReqId[19] type[Get]  key[C]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300007] From [3] adding response for request === <request TransactionId[300007] ReqId[19] type[Get]  key[W]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400005] From [5] adding response for request === <request TransactionId[400005] ReqId[13] type[Get]  key[G]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500005] From [1] adding response for request === <request TransactionId[500005] ReqId[13] type[Put]  key[U]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500005] From [2] adding response for request === <request TransactionId[500005] ReqId[13] type[Put]  key[U]> ..... output[1] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200005]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200006]  { await ... 
Place(1) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300007]          ... released }    Success=true
Place(2) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500005]          ... released }    Success=true
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200006] ReqId[16] type[Get]  key[Y]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200006] ReqId[16] type[Get]  key[Y]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300007] ReqId[20] type[Put]  key[W]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300007] ReqId[20] type[Put]  key[W]>
Place(2) [ResilientMapImpl] put[300007]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500005] ReqId[14] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500005] ReqId[14] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500005]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100006]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100007]  { await ... 
Place(0) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600007]          ... released }    Success=true
Place(5) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600007] ReqId[20] type[Put]  key[C]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600007] ReqId[20] type[Put]  key[C]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100007] ReqId[20] type[Get]  key[Q]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100007] ReqId[20] type[Get]  key[Q]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400005]          ... released }    Success=true
Place(3) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400005] ReqId[14] type[Put]  key[G]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400005] ReqId[14] type[Put]  key[G]>
Place(3) [ResilientMapImpl] put[400005]  { await ... 
Place(5) [ResilientMapImpl] put[600007]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100007] clientId[0] ...
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100007] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600007] clientId[5] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [Transaction] Tx(500005) and Tx(600007) no overlap
Place(1) [Transaction] Tx(500005) and Tx(600007) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[500005] is null
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300007] clientId[2] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Transaction] Tx(500005) and Tx(600007) no overlap
Place(2) [Transaction] Tx(500005) and Tx(600007) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[500005] is null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200006] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600007] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300007] clientId[2] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400005] clientId[3] ...
Place(0) [MapRequest] TransId[100007] From [4] adding response for request === <request TransactionId[100007] ReqId[20] type[Get]  key[Q]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200006] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400005] clientId[3] ...
Place(4) [MapRequest] TransId[500005] From [2] adding vote response [1] ...
Place(4) [MapRequest] TransId[500005] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [2] adding vote response completed ...
Place(5) [MapRequest] TransId[600007] From [1] adding response for request === <request TransactionId[600007] ReqId[20] type[Put]  key[C]> ..... output[null] exception[null] 
Place(1) [MapRequest] TransId[200006] From [0] adding response for request === <request TransactionId[200006] ReqId[16] type[Get]  key[Y]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100007] From [3] adding response for request === <request TransactionId[100007] ReqId[20] type[Get]  key[Q]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400005] From [0] adding response for request === <request TransactionId[400005] ReqId[14] type[Put]  key[G]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300007] From [4] adding response for request === <request TransactionId[300007] ReqId[20] type[Put]  key[W]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200006] From [5] adding response for request === <request TransactionId[200006] ReqId[16] type[Get]  key[Y]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400005] From [5] adding response for request === <request TransactionId[400005] ReqId[14] type[Put]  key[G]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500005] From [1] adding vote response [1] ...
Place(4) [MapRequest] TransId[500005] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(2) [MapRequest] TransId[300007] From [3] adding response for request === <request TransactionId[300007] ReqId[20] type[Put]  key[W]> ..... output[1] exception[null] 
Place(5) [MapRequest] TransId[600007] From [2] adding response for request === <request TransactionId[600007] ReqId[20] type[Put]  key[C]> ..... output[null] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200006]          ... released }    Success=true
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200006] ReqId[17] type[Put]  key[Y]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200006] ReqId[17] type[Put]  key[Y]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300007]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500005] ReqId[14] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500005] ReqId[14] type[Commit]  key[null]>
Place(1) [ResilientMapImpl] put[200006]  { await ... 
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300007] ReqId[21] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300007] ReqId[21] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300007]  { await ... 
Place(4) [MapRequest] Completing request: <request TransactionId[500005] ReqId[14] type[Commit]  key[null]>  Exception: null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400005]          ... released }    Success=true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100007]          ... released }    Success=true
Place(0) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400005] ReqId[15] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400005] ReqId[15] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] put[600007]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600007] ReqId[21] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600007] ReqId[21] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600007]  { await ... 
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100007] ReqId[21] type[Put]  key[Q]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100007] ReqId[21] type[Put]  key[Q]>
Place(3) [ResilientMapImpl] commitTransaction[400005]  { await ... 
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(1) [Replica(1)] TransId[500005] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (U,2) ...
Place(4) [Transaction] Tx(300007) and Tx(100007) no overlap
Place(4) [Transaction] Tx(300007) and Tx(100007) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[300007] is null
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100007] clientId[0] ...
Place(0) [ResilientMapImpl] put[100007]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100007] clientId[0] ...
Place(2) [Replica(2)] TransId[500005] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (U,2) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200006] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Transaction] Tx(400005) and Tx(200006) no overlap
Place(0) [Transaction] Tx(400005) and Tx(200006) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[400005] is null
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Transaction] Tx(400005) and Tx(200006) no overlap
Place(5) [Transaction] Tx(400005) and Tx(200006) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[400005] is null
Place(2) [MapRequest] TransId[300007] From [4] adding vote response [1] ...
Place(2) [MapRequest] TransId[300007] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [4] adding vote response completed ...
Place(3) [Transaction] Tx(300007) and Tx(100007) no overlap
Place(3) [Transaction] Tx(300007) and Tx(100007) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[300007] is null
Place(3) [MapRequest] TransId[400005] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400005] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [Replica(2)] ConflictReport for transaction[600007] is null
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200006] clientId[1] ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(1) [Replica(1)] ConflictReport for transaction[600007] is null
Place(0) [MapRequest] TransId[100007] From [3] adding response for request === <request TransactionId[100007] ReqId[21] type[Put]  key[Q]> ..... output[null] exception[null] 
Place(1) [MapRequest] TransId[200006] From [5] adding response for request === <request TransactionId[200006] ReqId[17] type[Put]  key[Y]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200006] From [0] adding response for request === <request TransactionId[200006] ReqId[17] type[Put]  key[Y]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600007] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600007] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(2) [MapRequest] TransId[300007] From [3] adding vote response [1] ...
Place(2) [MapRequest] TransId[300007] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [3] adding vote response completed ...
Place(3) [MapRequest] TransId[400005] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400005] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(0) [MapRequest] TransId[100007] From [4] adding response for request === <request TransactionId[100007] ReqId[21] type[Put]  key[Q]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600007] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600007] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200006]          ... released }    Success=true
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ResilientMapImpl] commitTransaction[500005]          ... released }    Success=true
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200006] ReqId[18] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200006] ReqId[18] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] get[500006]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ResilientMapImpl] commitTransaction[200006]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300007] ReqId[21] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300007] ReqId[21] type[Commit]  key[null]>
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500006] ReqId[15] type[Get]  key[V]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500006] ReqId[15] type[Get]  key[V]>
Place(2) [MapRequest] Completing request: <request TransactionId[300007] ReqId[21] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[300007] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (W,2) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500006] clientId[4] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600007] ReqId[21] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600007] ReqId[21] type[Commit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Transaction] Tx(200006) and Tx(400005) no overlap
Place(0) [Transaction] Tx(200006) and Tx(400005) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Replica(0)] ConflictReport for transaction[200006] is null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400005] ReqId[15] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400005] ReqId[15] type[Commit]  key[null]>
Place(0) [ResilientMapImpl] put[100007]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600007] ReqId[21] type[Commit]  key[null]>  Exception: null
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100007] ReqId[22] type[PrepareCommit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400005] ReqId[15] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500006] clientId[4] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100007] ReqId[22] type[PrepareCommit]  key[null]>
Place(3) [Replica(3)] TransId[300007] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (W,2) ...
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(4) [Replica(4)] ConflictReport for transaction[100007] is null
Place(5) [Transaction] Tx(200006) and Tx(400005) no overlap
Place(5) [Transaction] Tx(200006) and Tx(400005) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [Replica(5)] ConflictReport for transaction[200006] is null
Place(4) [MapRequest] TransId[500006] From [2] adding response for request === <request TransactionId[500006] ReqId[15] type[Get]  key[V]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200006] From [0] adding vote response [1] ...
Place(1) [Replica(1)] TransId[600007] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (C,1) ...
Place(1) [MapRequest] TransId[200006] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100007]  { await ... 
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Transaction] Tx(100007) and Tx(500006) no overlap
Place(3) [Transaction] Tx(100007) and Tx(500006) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[100007] is null
Place(0) [Replica(0)] TransId[400005] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (G,1) ...
Place(2) [Replica(2)] TransId[600007] Applying commit changes:=> InitVersion[-1] value[1] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (C,1) ...
Place(5) [Replica(5)] TransId[400005] Applying commit changes:=> InitVersion[-1] value[1] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (G,1) ...
Place(0) [MapRequest] TransId[100007] From [4] adding vote response [1] ...
Place(0) [MapRequest] TransId[100007] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [4] adding vote response completed ...
Place(4) [MapRequest] TransId[500006] From [3] adding response for request === <request TransactionId[500006] ReqId[15] type[Get]  key[V]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200006] From [5] adding vote response [1] ...
Place(1) [MapRequest] TransId[200006] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [5] adding vote response completed ...
Place(0) [MapRequest] TransId[100007] From [3] adding vote response [1] ...
Place(0) [MapRequest] TransId[100007] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [3] adding vote response completed ...
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[200006] ClientPlace [1] isDead[false] ...
Place(4) [Replica(4)] check transaction client  TransId=[100007] ClientPlace [0] isDead[false] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500006]          ... released }    Success=true
Place(4) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500006] ReqId[16] type[Put]  key[V]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500006] ReqId[16] type[Put]  key[V]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200006] ReqId[18] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200006] ReqId[18] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300007]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300008]  { await ... 
Place(2) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300008] ReqId[22] type[Get]  key[C]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300008] ReqId[22] type[Get]  key[C]>
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200006] ClientPlace [1] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100007] ReqId[22] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100007] ReqId[22] type[Commit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400005]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400006]  { await ... 
Place(3) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400006] ReqId[16] type[Get]  key[C]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400006] ReqId[16] type[Get]  key[C]>
Place(1) [MapRequest] Completing request: <request TransactionId[200006] ReqId[18] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600007]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600008]  { await ... 
Place(5) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600008] ReqId[22] type[Get]  key[D]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600008] ReqId[22] type[Get]  key[D]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300008] clientId[2] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [MapRequest] TransId[300008] From [2] adding response for request === <request TransactionId[300008] ReqId[22] type[Get]  key[C]> ..... output[1] exception[null] 
Place(0) [MapRequest] Completing request: <request TransactionId[100007] ReqId[22] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[100007] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (Q,1) ...
Place(4) [ResilientMapImpl] put[500006]  { await ... 
Place(4) [Replica(4)] TransId[100007] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (Q,1) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500006] clientId[4] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600008] clientId[5] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400006] clientId[3] ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300008] clientId[2] ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500006] clientId[4] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600008] clientId[5] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(5) [Replica(5)] TransId[200006] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (Y,3) ...
Place(4) [MapRequest] TransId[500006] From [2] adding response for request === <request TransactionId[500006] ReqId[16] type[Put]  key[V]> ..... output[1] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400006] clientId[3] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(3) [MapRequest] TransId[400006] From [1] adding response for request === <request TransactionId[400006] ReqId[16] type[Get]  key[C]> ..... output[1] exception[null] 
Place(5) [MapRequest] TransId[600008] From [2] adding response for request === <request TransactionId[600008] ReqId[22] type[Get]  key[D]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300008] From [1] adding response for request === <request TransactionId[300008] ReqId[22] type[Get]  key[C]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500006] From [3] adding response for request === <request TransactionId[500006] ReqId[16] type[Put]  key[V]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400006] From [2] adding response for request === <request TransactionId[400006] ReqId[16] type[Get]  key[C]> ..... output[1] exception[null] 
Place(5) [MapRequest] TransId[600008] From [3] adding response for request === <request TransactionId[600008] ReqId[22] type[Get]  key[D]> ..... output[null] exception[null] 
Place(0) [Replica(0)] TransId[200006] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (Y,3) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300008]          ... released }    Success=true
Place(2) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300008] ReqId[23] type[Put]  key[C]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300008] ReqId[23] type[Put]  key[C]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100007]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100008]  { await ... 
Place(0) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100008] ReqId[23] type[Get]  key[W]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100008] ReqId[23] type[Get]  key[W]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500006]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500006] ReqId[17] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500006] ReqId[17] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500006]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200006]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200007]  { await ... 
Place(1) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <rePlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600008]          ... released }    Success=true
Place(5) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600008] ReqId[23] type[Put]  key[D]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600008] ReqId[23] type[Put]  key[D]>
Place(5) [ResilientMapImpl] put[600008]  { await ... 
Place(2) [ResilientMapImpl] put[300008]  { await ... 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300008] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[600008] ClientPlace [5] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[500006] ClientPlace [4] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[quest TransactionId[200007] ReqId[19] type[Get]  key[T]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200007] ReqId[19] type[Get]  key[T]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400006]          ... released }    Success=true
Place(3) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400006] ReqId[17] type[Put]  key[C]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400006] ReqId[17] type[Put]  key[C]>
Place(3) [ResilientMapImpl] put[400006]  { await ... 
400006] ClientPlace [3] isDead[false] ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100008] clientId[0] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200007] clientId[1] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300008] clientId[2] ...
Place(2) [MapRequest] TransId[300008] From [2] adding response for request === <request TransactionId[300008] ReqId[23] type[Put]  key[C]> ..... output[1] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600008] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100008] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(1) [MapRequest] TransId[200007] From [1] adding response for request === <request TransactionId[200007] ReqId[19] type[Get]  key[T]> ..... output[null] exception[null] 
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Transaction] Tx(500006) and Tx(400006) no overlap
Place(2) [Transaction] Tx(500006) and Tx(400006) conflicting=[false] ...
Place(2) [Transaction] Tx(500006) and Tx(300008) no overlap
Place(2) [Transaction] Tx(500006) and Tx(300008) conflicting=[false] ...
Place(2) [Transaction] Tx(500006) and Tx(600008) no overlap
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600008] clientId[5] ...
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(2) [Transaction] Tx(500006) and Tx(600008) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[500006] is null
Place(3) [Replica(3)] check transaction client  TransId=[600008] ClientPlace [5] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[100008] ClientPlace [0] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[500006] ClientPlace [4] isDead[false] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Transaction] Tx(500006) and Tx(600008) no overlap
Place(3) [Transaction] Tx(500006) and Tx(600008) conflicting=[false] ...
Place(3) [Transaction] Tx(500006) and Tx(100008) no overlap
Place(3) [Transaction] Tx(500006) and Tx(100008) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[500006] is null
Place(5) [MapRequest] TransId[600008] From [2] adding response for request === <request TransactionId[600008] ReqId[23] type[Put]  key[D]> ..... output[null] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400006] clientId[3] ...
Place(4) [MapRequest] TransId[500006] From [2] adding vote response [1] ...
Place(4) [MapRequest] TransId[500006] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [2] adding vote response completed ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400006] clientId[3] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300008] clientId[2] ...
Place(5) [MapRequest] TransId[600008] From [3] adding response for request === <request TransactionId[600008] ReqId[23] type[Put]  key[D]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400006] From [1] adding response for request === <request TransactionId[400006] ReqId[17] type[Put]  key[C]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400006] From [2] adding response for request === <request TransactionId[400006] ReqId[17] type[Put]  key[C]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500006] From [3] adding vote response [1] ...
Place(4) [MapRequest] TransId[500006] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [3] adding vote response completed ...
Place(2) [MapRequest] TransId[300008] From [1] adding response for request === <request TransactionId[300008] ReqId[23] type[Put]  key[C]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100008] From [3] adding response for request === <request TransactionId[100008] ReqId[23] type[Get]  key[W]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100008] From [4] adding response for request === <request TransactionId[100008] ReqId[23] type[Get]  key[W]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200007] clientId[1] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(1) [MapRequest] TransId[200007] From [0] adding response for request === <request TransactionId[200007] ReqId[19] type[Get]  key[T]> ..... output[null] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600008]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600008] ReqId[24] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600008] ReqId[24] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600008]  { await ... 
Place(0) [ResilientMapImpl] get[100008]          ... released }    Success=true
Place(0) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100008] ReqId[24] type[Put]  key[W]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100008] ReqId[24] type[Put]  key[W]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500006] ReqId[17] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500006] ReqId[17] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500006] ReqId[17] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[300008] ClientPlace [2] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[400006] ClientPlace [3] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[200007] ClientPlace [1] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300008]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300008] ReqId[24] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300008] ReqId[24] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300008]  { await ... 
Place(0) [ResilientMapImpl] put[100008]  { await ... 
Place(2) [Transaction] Tx(300008) and Tx(500006) no overlap
Place(2) [Transaction] Tx(300008) and Tx(500006) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [Transaction] Tx(300008) and Tx(400006) overlapped keys = C,
Place(2) [Transaction] Tx(300008) and Tx(400006) conflict in key [C]
Place(2) [Transaction] Tx(300008) and Tx(400006) conflicting=[true] ...
Place(2) [Transaction] Tx(300008) and Tx(600008) no overlap
Place(2) [Transaction] Tx(300008) and Tx(600008) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[300008] is::: ConflictReport with active transactions: 400006,   and maxTransId is: 400006
Place(2) [Replica(2)] TransId[300008] Abort my self, NOT ready to commit ...
Place(2) [MapRequest] TransId[300008] From [2] adding vote response [0] ...
Place(2) [MapRequest] TransId[300008] Waiting for votes from places [1,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100008] clientId[0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200007]          ... released }    Success=true
Place(1) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200007] ReqId[20] type[Put]  key[T]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200007] ReqId[20] type[Put]  key[T]>
Place(1) [ResilientMapImpl] put[200007]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400006]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400006] ReqId[18] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400006] ReqId[18] type[PrepareCommit]  key[null]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200007] clientId[1] ...
Place(1) [MapRequest] TransId[200007] From [1] adding response for request === <request TransactionId[200007] ReqId[20] type[Put]  key[T]> ..... output[null] exception[null] 
Place(3) [ResilientMapImpl] commitTransaction[400006]  { await ... 
Place(2) [Replica(2)] TransId[500006] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (V,2) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100008] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Transaction] Tx(600008) and Tx(400006) no overlap
Place(2) [Transaction] Tx(600008) and Tx(400006) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[600008] is null
Place(3) [Transaction] Tx(600008) and Tx(500006) no overlap
Place(3) [Transaction] Tx(600008) and Tx(500006) conflicting=[false] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Transaction] Tx(600008) and Tx(100008) no overlap
Place(3) [Transaction] Tx(600008) and Tx(100008) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[600008] is null
Place(3) [Replica(3)] TransId[500006] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (V,2) ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(1) [Transaction] Tx(400006) and Tx(300008) overlapped keys = C,
Place(1) [Transaction] Tx(400006) and Tx(300008) conflict in key [C]
Place(1) [Transaction] Tx(400006) and Tx(300008) conflicting=[true] ...
Place(1) [Transaction] Tx(400006) and Tx(200007) no overlap
Place(1) [Transaction] Tx(400006) and Tx(200007) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[400006] is::: ConflictReport with active transactions: 300008,   and maxTransId is: 400006
Place(1) [Replica(1)] TransId[400006] Abort other transaction and become ready to commit ...
Place(1) [Replica(1)] (ready) Transaction [300008]  is not active. Return Not Ready ...
Place(5) [MapRequest] TransId[600008] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600008] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(3) [MapRequest] TransId[400006] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400006] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(5) [MapRequest] TransId[600008] From [3] adding vote response [1] ...
Place(5) [MapRequest] TransId[600008] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [3] adding vote response completed ...
Place(0) [MapRequest] TransId[100008] From [4] adding response for request === <request TransactionId[100008] ReqId[24] type[Put]  key[W]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200007] clientId[1] ...
Place(0) [MapRequest] TransId[100008] From [3] adding response for request === <request TransactionId[100008] ReqId[24] type[Put]  key[W]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300008] From [1] adding vote response [0] ...
Place(2) [MapRequest] TransId[300008] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(2) [Transaction] Tx(400006) and Tx(600008) no overlap
Place(2) [Transaction] Tx(400006) and Tx(600008) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [Replica(2)] ConflictReport for transaction[400006] is null
Place(1) [MapRequest] TransId[200007] From [0] adding response for request === <request TransactionId[200007] ReqId[20] type[Put]  key[T]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400006] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400006] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100008]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100008] ReqId[25] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100008] ReqId[25] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500006]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500007]  { await ... 
Place(4) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500007] ReqId[18] type[Get]  key[T]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500007] ReqId[18] type[Get]  key[T]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600008] ReqId[24] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600008] ReqId[24] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600008] ReqId[24] type[Commit]  key[null]>  Exception: null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300008] ReqId[24] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ResilientMapImpl] commitTransaction[300008]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ResilientMapImpl] commitTransaction[100008]  { await ... 
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300008] ReqId[25] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300008] ReqId[25] type[Abort]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200007]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200007] ReqId[21] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200007] ReqId[21] type[PrepareCommit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300008] ReqId[25] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300008]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300008] ...
Place(3) [Transaction] Tx(100008) and Tx(600008) no overlap
Place(3) [Transaction] Tx(100008) and Tx(600008) conflicting=[false] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Replica(3)] ConflictReport for transaction[100008] is null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200007]  { await ... 
Place(1) [Transaction] Tx(200007) and Tx(400006) no overlap
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400006] ReqId[18] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400006] ReqId[18] type[Commit]  key[null]>
Place(1) [Transaction] Tx(200007) and Tx(400006) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] ConflictReport for transaction[200007] is null
Place(1) [MapRequest] TransId[200007] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200007] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(3) [MapRequest] Completing request: <request TransactionId[400006] ReqId[18] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[600008] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (D,1) ...
Place(1) [Replica(1)] calling abortNoResponse for transactionId[300008] ...
Place(1) [Replica(1)] TransId[400006] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (C,2) ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Replica(0)] ConflictReport for transaction[200007] is null
Place(2) [Replica(2)] TransId[400006] Applying commit changes:=> InitVersion[0] value[2] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (C,2) ...
Place(2) [Replica(2)] TransId[600008] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (D,1) ...
Place(0) [MapRequest] TransId[100008] From [3] adding vote response [1] ...
Place(0) [MapRequest] TransId[100008] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [3] adding vote response completed ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Replica(4)] ConflictReport for transaction[100008] is null
Place(1) [MapRequest] TransId[200007] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200007] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500007] clientId[4] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500007] clientId[4] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(0) [MapRequest] TransId[100008] From [4] adding vote response [1] ...
Place(0) [MapRequest] TransId[100008] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [4] adding vote response completed ...
Place(4) [MapRequest] TransId[500007] From [0] adding response for request === <request TransactionId[500007] ReqId[18] type[Get]  key[T]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500007] From [1] adding response for request === <request TransactionId[500007] ReqId[18] type[Get]  key[T]> ..... output[null] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300008]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 2ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100008] ReqId[25] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100008] ReqId[25] type[Commit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500007]          ... released }    Success=true
Place(4) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200007] ReqId[21] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200007] ReqId[21] type[Commit]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200007] ReqId[21] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600008]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600009]  { await ... 
Place(5) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(0) [MapRequest] Completing request: <request TransactionId[100008] ReqId[25] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500007] ReqId[19] type[Put]  key[T]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500007] ReqId[19] type[Put]  key[T]>
Place(1) [Replica(1)] TransId[200007] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (T,1) ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600009] ReqId[25] type[Get]  key[B]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600009] ReqId[25] type[Get]  key[B]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500007]  { await ... 
Place(3) [ResilientMapImpl] commitTransaction[400006]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400007]  { await ... 
Place(3) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [Replica(3)] TransId[100008] Applying commit changes:=> InitVersion[1] value[3] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (W,3) ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400007] ReqId[19] type[Get]  key[Y]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400007] ReqId[19] type[Get]  key[Y]>
Place(4) [Replica(4)] TransId[100008] Applying commit changes:=> InitVersion[1] value[3] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (W,3) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600009] clientId[5] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500007] clientId[4] ...
Place(5) [MapRequest] TransId[600009] From [1] adding response for request === <request TransactionId[600009] ReqId[25] type[Get]  key[B]> ..... output[1] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400007] clientId[3] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(4) [MapRequest] TransId[500007] From [1] adding response for request === <request TransactionId[500007] ReqId[19] type[Put]  key[T]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400007] From [5] adding response for request === <request TransactionId[400007] ReqId[19] type[Get]  key[Y]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400007] clientId[3] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500007] clientId[4] ...
Place(3) [MapRequest] TransId[400007] From [0] adding response for request === <request TransactionId[400007] ReqId[19] type[Get]  key[Y]> ..... output[3] exception[null] 
Place(0) [Replica(0)] TransId[200007] Applying commit changes:=> InitVersion[-1] value[1] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (T,1) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600009] clientId[5] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(4) [MapRequest] TransId[500007] From [0] adding response for request === <request TransactionId[500007] ReqId[19] type[Put]  key[T]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600009] From [0] adding response for request === <request TransactionId[600009] ReqId[25] type[Get]  key[B]> ..... output[1] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500007]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500007] ReqId[20] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500007] ReqId[20] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500007]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200007]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200008]  { await ... 
Place(1) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <rePlace(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100008]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100009]  { await ... 
Place(0) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100009] ReqId[26] type[Get]  key[G]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100009] ReqId[26] type[Get]  key[G]>
quest TransactionId[200008] ReqId[22] type[Get]  key[G]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200008] ReqId[22] type[Get]  key[G]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400007]          ... released }    Success=true
Place(3) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600009]          ... released }    Success=true
Place(5) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600009] ReqId[26] type[Put]  key[B]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600009] ReqId[26] type[Put]  key[B]>
Place(5) [ResilientMapImpl] put[600009]  { await ... 
Place(2) [ResilientMapImpl] get[300009]  { await ... 
Place(2) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300009] ReqId[26] type[Get]  key[C]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300009] ReqId[26] type[Get]  key[C]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100009] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400007] ReqId[20] type[Put]  key[Y]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400007] ReqId[20] type[Put]  key[Y]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300009] clientId[2] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [MapRequest] TransId[300009] From [2] adding response for request === <request TransactionId[300009] ReqId[26] type[Get]  key[C]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100009] From [0] adding response for request === <request TransactionId[100009] ReqId[26] type[Get]  key[G]> ..... output[1] exception[null] 
Place(3) [ResilientMapImpl] put[400007]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100009] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300009] clientId[2] ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200008] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400007] clientId[3] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] Version conflict transaction[500007] key[T] oldVersion[-1] newVersion[0] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600009] clientId[5] ...
Place(2) [MapRequest] TransId[300009] From [1] adding response for request === <request TransactionId[300009] ReqId[26] type[Get]  key[C]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500007] From [1] adding vote response [0] ...
Place(4) [MapRequest] TransId[500007] Waiting for votes from places [0,] commitStatus is[CancelCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(1) [MapRequest] TransId[200008] From [5] adding response for request === <request TransactionId[200008] ReqId[22] type[Get]  key[G]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400007] From [5] adding response for request === <request TransactionId[400007] ReqId[20] type[Put]  key[Y]> ..... output[3] exception[null] 
Place(5) [MapRequest] TransId[600009] From [1] adding response for request === <request TransactionId[600009] ReqId[26] type[Put]  key[B]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100009] From [5] adding response for request === <request TransactionId[100009] ReqId[26] type[Get]  key[G]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600009] clientId[5] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Replica(0)] Version conflict transaction[500007] key[T] oldVersion[-1] newVersion[0] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400007] clientId[3] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200008] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600009] From [0] adding response for request === <request TransactionId[600009] ReqId[26] type[Put]  key[B]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500007] From [0] adding vote response [0] ...
Place(4) [MapRequest] TransId[500007] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(3) [MapRequest] TransId[400007] From [0] adding response for request === <request TransactionId[400007] ReqId[20] type[Put]  key[Y]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200008] From [0] adding response for request === <request TransactionId[200008] ReqId[22] type[Get]  key[G]> ..... output[1] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600009]          ... released }    Success=true
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [MapRequest] Completing request: <request TransactionId[500007] ReqId[20] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(4) [ResilientMapImpl] commitTransaction[500007]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600009] ReqId[27] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600009] ReqId[27] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300009]          ... released }    Success=true
Place(2) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300009] ReqId[27] type[Put]  key[C]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300009] ReqId[27] type[Put]  key[C]>
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500007] ReqId[21] type[Abort]  key[null]>
Place(4) [ReplicaClient] submit= true
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500007] ReqId[21] type[Abort]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500007] ReqId[21] type[Abort]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200008]          ... released }    Success=true
Place(1) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200008] ReqId[23] type[Put]  key[G]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200008] ReqId[23] type[Put]  key[G]>
Place(5) [ResilientMapImpl] commitTransaction[600009]  { await ... 
Place(2) [ResilientMapImpl] put[300009]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300009] clientId[2] ...
Place(2) [MapRequest] TransId[300009] From [2] adding response for request === <request TransactionId[300009] ReqId[27] type[Put]  key[C]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100009]          ... released }    Success=true
Place(0) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100009] ReqId[27] type[Put]  key[G]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100009] ReqId[27] type[Put]  key[G]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400007]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400007] ReqId[21] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400007] ReqId[21] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400007]  { await ... 
Place(4) [ResilientMapImpl] abortTransaction[500007]  { await ... 
Place(1) [ResilientMapImpl] put[200008]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100009] clientId[0] ...
Place(0) [MapRequest] TransId[100009] From [0] adding response for request === <request TransactionId[100009] ReqId[27] type[Put]  key[G]> ..... output[1] exception[null] 
Place(0) [ResilientMapImpl] put[100009]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100009] clientId[0] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200008] clientId[1] ...
Place(1) [MapRequest] TransId[200008] From [0] adding response for request === <request TransactionId[200008] ReqId[23] type[Put]  key[G]> ..... output[1] exception[null] 
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Transaction] Tx(400007) and Tx(200008) no overlap
Place(0) [Transaction] Tx(400007) and Tx(200008) conflicting=[false] ...
Place(0) [Transaction] Tx(400007) and Tx(500007) no overlap
Place(0) [Transaction] Tx(400007) and Tx(500007) conflicting=[false] ...
Place(0) [Transaction] Tx(400007) and Tx(600009) no overlap
Place(0) [Transaction] Tx(400007) and Tx(600009) conflicting=[false] ...
Place(0) [Transaction] Tx(400007) and Tx(100009) no overlap
Place(0) [Transaction] Tx(400007) and Tx(100009) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[400007] is null
Place(1) [Transaction] Tx(600009) and Tx(500007) no overlap
Place(1) [Transaction] Tx(600009) and Tx(500007) conflicting=[false] ...
Place(1) [Transaction] Tx(600009) and Tx(300009) no overlap
Place(1) [Transaction] Tx(600009) and Tx(300009) conflicting=[false] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300009] clientId[2] ...
Place(1) [Replica(1)] ConflictReport for transaction[600009] is null
Place(1) [Replica(1)] calling abortNoResponse for transactionId[500007] ...
Place(3) [MapRequest] TransId[400007] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400007] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200008] clientId[1] ...
Place(0) [Transaction] Tx(600009) and Tx(400007) no overlap
Place(0) [Transaction] Tx(600009) and Tx(400007) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [Transaction] Tx(600009) and Tx(200008) no overlap
Place(0) [Transaction] Tx(600009) and Tx(200008) conflicting=[false] ...
Place(0) [Transaction] Tx(600009) and Tx(500007) no overlap
Place(0) [Transaction] Tx(600009) and Tx(500007) conflicting=[false] ...
Place(0) [Transaction] Tx(600009) and Tx(100009) no overlap
Place(0) [Transaction] Tx(600009) and Tx(100009) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[600009] is null
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [Transaction] Tx(400007) and Tx(200008) no overlap
Place(5) [Transaction] Tx(400007) and Tx(200008) conflicting=[false] ...
Place(5) [Transaction] Tx(400007) and Tx(100009) no overlap
Place(5) [Transaction] Tx(400007) and Tx(100009) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[400007] is null
Place(5) [MapRequest] TransId[600009] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600009] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(5) [MapRequest] TransId[600009] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600009] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(3) [MapRequest] TransId[400007] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400007] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(0) [MapRequest] TransId[100009] From [5] adding response for request === <request TransactionId[100009] ReqId[27] type[Put]  key[G]> ..... output[1] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[500007] ...
Place(2) [MapRequest] TransId[300009] From [1] adding response for request === <request TransactionId[300009] ReqId[27] type[Put]  key[C]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200008] From [5] adding response for request === <request TransactionId[200008] ReqId[23] type[Put]  key[G]> ..... output[1] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300009]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] abortTransaction[500007]          ... released }    Success=true
Place(4) [ResilientMapImpl] sleeping for 17ms
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600009] ReqId[27] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600009] ReqId[27] type[Commit]  key[null]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300009] ReqId[28] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300009] ReqId[28] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300009]  { await ... 
Place(5) [MapRequest] Completing request: <request TransactionId[600009] ReqId[27] type[Commit]  key[null]>  Exception: null
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [Replica(2)] ConflictReport for transaction[300009] is null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200008]          ... released }    Success=true
Place(2) [MapRequest] TransId[300009] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300009] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400007] ReqId[21] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400007] ReqId[21] type[Commit]  key[null]>
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200008] ReqId[24] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200008] ReqId[24] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200008]  { await ... 
Place(0) [ResilientMapImpl] put[100009]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100009] ReqId[28] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100009] ReqId[28] type[PrepareCommit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400007] ReqId[21] type[Commit]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] commitTransaction[100009]  { await ... 
Place(0) [Transaction] Tx(100009) and Tx(400007) no overlap
Place(0) [Transaction] Tx(100009) and Tx(400007) conflicting=[false] ...
Place(0) [Transaction] Tx(100009) and Tx(600009) no overlap
Place(0) [Transaction] Tx(100009) and Tx(600009) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Transaction] Tx(100009) and Tx(200008) overlapped keys = G,
Place(0) [Transaction] Tx(100009) and Tx(200008) conflict in key [G]
Place(0) [Transaction] Tx(100009) and Tx(200008) conflicting=[true] ...
Place(5) [Transaction] Tx(100009) and Tx(400007) no overlap
Place(5) [Transaction] Tx(100009) and Tx(400007) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Transaction] Tx(100009) and Tx(200008) overlapped keys = G,
Place(5) [Transaction] Tx(100009) and Tx(200008) conflict in key [G]
Place(5) [Transaction] Tx(100009) and Tx(200008) conflicting=[true] ...
Place(0) [Replica(0)] ConflictReport for transaction[100009] is::: ConflictReport with active transactions: 200008,   and maxTransId is: 200008
Place(0) [Replica(0)] TransId[100009] Abort my self, NOT ready to commit ...
Place(5) [Replica(5)] ConflictReport for transaction[100009] is::: ConflictReport with active transactions: 200008,   and maxTransId is: 200008
Place(5) [Replica(5)] TransId[100009] Abort my self, NOT ready to commit ...
Place(0) [MapRequest] TransId[100009] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100009] Waiting for votes from places [5,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] TransId[400007] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (Y,4) ...
Place(1) [Replica(1)] TransId[600009] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (B,2) ...
Place(1) [Transaction] Tx(300009) and Tx(600009) no overlap
Place(1) [Transaction] Tx(300009) and Tx(600009) conflicting=[false] ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(1) [Replica(1)] ConflictReport for transaction[300009] is null
Place(5) [Replica(5)] TransId[400007] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (Y,4) ...
Place(0) [MapRequest] TransId[100009] From [5] adding vote response [0] ...
Place(0) [MapRequest] TransId[100009] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [5] adding vote response completed ...
Place(0) [Replica(0)] TransId[600009] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (B,2) ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[200008] is null
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Replica(5)] ConflictReport for transaction[200008] is null
Place(1) [MapRequest] TransId[200008] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200008] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(1) [MapRequest] TransId[200008] From [5] adding vote response [1] ...
Place(1) [MapRequest] TransId[200008] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [5] adding vote response completed ...
Place(2) [MapRequest] TransId[300009] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300009] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100009] ReqId[28] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100009]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100009] ReqId[29] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100009] ReqId[29] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100009] ReqId[29] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100009]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100009] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400007]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400008]  { await ... 
Place(3) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400008] ReqId[22] type[Get]  key[V]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400008] ReqId[22] type[Get]  key[V]>
Place(4) [ResilientMapImpl] get[500008]  { await ... 
Place(4) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500008] ReqId[22] type[Get]  key[T]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500008] ReqId[22] typPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600009]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600010]  { await ... 
Place(5) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600010] ReqId[28] type[Get]  key[F]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600010] ReqId[28] type[Get]  key[F]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600010] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [MapRequest] TransId[600010] From [5] adding response for request === <request TransactionId[600010] ReqId[28] type[Get]  key[F]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replie[Get]  key[T]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200008] ReqId[24] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200008] ReqId[24] type[Commit]  key[null]>
caClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300009] ReqId[28] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300009] ReqId[28] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300009] ReqId[28] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100009] ...
Place(2) [Replica(2)] TransId[300009] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (C,3) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400008] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [MapRequest] TransId[400008] From [3] adding response for request === <request TransactionId[400008] ReqId[22] type[Get]  key[V]> ..... output[2] exception[null] 
Place(1) [MapRequest] Completing request: <request TransactionId[200008] ReqId[24] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400008] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600010] clientId[5] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(1) [Replica(1)] TransId[300009] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (C,3) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500008] clientId[4] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(5) [Replica(5)] TransId[200008] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (G,2) ...
Place(3) [MapRequest] TransId[400008] From [2] adding response for request === <request TransactionId[400008] ReqId[22] type[Get]  key[V]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600010] From [4] adding response for request === <request TransactionId[600010] ReqId[28] type[Get]  key[F]> ..... output[2] exception[null] 
Place(0) [Replica(0)] TransId[200008] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(0) [Replica(0)] getOrAddActiveTransaction transId[500008] clientId[4] ...
Place(0) [Partition] Partition [5]  PUT (G,2) ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(4) [MapRequest] TransId[500008] From [1] adding response for request === <request TransactionId[500008] ReqId[22] type[Get]  key[T]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500008] From [0] adding response for request === <request TransactionId[500008] ReqId[22] type[Get]  key[T]> ..... output[1] exception[null] 
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(4) [Replica(4)] check transaction client  TransId=[600010] ClientPlace [5] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[600010] ClientPlace [5] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100009]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 9ms
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[500008] ClientPlace [4] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400008]          ... released }    Success=true
Place(3) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400008] ReqId[23] type[Put]  key[V]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400008] ReqId[23] type[Put]  key[V]>
Place(3) [ResilientMapImpl] put[400008]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400008] clientId[3] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200008]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200009]  { await ... 
Place(1) [ReplicaClient] Key[B] PPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600010]          ... released }    Success=true
Place(5) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600010] ReqId[29] type[Put]  key[F]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600010] ReqId[29] type[Put]  key[F]>
Place(5) [ResilientMapImpl] put[600010]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600010] clientId[5] ...
Place(5) [MapRequest] TransId[600010] From [5] adding response for request === <request TransactionId[600010] ReqId[29] type[Put]  key[F]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300009]          ... released }  aritionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200009] ReqId[25] type[Get]  key[B]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200009] ReqId[25] type[Get]  key[B]>
  Success=true
Place(2) [ResilientMapImpl] get[300010]  { await ... 
Place(3) [MapRequest] TransId[400008] From [3] adding response for request === <request TransactionId[400008] ReqId[23] type[Put]  key[V]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300010] ReqId[29] type[Get]  key[I]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300010] ReqId[29] type[Get]  key[I]>
Place(4) [ResilientMapImpl] get[500008]          ... released }    Success=true
Place(4) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500008] ReqId[23] type[Put]  key[T]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500008] ReqId[23] type[Put]  key[T]>
Place(4) [ResilientMapImpl] put[500008]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200009] clientId[1] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [MapRequest] TransId[200009] From [1] adding response for request === <request TransactionId[200009] ReqId[25] type[Get]  key[B]> ..... output[2] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300010] clientId[2] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(2) [MapRequest] TransId[300010] From [2] adding response for request === <request TransactionId[300010] ReqId[29] type[Get]  key[I]> ..... output[2] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600010] clientId[5] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300010] clientId[2] ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400008] clientId[3] ...
Place(2) [MapRequest] TransId[300010] From [1] adding response for request === <request TransactionId[300010] ReqId[29] type[Get]  key[I]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400008] From [2] adding response for request === <request TransactionId[400008] ReqId[23] type[Put]  key[V]> ..... output[2] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500008] clientId[4] ...
Place(5) [MapRequest] TransId[600010] From [4] adding response for request === <request TransactionId[600010] ReqId[29] type[Put]  key[F]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500008] From [1] adding response for request === <request TransactionId[500008] ReqId[23] type[Put]  key[T]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200009] clientId[1] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500008] clientId[4] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(4) [MapRequest] TransId[500008] From [0] adding response for request === <request TransactionId[500008] ReqId[23] type[Put]  key[T]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200009] From [0] adding response for request === <request TransactionId[200009] ReqId[25] type[Get]  key[B]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200009]          ... released }    Success=true
Place(1) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200009] ReqId[26] type[Put]  key[B]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200009] ReqId[26] type[Put]  key[B]>
Place(1) [ResilientMapImpl] put[200009]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200009] clientId[1] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500008]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500008] ReqId[24] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommiPlace(0) [ResilientMapImpl] get[100010]  { await ... 
Place(0) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100010] ReqId[30] type[Get]  key[G]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100010] ReqId[30] type[Get]  key[G]>
t?  for request: <request TransactionId[500008] ReqId[24] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500008]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400008]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400008] ReqId[24] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400008] ReqId[24] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400008]  { await ... 
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Replica(3)] ConflictReport for transaction[400008] is null
Place(3) [MapRequest] TransId[400008] From [3] adding vote response [1] ...
Place(3) [MapRequest] TransId[400008] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [3] adding vote response completed ...
Place(1) [MapRequest] TransId[200009] From [1] adding response for request === <request TransactionId[200009] ReqId[26] type[Put]  key[B]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300010]          ... released }    Success=true
Place(2) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300010] ReqId[30] type[Put]  key[I]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300010] ReqId[30] type[Put]  key[I]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600010]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600010] ReqId[30] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600010] ReqId[30] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] put[300010]  { aPlace(0) [Replica(0)] getOrAddActiveTransaction transId[100010] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
wait ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300010] clientId[2] ...
Place(2) [MapRequest] TransId[300010] From [2] adding response for request === <request TransactionId[300010] ReqId[30] type[Put]  key[I]> ..... output[2] exception[null] 
Place(5) [ResilientMapImpl] commitTransaction[600010]  { await ... 
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Replica(5)] ConflictReport for transaction[600010] is null
Place(0) [MapRequest] TransId[100010] From [0] adding response for request === <request TransactionId[100010] ReqId[30] type[Get]  key[G]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600010] From [5] adding vote response [1] ...
Place(5) [MapRequest] TransId[600010] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [5] adding vote response completed ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100010] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400008] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[300010] ClientPlace [2] isDead[false] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Transaction] Tx(400008) and Tx(300010) no overlap
Place(2) [Transaction] Tx(400008) and Tx(300010) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[400008] is null
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300010] clientId[2] ...
Place(0) [MapRequest] TransId[100010] From [5] adding response for request === <request TransactionId[100010] ReqId[30] type[Get]  key[G]> ..... output[2] exception[null] 
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Transaction] Tx(500008) and Tx(300010) no overlap
Place(1) [Transaction] Tx(500008) and Tx(300010) conflicting=[false] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Replica(4)] ConflictReport for transaction[600010] is null
Place(1) [Transaction] Tx(500008) and Tx(200009) no overlap
Place(1) [Transaction] Tx(500008) and Tx(200009) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[500008] is null
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Transaction] Tx(500008) and Tx(100010) no overlap
Place(0) [Transaction] Tx(500008) and Tx(100010) conflicting=[false] ...
Place(0) [Transaction] Tx(500008) and Tx(200009) no overlap
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[400008] ClientPlace [3] isDead[false] ...
Place(0) [Transaction] Tx(500008) and Tx(200009) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[500008] is null
Place(2) [MapRequest] TransId[300010] From [1] adding response for request === <request TransactionId[300010] ReqId[30] type[Put]  key[I]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400008] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400008] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(5) [MapRequest] TransId[600010] From [4] adding vote response [1] ...
Place(5) [MapRequest] TransId[600010] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [4] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200009] clientId[1] ...
Place(4) [MapRequest] TransId[500008] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500008] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500008] From [1] adding vote response [1] ...
Place(4) [MapRequest] TransId[500008] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(1) [MapRequest] TransId[200009] From [0] adding response for request === <request TransactionId[200009] ReqId[26] type[Put]  key[B]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ResilientMapImpl] get[100010]          ... released }    Success=true
Place(0) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100010] ReqId[31] type[Put]  key[G]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100010] ReqId[31] type[Put]  key[G]>
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400008] ReqId[24] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400008] ReqId[24] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400008] ReqId[24] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[400008] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (V,3) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200009]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200009] ReqId[27] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200009] ReqId[27] type[PrepareCommit]  kPlace(0) [ResilientMapImpl] put[100010]  { await ... 
ey[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300010]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300010] ReqId[31] type[PrepareCommit]  key[null]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100010] clientId[0] ...
Place(0) [MapRequest] TransId[100010] From [0] adding response for request === <request TransactionId[100010] ReqId[31] type[Put]  key[G]> ..... output[2] exception[null] 
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500008] ReqId[24] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500008] ReqId[24] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500008] ReqId[24] type[Commit]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] commitTransaction[200009]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600010] ReqId[30] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600010] ReqId[30] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600010] ReqId[30] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] TransId[600010] Applying commit changes:=> InitVersion[1] value[3] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (F,3) ...
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300010] ReqId[31] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300010]  { await ... 
Place(2) [Transaction] Tx(300010) and Tx(400008) no overlap
Place(2) [Transaction] Tx(300010) and Tx(400008) conflicting=[Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
false] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] ConflictReport for transaction[300010] is null
Place(2) [MapRequest] TransId[300010] From [2] adding vote response [1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100010] clientId[0] ...
Place(2) [MapRequest] TransId[300010] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(1) [Replica(1)] check transaction client  TransId=[500008] ClientPlace [4] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[200009] ClientPlace [1] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[300010] ClientPlace [2] isDead[false] ...
Place(1) [Transaction] Tx(200009) and Tx(500008) no overlap
Place(1) [Transaction] Tx(200009) and Tx(500008) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [Transaction] Tx(200009) and Tx(300010) no overlap
Place(1) [Transaction] Tx(200009) and Tx(300010) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[200009] is null
Place(1) [MapRequest] TransId[200009] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200009] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(4) [Replica(4)] TransId[600010] Applying commit changes:=> InitVersion[1] value[3] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (F,3) ...
Place(1) [Transaction] Tx(300010) and Tx(500008) no overlap
Place(1) [Transaction] Tx(300010) and Tx(500008) conflicting=[false] ...
Place(1) [Transaction] Tx(300010) and Tx(200009) no overlap
Place(1) [Transaction] Tx(300010) and Tx(200009) conflicting=[false] ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(1) [Replica(1)] ConflictReport for transaction[300010] is null
Place(2) [Replica(2)] TransId[400008] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (V,3) ...
Place(2) [MapRequest] TransId[300010] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300010] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(1) [Replica(1)] TransId[500008] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (T,2) ...
Place(0) [MapRequest] TransId[100010] From [5] adding response for request === <request TransactionId[100010] ReqId[31] type[Put]  key[G]> ..... output[2] exception[null] 
Place(0) [Replica(0)] TransId[500008] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (T,2) ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [Transaction] Tx(200009) and Tx(100010) no overlap
Place(0) [Transaction] Tx(200009) and Tx(100010) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[200009] is null
Place(1) [MapRequest] TransId[200009] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200009] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400008]          ... released }    Success=true
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400009]  { await ... 
Place(3) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400009] ReqId[25] type[Get]  key[H]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400009] ReqId[25] type[Get]  key[H]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100010]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100010] ReqId[32] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100010] ReqId[32] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600010]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600011]  { await ... 
Place(5) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600011] ReqId[31] type[Get]  key[J]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600011] ReqId[31] type[Get]  key[J]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300010] ReqId[31] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300010] ReqId[31] type[Commit]  key[null]>
PlPlace(0) [ResilientMapImpl] commitTransaction[100010]  { await ... 
Place(0) [Transaction] Tx(100010) and Tx(200009) no overlap
Place(0) [Transaction] Tx(100010) and Tx(200009) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[100010] is null
Place(0) [MapRequest] TransId[100010] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100010] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
ace(2) [MapRequest] Completing request: <request TransactionId[300010] ReqId[31] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] TransId[300010] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (I,3) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500008]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500009]  { await ... 
Place(4) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500009] ReqId[25] type[Get]  key[Q]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500009] ReqId[25] type[Get]  key[Q]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500009] clientId[4] ...
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200009] ReqId[27] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200009] ReqId[27] type[Commit]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200009] ReqId[27] type[Commit]  key[null]>  Exception: null
Place(4) [MapRequest] TransId[500009] From [4] adding response for request === <request TransactionId[500009] ReqId[25] type[Get]  key[Q]> ..... output[1] exception[null] 
Place(1) [Replica(1)] TransId[200009] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (B,3) ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Replica(5)] ConflictReport for transaction[100010] is null
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500009] clientId[4] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600011] clientId[5] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(0) [Replica(0)] TransId[200009] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (B,3) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400009] clientId[3] ...
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(5) [MapRequest] TransId[600011] From [2] adding response for request === <request TransactionId[600011] ReqId[31] type[Get]  key[J]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400009] From [0] adding response for request === <request TransactionId[400009] ReqId[25] type[Get]  key[H]> ..... output[2] exception[null] 
Place(1) [Replica(1)] TransId[300010] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (I,3) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600011] clientId[5] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400009] clientId[3] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(4) [MapRequest] TransId[500009] From [3] adding response for request === <request TransactionId[500009] ReqId[25] type[Get]  key[Q]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400009] From [1] adding response for request === <request TransactionId[400009] ReqId[25] type[Get]  key[H]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600011] From [3] adding response for request === <request TransactionId[600011] ReqId[31] type[Get]  key[J]> ..... output[null] exception[null] 
Place(0) [MapRequest] TransId[100010] From [5] adding vote response [1] ...
Place(0) [MapRequest] TransId[100010] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [5] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100010] ReqId[32] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100010] ReqId[32] type[Commit]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100010] ReqId[32] type[Commit]  key[null]>  Exception: null
Place(0) [Replica(0)] TransId[100010] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (G,3) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300010]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300011]  { await ... 
Place(2) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300011] ReqId[32] type[Get]  key[P]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300011] ReqId[32] type[Get]  key[P]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400009]          ... released }    Success=true
Place(3) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400009] ReqId[26] type[Put]  key[H]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400009] ReqId[26] type[Put]  key[H]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500009]          ... released }    Success=true
Place(4) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500009] ReqId[26] type[Put]  key[Q]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500009] ReqId[26] type[Put]  key[Q]>
Place(4) [ResilientMapImplPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600011]          ... released }    Success=true
Place(5) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600011] ReqId[32] type[Put]  key[J]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600011] ReqId[32] type[Put]  key[J]>
Place(5) [ResilientMapImpl] put[600011]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300011] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
] put[500009]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500009] clientId[4] ...
Place(4) [MapRequest] TransId[500009] From [4] adding response for request === <request TransactionId[500009] ReqId[26] type[Put]  key[Q]> ..... output[1] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200009]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200010]  { await ... 
Place(1) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200010] ReqId[28] type[Get]  key[J]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200010] ReqId[28] type[Get]  key[J]>
Place(5) [Replica(5)] TransId[100010] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (G,3) ...
Place(2) [MapRequest] TransId[300011] From [2] adding response for request === <request TransactionId[300011] ReqId[32] type[Get]  key[P]> ..... output[2] exception[null] 
Place(3) [ResilientMapImpl] put[400009]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500009] clientId[4] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600011] clientId[5] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200010] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300011] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600011] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200010] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(5) [MapRequest] TransId[600011] From [2] adding response for request === <request TransactionId[600011] ReqId[32] type[Put]  key[J]> ..... output[null] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400009] clientId[3] ...
Place(1) [MapRequest] TransId[200010] From [2] adding response for request === <request TransactionId[200010] ReqId[28] type[Get]  key[J]> ..... output[null] exception[null] 
Place(4) [MapRequest] TransId[500009] From [3] adding response for request === <request TransactionId[500009] ReqId[26] type[Put]  key[Q]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400009] From [1] adding response for request === <request TransactionId[400009] ReqId[26] type[Put]  key[H]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300011] From [3] adding response for request === <request TransactionId[300011] ReqId[32] type[Get]  key[P]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600011] From [3] adding response for request === <request TransactionId[600011] ReqId[32] type[Put]  key[J]> ..... output[null] exception[null] 
Place(1) [MapRequest] TransId[200010] From [3] adding response for request === <request TransactionId[200010] ReqId[28] type[Get]  key[J]> ..... output[null] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400009] clientId[3] ...
Place(3) [MapRequest] TransId[400009] From [0] adding response for request === <request TransactionId[400009] ReqId[26] type[Put]  key[H]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200010]          ... released }    Success=true
Place(1) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200010] ReqId[29] type[Put]  key[J]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200010] ReqId[29] type[Put]  key[J]>
Place(1) [ResilientMapImpl] put[200010]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600011]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600011] ReqId[33] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600011] ReqId[33] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600011]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300011]          ... released }    Success=true
Place(2) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100010]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100011]  { await ... 
Place(0) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400009]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400009] ReqId[27] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400009] ReqId[27] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400009]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500009]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500009] ReqId[27] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500009] ReqId[27] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100011] ReqId[33] type[Get]  key[F]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100011] ReqId[33] type[Get]  key[F]>
Place(4) [ResilientMapImpl] commitTransaction[500009]  { await ... 
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(4) [Replica(4)] ConflictReport for transaction[500009] is null
Place(4) [MapRequest] TransId[500009] From [4] adding vote response [1] ...
Place(4) [MapRequest] TransId[500009] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [4] adding vote response completed ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300011] ReqId[33] type[Put]  key[P]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300011] ReqId[33] type[Put]  key[P]>
Place(2) [ResilientMapImpl] put[300011]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300011] clientId[2] ...
Place(2) [MapRequest] TransId[300011] From [2] adding response for request === <request TransactionId[300011] ReqId[33] type[Put]  key[P]> ..... output[2] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100011] clientId[0] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100011] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Transaction] Tx(500009) and Tx(200010) no overlap
Place(3) [Transaction] Tx(500009) and Tx(200010) conflicting=[false] ...
Place(3) [Transaction] Tx(500009) and Tx(600011) no overlap
Place(3) [Transaction] Tx(500009) and Tx(600011) conflicting=[false] ...
Place(3) [Transaction] Tx(500009) and Tx(300011) no overlap
Place(3) [Transaction] Tx(500009) and Tx(300011) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[500009] is null
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Transaction] Tx(600011) and Tx(200010) overlapped keys = J,
Place(2) [Transaction] Tx(600011) and Tx(200010) conflict in key [J]
Place(2) [Transaction] Tx(600011) and Tx(200010) conflicting=[true] ...
Place(2) [Transaction] Tx(600011) and Tx(300011) no overlap
Place(2) [Transaction] Tx(600011) and Tx(300011) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[600011] is::: ConflictReport with active transactions: 200010,   and maxTransId is: 600011
Place(2) [Replica(2)] TransId[600011] Abort other transaction and become ready to commit ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200010] clientId[1] ...
Place(2) [Replica(2)] (put) Transaction [200010]  is not active. Return TransactionAbortedException ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300011] clientId[2] ...
Place(3) [Transaction] Tx(600011) and Tx(500009) no overlap
Place(3) [Transaction] Tx(600011) and Tx(500009) conflicting=[false] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Transaction] Tx(600011) and Tx(200010) overlapped keys = J,
Place(3) [Transaction] Tx(600011) and Tx(200010) conflict in key [J]
Place(3) [Transaction] Tx(600011) and Tx(200010) conflicting=[true] ...
Place(3) [Transaction] Tx(600011) and Tx(300011) no overlap
Place(3) [Transaction] Tx(600011) and Tx(300011) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[600011] is::: ConflictReport with active transactions: 200010,   and maxTransId is: 600011
Place(3) [Replica(3)] TransId[600011] Abort other transaction and become ready to commit ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200010] clientId[1] ...
Place(3) [Replica(3)] (put) Transaction [200010]  is not active. Return TransactionAbortedException ...
Place(5) [MapRequest] TransId[600011] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600011] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(1) [Replica(1)] ConflictReport for transaction[400009] is null
Place(3) [MapRequest] TransId[400009] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400009] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(1) [MapRequest] TransId[200010] From [2] adding response for request === <request TransactionId[200010] ReqId[29] type[Put]  key[J]> ..... output[null] exception[x10.util.resilient.map.exception.TransactionAbortedException] 
Place(4) [MapRequest] TransId[500009] From [3] adding vote response [1] ...
Place(4) [MapRequest] TransId[500009] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [3] adding vote response completed ...
Place(2) [MapRequest] TransId[300011] From [3] adding response for request === <request TransactionId[300011] ReqId[33] type[Put]  key[P]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600011] From [3] adding vote response [1] ...
Place(5) [MapRequest] TransId[600011] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [3] adding vote response completed ...
Place(1) [MapRequest] TransId[200010] From [3] adding response for request === <request TransactionId[200010] ReqId[29] type[Put]  key[J]> ..... output[null] exception[x10.util.resilient.map.exception.TransactionAbortedException] 
Place(0) [MapRequest] TransId[100011] From [5] adding response for request === <request TransactionId[100011] ReqId[33] type[Get]  key[F]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100011] From [4] adding response for request === <request TransactionId[100011] ReqId[33] type[Get]  key[F]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(0) [Replica(0)] ConflictReport for transaction[400009] is null
Place(3) [MapRequest] TransId[400009] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400009] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100011]          ... released }    Success=true
Place(0) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100011] ReqId[34] type[Put]  key[F]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100011] ReqId[34] type[Put]  key[F]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400009] ReqId[27] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400009] ReqId[27] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400009] ReqId[27] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500009] ReqId[27] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500009] ReqId[27] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500009] ReqId[27] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[500009] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(4) [PPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600011] ReqId[33] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600011] ReqId[33] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300011]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300011] ReqId[34] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300011] ReqId[34] type[PrepareCommit]  key[null]>
artition] Partition [3]  PUT (Q,2) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200010]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200010] ReqId[30] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200010] ReqId[30] type[Abort]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300011]  { await ... 
Place(2) [Transaction] Tx(300011) and Tx(600011) no overlap
Place(2) [Transaction] Tx(300011) and Tx(600011) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(2) [Replica(2)] ConflictReport for transaction[300011] is null
Place(0) [ResilientMapImpl] put[100011]  { await ... 
Place(1) [MapRequest] Completing request: <request TransactionId[200010] ReqId[30] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200010]  { await ... 
Place(5) [MapRequest] Completing request: <request TransactionId[600011] ReqId[33] type[Commit]  key[null]>  Exception: null
Place(2) [MapRequest] TransId[300011] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300011] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100011] clientId[0] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100011] clientId[0] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[200010] ...
Place(2) [Replica(2)] TransId[600011] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (J,1) ...
Place(3) [Transaction] Tx(300011) and Tx(500009) no overlap
Place(3) [Transaction] Tx(300011) and Tx(500009) conflicting=[false] ...
Place(3) [Transaction] Tx(300011) and Tx(600011) no overlap
Place(3) [Transaction] Tx(300011) and Tx(600011) conflicting=[false] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Replica(3)] ConflictReport for transaction[300011] is null
Place(3) [Replica(3)] TransId[600011] Applying commit changes:=> InitVersion[-1] value[1] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (J,1) ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200010] ...
Place(1) [Replica(1)] TransId[400009] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (H,3) ...
Place(2) [MapRequest] TransId[300011] From [3] adding vote response [1] ...
Place(2) [MapRequest] TransId[300011] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [3] adding vote response completed ...
Place(0) [MapRequest] TransId[100011] From [5] adding response for request === <request TransactionId[100011] ReqId[34] type[Put]  key[F]> ..... output[3] exception[null] 
Place(0) [Replica(0)] TransId[400009] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (H,3) ...
Place(3) [Replica(3)] TransId[500009] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (Q,2) ...
Place(0) [MapRequest] TransId[100011] From [4] adding response for request === <request TransactionId[100011] ReqId[34] type[Put]  key[F]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100011]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100011] ReqId[35] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100011] ReqId[35] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500009]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500010]  { await ... 
Place(4) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500010] ReqId[28] type[Get]  key[R]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500010] ReqId[28] type[Get]  key[R]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600011]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600012]  { await ... 
Place(5) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600012] ReqId[34] type[Get]  key[T]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600012] ReqId[34] type[Get]  key[T]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300011] ReqId[34] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300011] ReqId[34] type[Commit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100011]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400009]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400010]  { await ... 
Place(3) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400010] ReqId[28] type[Get]  key[Z]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400010] ReqId[28] type[Get]  key[Z]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500010] clientId[4] ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(4) [MapRequest] TransId[500010] From [4] adding response for request === <request TransactionId[500010] ReqId[28] type[Get]  key[R]> ..... output[1] exception[null] 
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Transaction] Tx(100011) aPlace(2) [MapRequest] Completing request: <request TransactionId[300011] ReqId[34] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] TransId[300011] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (P,3) ...
nd Tx(500010) no overlap
Place(4) [Transaction] Tx(100011) and Tx(500010) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[100011] is null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200010]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 2ms
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Replica(5)] ConflictReport for transaction[100011] is null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500010] clientId[4] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(3) [Replica(3)] TransId[300011] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (P,3) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600012] clientId[5] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400010] clientId[3] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(5) [MapRequest] TransId[600012] From [1] adding response for request === <request TransactionId[600012] ReqId[34] type[Get]  key[T]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500010] From [5] adding response for request === <request TransactionId[500010] ReqId[28] type[Get]  key[R]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400010] From [1] adding response for request === <request TransactionId[400010] ReqId[28] type[Get]  key[Z]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100011] From [5] adding vote response [1] ...
Place(0) [MapRequest] TransId[100011] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [5] adding vote response completed ...
Place(0) [MapRequest] TransId[100011] From [4] adding vote response [1] ...
Place(0) [MapRequest] TransId[100011] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [4] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400010] clientId[3] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600012] clientId[5] ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(5) [MapRequest] TransId[600012] From [0] adding response for request === <request TransactionId[600012] ReqId[34] type[Get]  key[T]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400010] From [0] adding response for request === <request TransactionId[400010] ReqId[28] type[Get]  key[Z]> ..... output[1] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600012]          ... released }    Success=true
Place(5) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600012] ReqId[35] type[Put]  key[T]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600012] ReqId[35] type[Put]  key[T]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300011]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300012]  { await ... 
Place(2) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300012] ReqId[35] type[Get]  kPlace(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100011] ReqId[35] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100011] ReqId[35] type[Commit]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100011] ReqId[35] type[Commit]  key[null]>  Exception: null
ey[M]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300012] ReqId[35] type[Get]  key[M]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500010]          ... released }    Success=true
Place(4) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500010] ReqId[29] type[Put]  key[R]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500010] ReqId[29] type[Put]  key[R]>
Place(4) [ResilientMapImpl] put[500010]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500010] clientId[4] ...
Place(4) [MapRequest] TransId[500010] From [4] adding response for request === <request TransactionId[500010] ReqId[29] type[Put]  key[R]> ..... output[1] exception[null] 
Place(1) [ResilientMapImpl] get[200011]  { await ... 
Place(1) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200011] ReqId[31] type[Get]  key[J]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200011] ReqId[31] type[Get]  key[J]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400010]          ... released }    Success=true
Place(3) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [Replica(4)] TransId[100011] Applying commit changes:=> InitVersion[2] value[4] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (F,4) ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400010] ReqId[29] type[Put]  key[Z]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400010] ReqId[29] type[Put]  key[Z]>
Place(3) [ResilientMapImpl] put[400010]  { await ... 
Place(5) [ResilientMapImpl] put[600012]  { await ... 
Place(5) [Replica(5)] TransId[100011] Applying commit changes:=> InitVersion[2] value[4] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (F,4) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500010] clientId[4] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200011] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600012] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200011] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300012] clientId[2] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400010] clientId[3] ...
Place(5) [MapRequest] TransId[600012] From [1] adding response for request === <request TransactionId[600012] ReqId[35] type[Put]  key[T]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200011] From [2] adding response for request === <request TransactionId[200011] ReqId[31] type[Get]  key[J]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200011] From [3] adding response for request === <request TransactionId[200011] ReqId[31] type[Get]  key[J]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500010] From [5] adding response for request === <request TransactionId[500010] ReqId[29] type[Put]  key[R]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400010] From [1] adding response for request === <request TransactionId[400010] ReqId[29] type[Put]  key[Z]> ..... output[1] exception[null] 
Place(2) [MapRequest] TransId[300012] From [5] adding response for request === <request TransactionId[300012] ReqId[35] type[Get]  key[M]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400010] clientId[3] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300012] clientId[2] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(3) [MapRequest] TransId[400010] From [0] adding response for request === <request TransactionId[400010] ReqId[29] type[Put]  key[Z]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600012] clientId[5] ...
Place(2) [MapRequest] TransId[300012] From [0] adding response for request === <request TransactionId[300012] ReqId[35] type[Get]  key[M]> ..... output[1] exception[null] 
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[300012] ClientPlace [2] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[500010] ClientPlace [4] isDead[false] ...
Place(4) [Replica(4)] check transaction client  TransId=[500010] ClientPlace [4] isDead[false] ...
Place(5) [MapRequest] TransId[600012] From [0] adding response for request === <request TransactionId[600012] ReqId[35] type[Put]  key[T]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100011]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100012]  { await ... 
Place(0) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100012] ReqId[36] type[Get]  key[C]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100012] ReqId[36] type[Get]  key[C]>
Place(0) [Replica(0)] check transaction client  TransId=[600012] ClientPlace [5] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300012]          ... released }    Success=true
Place(2) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300012] ReqId[36] type[Put]  key[M]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300012] ReqId[36] type[Put]  key[M]>
Place(0) [Replica(0)] check transaction client  TransId=[300012] ClientPlace [2] isDead[false] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500010]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500010] ReqId[30] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500010] ReqId[30] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500010]  { await ... 
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(4) [Replica(4)] ConflictReport for transaction[500010] is null
Place(2) [ResilientMapImpl] put[300012]  { await ... 
Place(4) [MapRequest] TransId[500010] From [4] adding vote response [1] ...
Place(4) [MapRequest] TransId[500010] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [4] adding vote response completed ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600012]          ... released }    Success=true
Place(0) [Replica(0)] check transaction client  TransId=[400010] ClientPlace [3] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400010]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400010] ReqId[30] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400010] ReqId[30] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200011]          ... released }    Success=true
Place(1) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200011] ReqId[32] type[Put]  key[J]>
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600012] ReqId[36] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600012] ReqId[36] type[PrepareCommit]  key[null]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100012] clientId[0] ...
Place(5) [ResilientMapImpl] commitTransaction[600012]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100012] clientId[0] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(3) [ResilientMapImpl] commitTransaction[400010]  { await ... 
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200011] ReqId[32] type[Put]  key[J]>
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(1) [ResilientMapImpl] put[200011]  { await ... 
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [Transaction] Tx(500010) and Tx(300012) no overlap
Place(5) [Transaction] Tx(500010) and Tx(300012) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[500010] is null
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200011] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300012] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [Transaction] Tx(400010) and Tx(600012) no overlap
Place(1) [Transaction] Tx(400010) and Tx(600012) conflicting=[false] ...
Place(1) [Transaction] Tx(400010) and Tx(100012) no overlap
Place(1) [Transaction] Tx(400010) and Tx(100012) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[400010] is null
Place(1) [Transaction] Tx(600012) and Tx(400010) no overlap
Place(1) [Transaction] Tx(600012) and Tx(400010) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Transaction] Tx(600012) and Tx(100012) no overlap
Place(1) [Transaction] Tx(600012) and Tx(100012) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[600012] is null
Place(4) [MapRequest] TransId[500010] From [5] adding vote response [1] ...
Place(4) [MapRequest] TransId[500010] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [5] adding vote response completed ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200011] clientId[1] ...
Place(1) [MapRequest] TransId[200011] From [2] adding response for request === <request TransactionId[200011] ReqId[32] type[Put]  key[J]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200011] From [3] adding response for request === <request TransactionId[200011] ReqId[32] type[Put]  key[J]> ..... output[1] exception[null] 
Place(2) [MapRequest] TransId[300012] From [5] adding response for request === <request TransactionId[300012] ReqId[36] type[Put]  key[M]> ..... output[1] exception[null] 
Place(3) [MapRequest] TransId[400010] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400010] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(5) [MapRequest] TransId[600012] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600012] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(0) [MapRequest] TransId[100012] From [2] adding response for request === <request TransactionId[100012] ReqId[36] type[Get]  key[C]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100012] From [1] adding response for request === <request TransactionId[100012] ReqId[36] type[Get]  key[C]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Transaction] Tx(600012) and Tx(400010) no overlap
Place(0) [Transaction] Tx(600012) and Tx(400010) conflicting=[false] ...
Place(0) [Transaction] Tx(600012) and Tx(300012) no overlap
Place(0) [Transaction] Tx(600012) and Tx(300012) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[600012] is null
Place(0) [Transaction] Tx(400010) and Tx(600012) no overlap
Place(0) [Transaction] Tx(400010) and Tx(600012) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300012] clientId[2] ...
Place(0) [Transaction] Tx(400010) and Tx(300012) no overlap
Place(0) [Transaction] Tx(400010) and Tx(300012) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[400010] is null
Place(5) [MapRequest] TransId[600012] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600012] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(3) [MapRequest] TransId[400010] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400010] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(2) [MapRequest] TransId[300012] From [0] adding response for request === <request TransactionId[300012] ReqId[36] type[Put]  key[M]> ..... output[1] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100012]          ... released }    Success=true
Place(0) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100012] ReqId[37] type[Put]  key[C]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100012] ReqId[37] type[Put]  key[C]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300012]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300012] ReqId[37] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300012] ReqId[37] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] put[100012]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400010] ReqId[30] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400010] ReqId[30] type[Commit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500010] ReqId[30] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500010] ReqId[30] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500010] ReqId[30] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[500010] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[fPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600012] ReqId[36] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600012] ReqId[36] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600012] ReqId[36] type[Commit]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] commitTransaction[300012]  { await ... 
alse]

Place(4) [Partition] Partition [4]  PUT (R,2) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100012] clientId[0] ...
Place(3) [MapRequest] Completing request: <request TransactionId[400010] ReqId[30] type[Commit]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] put[200011]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200011] ReqId[33] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200011] ReqId[33] type[PrepareCommit]  key[null]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100012] clientId[0] ...
Place(1) [ResilientMapImpl] commitTransaction[200011]  { await ... 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[100012] ClientPlace [0] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[200011] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[200011] ClientPlace [1] isDead[false] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600012]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600013]  { await ... 
Place(5) [ReplicaClient] Key[E] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600013] ReqId[37] type[Get]  key[E]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600013] ReqId[37] type[Get]  key[E]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400010]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400011]  { await ... 
Place(3) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400011] ReqId[31] type[Get]  key[K]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400011] ReqId[31] type[Get]  key[K]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500010]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500011]  { await ... 
Place(4) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500011] ReqId[31] type[Get]  key[H]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500011] ReqId[31] type[Get]  key[H]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400011] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(3) [MapRequest] TransId[400011] From [3] adding response for request === <request TransactionId[400011] ReqId[31] type[Get]  key[K]> ..... output[null] exception[null] 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[100012] ClientPlace [0] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[600012] ClientPlace [5] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[400010] ClientPlace [3] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] TransId[500010] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[false]

Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Partition] Partition [4]  PUT (R,2) ...
Place(1) [Replica(1)] TransId[600012] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (T,3) ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Transaction] Tx(200011) and Tx(100012) no overlap
Place(2) [Transaction] Tx(200011) and Tx(100012) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[200011] is null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(5) [Replica(5)] ConflictReport for transaction[300012] is null
Place(1) [Replica(1)] TransId[400010] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (Z,2) ...
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[300012] ClientPlace [2] isDead[false] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500011] clientId[4] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600013] clientId[5] ...
Place(4) [Partition] Partition [3]  GET_V (E) ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Transaction] Tx(200011) and Tx(400011) no overlap
Place(3) [Transaction] Tx(200011) and Tx(400011) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[200011] is null
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400011] clientId[3] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600013] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200011] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200011] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(1) [MapRequest] TransId[200011] From [3] adding vote response [1] ...
Place(1) [MapRequest] TransId[200011] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [3] adding vote response completed ...
Place(5) [MapRequest] TransId[600013] From [4] adding response for request === <request TransactionId[600013] ReqId[37] type[Get]  key[E]> ..... output[null] exception[null] 
Place(5) [MapRequest] TransId[600013] From [3] adding response for request === <request TransactionId[600013] ReqId[37] type[Get]  key[E]> ..... output[null] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300012] ClientPlace [2] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[600012] ClientPlace [5] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[400010] ClientPlace [3] isDead[false] ...
Place(3) [MapRequest] TransId[400011] From [4] adding response for request === <request TransactionId[400011] ReqId[31] type[Get]  key[K]> ..... output[null] exception[null] 
Place(2) [MapRequest] TransId[300012] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300012] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(4) [MapRequest] TransId[500011] From [1] adding response for request === <request TransactionId[500011] ReqId[31] type[Get]  key[H]> ..... output[3] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500011] clientId[4] ...
Place(0) [MapRequest] TransId[100012] From [2] adding response for request === <request TransactionId[100012] ReqId[37] type[Put]  key[C]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(0) [Replica(0)] TransId[600012] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (T,3) ...
Place(0) [Replica(0)] TransId[400010] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (Z,2) ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100012] From [1] adding response for request === <request TransactionId[100012] ReqId[37] type[Put]  key[C]> ..... output[3] exception[null] 
Place(0) [Transaction] Tx(300012) and Tx(500011) no overlap
Place(0) [Transaction] Tx(300012) and Tx(500011) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[300012] is null
Place(4) [MapRequest] TransId[500011] From [0] adding response for request === <request TransactionId[500011] ReqId[31] type[Get]  key[H]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300012] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300012] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200011] ReqId[33] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200011] ReqId[33] type[Commit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100012]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100012] ReqId[38] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100012] ReqId[38] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400011]          ... released }    Success=true
Place(3) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400011] ReqId[32] type[Put]  key[K]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400011] ReqId[32] type[Put]  key[K]>
Place(3) [ResilientMapImpl] put[400011]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400011] clientId[3] ...
Place(3) [MapRequest] TransId[400011] From [3] adding response for request === <request TransactionId[400011] ReqId[32] type[Put]  key[K]> ..... output[null] exception[null] 
Place(1) [MapRequest] Completing request: <request TransactionId[200011] ReqId[33] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600013]          ... released }    Success=true
Place(5) [ReplicaClient] Key[E] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600013] ReqId[38] type[Put]  key[E]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600013] ReqId[38] type[Put]  key[E]>
Place(5) [ResilientMapImpl] put[600013]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300012] ReqId[37] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300012] ReqId[37] type[Commit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100012]  { await ... 
Place(2) [MapRequest] Completing request: <request TransactionId[300012] ReqId[37] type[Commit]  key[null]>  Exception: null
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(1) [Transaction] Tx(100012) and Tx(500011) no overlap
Place(1) [Transaction] Tx(100012) and Tx(500011) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[100012] is null
Place(2) [Transaction] Tx(100012) and Tx(200011) no overlap
Place(2) [Transaction] Tx(100012) and Tx(200011) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [Replica(2)] ConflictReport for transaction[100012] is null
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600013] clientId[5] ...
Place(2) [Replica(2)] TransId[200011] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (J,2) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400011] clientId[3] ...
Place(5) [MapRequest] TransId[600013] From [4] adding response for request === <request TransactionId[600013] ReqId[38] type[Put]  key[E]> ..... output[null] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600013] clientId[5] ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[100012] ClientPlace [0] isDead[false] ...
Place(3) [Replica(3)] TransId[200011] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (J,2) ...
Place(5) [Replica(5)] TransId[300012] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (M,2) ...
Place(5) [MapRequest] TransId[600013] From [3] adding response for request === <request TransactionId[600013] ReqId[38] type[Put]  key[E]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400011] From [4] adding response for request === <request TransactionId[400011] ReqId[32] type[Put]  key[K]> ..... output[null] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500011]          ... released }    Success=true
Place(4) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500011] ReqId[32] type[Put]  key[H]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500011] ReqId[32] type[Put]  key[H]>
Place(4) [ResilientMapImpl] put[500011]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500011] clientId[4] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500011] clientId[4] ...
Place(0) [MapRequest] TransId[100012] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100012] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(0) [Replica(0)] TransId[300012] Applying commit changes:=> InitVersion[0] value[2] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (M,2) ...
Place(0) [MapRequest] TransId[100012] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100012] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(4) [MapRequest] TransId[500011] From [0] adding response for request === <request TransactionId[500011] ReqId[32] type[Put]  key[H]> ..... output[3] exception[null] 
Place(3) [Replica(3)] check transaction client  TransId=[600013] ClientPlace [5] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[400011] ClientPlace [3] isDead[false] ...
Place(4) [MapRequest] TransId[500011] From [1] adding response for request === <request TransactionId[500011] ReqId[32] type[Put]  key[H]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100012] ReqId[38] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100012] ReqId[38] type[Commit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400011]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400011] ReqId[33] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400011] ReqId[33] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400011]  { await ... 
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(3) [Transaction] Tx(400011) and Tx(600013) no overlap
Place(3) [Transaction] Tx(400011) and Tx(600013) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[400011] is null
Place(3) [MapRequest] TransId[400011] From [3] adding vote response [1] ...
Place(3) [MapRequest] TransId[400011] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [3] adding vote Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600013]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600013] ReqId[39] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600013] ReqId[39] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600013]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300012]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300013]  { await ... 
Place(2) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <rePlace(0) [MapRequest] Completing request: <request TransactionId[100012] ReqId[38] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200011]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200012]  { await ... 
Place(1) [Replica(1)] TransId[100012] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (C,4) ...
Place(1) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200012] ReqId[34] type[Get]  key[M]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200012] ReqId[34] type[Get]  key[M]>
response completed ...
quest TransactionId[300013] ReqId[38] type[Get]  key[D]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300013] ReqId[38] type[Get]  key[D]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300013] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [MapRequest] TransId[300013] From [2] adding response for request === <request TransactionId[300013] ReqId[38] type[Get]  key[D]> ..... output[1] exception[null] 
Place(2) [Replica(2)] TransId[100012] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (C,4) ...
Place(4) [Partition] Partition [3]  GET_V (E) ...
Place(4) [Transaction] Tx(600013) and Tx(400011) no overlap
Place(4) [Transaction] Tx(600013) and Tx(400011) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[600013] is null
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300013] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(4) [Transaction] Tx(400011) and Tx(600013) no overlap
Place(4) [Transaction] Tx(400011) and Tx(600013) conflicting=[false] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Replica(4)] ConflictReport for transaction[400011] is null
Place(5) [MapRequest] TransId[600013] From [4] adding vote response [1] ...
Place(5) [MapRequest] TransId[600013] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [4] adding vote response completed ...
Place(3) [Transaction] Tx(600013) and Tx(400011) no overlap
Place(3) [Transaction] Tx(600013) and Tx(400011) conflicting=[false] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [Transaction] Tx(600013) and Tx(300013) no overlap
Place(3) [Transaction] Tx(600013) and Tx(300013) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[600013] is null
Place(2) [MapRequest] TransId[300013] From [3] adding response for request === <request TransactionId[300013] ReqId[38] type[Get]  key[D]> ..... output[1] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200012] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(5) [MapRequest] TransId[600013] From [3] adding vote response [1] ...
Place(5) [MapRequest] TransId[600013] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [3] adding vote response completed ...
Place(3) [MapRequest] TransId[400011] From [4] adding vote response [1] ...
Place(3) [MapRequest] TransId[400011] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [4] adding vote response completed ...
Place(1) [MapRequest] TransId[200012] From [5] adding response for request === <request TransactionId[200012] ReqId[34] type[Get]  key[M]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200012] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(1) [MapRequest] TransId[200012] From [0] adding response for request === <request TransactionId[200012] ReqId[34] type[Get]  key[M]> ..... output[2] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500011]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500011] ReqId[33] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500011] ReqId[33] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500011]  { await ... 
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(0) [Transaction] Tx(500011) and Tx(200012) no overlap
Place(0) [Transaction] Tx(500011) and Tx(200012) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[500011] is null
Place(1) [Replica(1)] ConflictReport for transaction[500011] is null
Place(4) [MapRequest] TransId[500011] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500011] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500011] From [1] adding vote response [1] ...
Place(4) [MapRequest] TransId[500011] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100012]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100013]  { await ... 
Place(0) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100013] ReqId[39] type[Get]  key[K]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100013] ReqId[39] type[Get]  key[K]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400011] ReqId[33] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400011] ReqId[33] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400011] ReqId[33] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200012]          ... released }    Success=true
Place(1) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200012] ReqId[35] type[Put]  key[M]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200012] ReqId[35] type[Put]  key[M]>
Place(1) [ResilPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600013] ReqId[39] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600013] ReqId[39] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300013]          ... released }    Success=true
Place(2) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300013] ReqId[39] type[Put]  key[D]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300013] ReqId[39] type[Put]  key[D]>
ientMapImpl] put[200012]  { await ... 
Place(3) [Replica(3)] TransId[400011] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (K,1) ...
Place(5) [MapRequest] Completing request: <request TransactionId[600013] ReqId[39] type[Commit]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] put[300013]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300013] clientId[2] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100013] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(2) [MapRequest] TransId[300013] From [2] adding response for request === <request TransactionId[300013] ReqId[39] type[Put]  key[D]> ..... output[1] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100013] clientId[0] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Replica(4)] TransId[600013] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (E,1) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300013] clientId[2] ...
Place(4) [Replica(4)] TransId[400011] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (K,1) ...
Place(3) [Replica(3)] TransId[600013] Applying commit changes:=> InitVersion[-1] value[1] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (E,1) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200012] clientId[1] ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[500011] ClientPlace [4] isDead[false] ...
Place(1) [MapRequest] TransId[200012] From [5] adding response for request === <request TransactionId[200012] ReqId[35] type[Put]  key[M]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300013] From [3] adding response for request === <request TransactionId[300013] ReqId[39] type[Put]  key[D]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100013] From [4] adding response for request === <request TransactionId[100013] ReqId[39] type[Get]  key[K]> ..... output[null] exception[null] 
Place(0) [MapRequest] TransId[100013] From [3] adding response for request === <request TransactionId[100013] ReqId[39] type[Get]  key[K]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200012] clientId[1] ...
Place(1) [MapRequest] TransId[200012] From [0] adding response for request === <request TransactionId[200012] ReqId[35] type[Put]  key[M]> ..... output[2] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500011] ReqId[33] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500011] ReqId[33] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500011] ReqId[33] type[Commit]  key[null]>  Exception: null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] TransId[500011] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (H,4) ...
Place(0) [ResilientMapImpl] get[100013]          ... released }    Success=true
Place(0) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100013] ReqId[40] type[Put]  key[K]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100013] ReqId[40] type[Put]  key[K]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400011]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400012]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400012] ReqId[34] type[Get]  key[N]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400012] ReqId[34] type[Get]  key[N]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200012]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200012] ReqId[36] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300013]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300013] ReqId[40] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300013] ReqId[40] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300013]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[300013] is null
Place(2) [MapRequest] TransId[300013] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300013] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
ommit?  for request: <request TransactionId[200012] ReqId[36] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200012]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600013]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600014]  { await ... 
Place(5) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600014] ReqId[40] type[Get]  key[Q]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600014] ReqId[40] type[Get]  key[Q]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100013] clientId[0] ...
Place(0) [ResilientMapImpl] put[100013]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100013] clientId[0] ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600014] clientId[5] ...
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] ConflictReport for transaction[200012] is null
Place(1) [Replica(1)] TransId[500011] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (H,4) ...
Place(1) [MapRequest] TransId[200012] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200012] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400012] clientId[3] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Transaction] Tx(300013) and Tx(100013) no overlap
Place(3) [Transaction] Tx(300013) and Tx(100013) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[300013] is null
Place(3) [MapRequest] TransId[400012] From [0] adding response for request === <request TransactionId[400012] ReqId[34] type[Get]  key[N]> ..... output[1] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600014] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400012] clientId[3] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(5) [MapRequest] TransId[600014] From [4] adding response for request === <request TransactionId[600014] ReqId[40] type[Get]  key[Q]> ..... output[2] exception[null] 
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(5) [Replica(5)] ConflictReport for transaction[200012] is null
Place(2) [MapRequest] TransId[300013] From [3] adding vote response [1] ...
Place(2) [MapRequest] TransId[300013] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [3] adding vote response completed ...
Place(0) [MapRequest] TransId[100013] From [3] adding response for request === <request TransactionId[100013] ReqId[40] type[Put]  key[K]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100013] From [4] adding response for request === <request TransactionId[100013] ReqId[40] type[Put]  key[K]> ..... output[null] exception[null] 
Place(3) [MapRequest] TransId[400012] From [1] adding response for request === <request TransactionId[400012] ReqId[34] type[Get]  key[N]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200012] From [5] adding vote response [1] ...
Place(1) [MapRequest] TransId[200012] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [5] adding vote response completed ...
Place(5) [MapRequest] TransId[600014] From [3] adding response for request === <request TransactionId[600014] ReqId[40] type[Get]  key[Q]> ..... output[2] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500011]          ... released }    Success=true
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500012]  { await ... 
Place(4) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500012] ReqId[34] type[Get]  key[Z]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500012] ReqId[34] type[Get]  key[Z]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500012] clientId[4] ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500012] clientId[4] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(4) [MapRequest] TransId[500012] From [0] adding response for request === <request TransactionId[500012] ReqId[34] type[Get]  key[Z]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500012] From [1] adding response for request === <request TransactionId[500012] ReqId[34] type[Get]  key[Z]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400012]          ... released }    Success=true
Place(3) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400012] ReqId[35] type[Put]  key[N]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400012] ReqId[35] type[Put]  key[N]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200012] ReqId[36] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200012] ReqId[36] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300013] ReqId[40] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300013] ReqId[40] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300013] ReqId[40] type[Commit]  key[null]>  Exception: null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100013]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100013] ReqId[41] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100013] ReqId[41] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] put[400012]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] TransId[300013] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (D,2) ...
Place(0) [ResilientMapImpl] commitTransaction[100013]  { await ... 
Place(1) [MapRequest] Completing request: <request TransactionId[200012] ReqId[36] type[Commit]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] get[600014]          ... released }    Success=true
Place(5) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600014] ReqId[41] type[Put]  key[Q]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600014] ReqId[41] type[Put]  key[Q]>
Place(5) [ResilientMapImpl] put[600014]  { await ... 
Place(3) [Transaction] Tx(100013) and Tx(300013) no overlap
Place(3) [Transaction] Tx(100013) and Tx(300013) conflicting=[false] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(3) [Transaction] Tx(100013) and Tx(600014) no overlap
Place(3) [Transaction] Tx(100013) and Tx(600014) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[100013] is null
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Replica(4)] Version conflict transaction[100013] key[K] oldVersion[-1] newVersion[0] ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600014] clientId[5] ...
Place(3) [Replica(3)] TransId[300013] Applying commit changes:=> InitVersion[0] value[2] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (D,2) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600014] clientId[5] ...
Place(5) [Replica(5)] TransId[200012] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (M,3) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400012] clientId[3] ...
Place(5) [MapRequest] TransId[600014] From [4] adding response for request === <request TransactionId[600014] ReqId[41] type[Put]  key[Q]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400012] From [1] adding response for request === <request TransactionId[400012] ReqId[35] type[Put]  key[N]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100013] From [3] adding vote response [1] ...
Place(0) [MapRequest] TransId[100013] From [4] adding vote response [0] ...
Place(0) [MapRequest] TransId[100013] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [3] adding vote response completed ...
Place(0) [MapRequest] TransId[100013] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [4] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400012] clientId[3] ...
Place(5) [MapRequest] TransId[600014] From [3] adding response for request === <request TransactionId[600014] ReqId[41] type[Put]  key[Q]> ..... output[2] exception[null] 
Place(0) [Replica(0)] TransId[200012] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (M,3) ...
Place(3) [MapRequest] TransId[400012] From [0] adding response for request === <request TransactionId[400012] ReqId[35] type[Put]  key[N]> ..... output[1] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500012]          ... released }    Success=true
Place(4) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500012] ReqId[35] type[Put]  key[Z]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500012] ReqId[35] type[Put]  key[Z]>
Place(4) [ResilientMapImpl] put[500012]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500012] clientId[4] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500012] clientId[4] ...
Place(4) [MapRequest] TransId[500012] From [0] adding response for request === <request TransactionId[500012] ReqId[35] type[Put]  key[Z]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500012] From [1] adding response for request === <request TransactionId[500012] ReqId[35] type[Put]  key[Z]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100013] ReqId[41] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100013]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100013] ReqId[42] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100013] ReqId[42] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400012]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400012] ReqId[36] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400012] ReqId[36] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200012]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200013]  { await ... 
Place(1) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200013] ReqId[37] type[Get]  key[R]>
Place(1) [RPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300013]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300014]  { await ... 
Place(2) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300014] ReqId[41] type[Get]  key[N]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300014] ReqId[41] type[Get]  key[N]>
eplicaClient] Submitting request: <request TransactionId[200013] ReqId[37] type[Get]  key[R]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600014]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600014] ReqId[42] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600014] ReqId[42] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600014]  { await ... 
Place(3) [ResilientMapImpl] commitTransaction[400012]  { await ... 
Place(0) [MapRequest] Completing request: <request TransactionId[100013] ReqId[42] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100013]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100013] ...
Place(4) [Replica(4)] calling abortNoResponse for transactionId[100013] ...
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(4) [Replica(4)] ConflictReport for transaction[600014] is null
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200013] clientId[1] ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] ConflictReport for transaction[600014] is null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200013] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300014] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Transaction] Tx(400012) and Tx(300014) overlapped keys = N,
Place(1) [Transaction] Tx(400012) and Tx(300014) conflict in key [N]
Place(1) [Transaction] Tx(400012) and Tx(300014) conflicting=[true] ...
Place(1) [Transaction] Tx(400012) and Tx(500012) no overlap
Place(1) [Transaction] Tx(400012) and Tx(500012) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[400012] is::: ConflictReport with active transactions: 300014,   and maxTransId is: 400012
Place(1) [Replica(1)] TransId[400012] Abort other transaction and become ready to commit ...
Place(5) [MapRequest] TransId[600014] From [4] adding vote response [1] ...
Place(5) [MapRequest] TransId[600014] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [4] adding vote response completed ...
Place(1) [MapRequest] TransId[200013] From [5] adding response for request === <request TransactionId[200013] ReqId[37] type[Get]  key[R]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300014] From [1] adding response for request === <request TransactionId[300014] ReqId[41] type[Get]  key[N]> ..... output[1] exception[null] 
Place(1) [MapRequest] TransId[200013] From [4] adding response for request === <request TransactionId[200013] ReqId[37] type[Get]  key[R]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400012] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400012] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(5) [MapRequest] TransId[600014] From [3] adding vote response [1] ...
Place(5) [MapRequest] TransId[600014] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [3] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300014] clientId[2] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Transaction] Tx(400012) and Tx(500012) no overlap
Place(0) [Transaction] Tx(400012) and Tx(500012) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[400012] is null
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500012]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500012] ReqId[36] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500012] ReqId[36] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500012]  { await ... 
Place(3) [MapRequest] TransId[400012] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400012] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(2) [MapRequest] TransId[300014] From [0] adding response for request === <request TransactionId[300014] ReqId[41] type[Get]  key[N]> ..... output[1] exception[null] 
Place(0) [Transaction] Tx(500012) and Tx(400012) no overlap
Place(0) [Transaction] Tx(500012) and Tx(400012) conflicting=[false] ...
Place(1) [Transaction] Tx(500012) and Tx(400012) no overlap
Place(1) [Transaction] Tx(500012) and Tx(400012) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Transaction] Tx(500012) and Tx(300014) no overlap
Place(0) [Transaction] Tx(500012) and Tx(300014) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[500012] is null
Place(0) [Replica(0)] ConflictReport for transaction[500012] is null
Place(4) [MapRequest] TransId[500012] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500012] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500012] From [1] adding vote response [1] ...
Place(4) [MapRequest] TransId[500012] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200013]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300014]          ... released }    Success=true
Place(2) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300014] ReqId[42] type[Put]  key[N]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300014] ReqId[42] type[Put]  key[N]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200013] ReqId[38] type[Put]  key[R]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200013] ReqId[38] type[Put]  key[R]>
Place(1) [ResilientMapImpl] put[200013]  { await ... 
Place(0) [ResilientMapImpl] abortTransaction[100013]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 14ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600014] ReqId[42] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600014] ReqId[42] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600014] ReqId[42] type[Commit]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] put[300014]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400012] ReqId[36] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400012] ReqId[36] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400012] ReqId[36] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[600014] Applying commit changes:=> InitVersion[1] value[3] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (Q,3) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200013] clientId[1] ...
Place(3) [Replica(3)] TransId[600014] Applying commit changes:=> InitVersion[1] value[3] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (Q,3) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200013] clientId[1] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300014] clientId[2] ...
Place(1) [Replica(1)] (put) Transaction [300014]  is not active. Return TransactionAbortedException ...
Place(1) [Replica(1)] TransId[400012] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (N,2) ...
Place(1) [MapRequest] TransId[200013] From [4] adding response for request === <request TransactionId[200013] ReqId[38] type[Put]  key[R]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200013] From [5] adding response for request === <request TransactionId[200013] ReqId[38] type[Put]  key[R]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300014] From [1] adding response for request === <request TransactionId[300014] ReqId[42] type[Put]  key[N]> ..... output[null] exception[x10.util.resilient.map.exception.TransactionAbortedException] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300014] clientId[2] ...
Place(0) [Replica(0)] TransId[400012] Applying commit changes:=> InitVersion[0] value[2] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (N,2) ...
Place(2) [MapRequest] TransId[300014] From [0] adding response for request === <request TransactionId[300014] ReqId[42] type[Put]  key[N]> ..... output[1] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500012] ReqId[36] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500012] ReqId[36] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500012] ReqId[36] type[Commit]  key[null]>  Exception: null
Place(0) [Replica(0)] TransId[500012] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (Z,3) ...
Place(1) [Replica(1)] TransId[500012] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (Z,3) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200013]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200013] ReqId[39] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200013] ReqId[39] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100014]  { await ... 
Place(0) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100014] ReqId[43] type[Get]  key[K]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100014] ReqId[43] type[Get]  key[K]>
Place(5) [ResilientMapImpl] commitTransaction[600014]          ... released }    Success=true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600015]  { await ... 
Place(5) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600015] ReqId[43] type[Get]  key[P]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600015] ReqId[43] type[Get]  key[P]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300014]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300014] ReqId[43] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300014] ReqId[43] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400012]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400013]  { await ... 
Place(3) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400013] ReqId[37] type[Get]  key[F]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400013] ReqId[37] type[Get]  key[F]>
Place(1) [ResilientMapImpl] commitTransaction[200013]  { await ... 
Place(2) [ResilientMapImpl] commitTransaction[300014]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100014] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100014] clientId[0] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400013] clientId[3] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600015] clientId[5] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(4) [Transaction] Tx(200013) and Tx(400013) no overlap
Place(4) [Transaction] Tx(200013) and Tx(400013) conflicting=[false] ...
Place(1) [Replica(1)] (ready) Transaction [300014]  is not active. Return Not Ready ...
Place(4) [Transaction] Tx(200013) and Tx(100014) no overlap
Place(4) [Transaction] Tx(200013) and Tx(100014) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[200013] is null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400013] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(3) [MapRequest] TransId[400013] From [4] adding response for request === <request TransactionId[400013] ReqId[37] type[Get]  key[F]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600015] clientId[5] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [Transaction] Tx(200013) and Tx(400013) no overlap
Place(5) [Transaction] Tx(200013) and Tx(400013) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[200013] is null
Place(5) [MapRequest] TransId[600015] From [2] adding response for request === <request TransactionId[600015] ReqId[43] type[Get]  key[P]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400013] From [5] adding response for request === <request TransactionId[400013] ReqId[37] type[Get]  key[F]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300014] From [1] adding vote response [0] ...
Place(2) [MapRequest] TransId[300014] Waiting for votes from places [0,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(1) [MapRequest] TransId[200013] From [4] adding vote response [1] ...
Place(1) [MapRequest] TransId[200013] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [4] adding vote response completed ...
Place(1) [MapRequest] TransId[200013] From [5] adding vote response [1] ...
Place(1) [MapRequest] TransId[200013] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [5] adding vote response completed ...
Place(5) [MapRequest] TransId[600015] From [3] adding response for request === <request TransactionId[600015] ReqId[43] type[Get]  key[P]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100014] From [3] adding response for request === <request TransactionId[100014] ReqId[43] type[Get]  key[K]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100014] From [4] adding response for request === <request TransactionId[100014] ReqId[43] type[Get]  key[K]> ..... output[1] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] Version conflict transaction[300014] key[N] oldVersion[0] newVersion[1] ...
Place(2) [MapRequest] TransId[300014] From [0] adding vote response [0] ...
Place(2) [MapRequest] TransId[300014] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500012]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500013]  { await ... 
Place(4) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500013] ReqId[37] type[Get]  key[N]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500013] ReqId[37] type[Get]  key[N]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500013] clientId[4] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500013] clientId[4] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(4) [MapRequest] TransId[500013] From [0] adding response for request === <request TransactionId[500013] ReqId[37] type[Get]  key[N]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500013] From [1] adding response for request === <request TransactionId[500013] ReqId[37] type[Get]  key[N]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400013]          ... released }    Success=true
Place(3) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400013] ReqId[38] type[Put]  key[F]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400013] ReqId[38] type[Put]  key[F]>
Place(3) [ResilientMapImpl] put[400013]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200013] ReqId[39] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200013] ReqId[39] type[Commit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600015]          ... released }    Success=true
Place(5) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600015] ReqId[44] type[Put]  key[P]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600015] ReqId[44] type[Put]  key[P]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300014] ReqId[43] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ResilientMapImpl] commitTransaction[300014]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300014] ReqId[44] type[Abort]Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100014]          ... released }    Success=true
Place(0) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100014] ReqId[44] type[Put]  key[K]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100014] ReqId[44] type[Put]  key[K]>
  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300014] ReqId[44] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300014] ReqId[44] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300014]  { await ... 
Place(1) [MapRequest] Completing request: <request TransactionId[200013] ReqId[39] type[Commit]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] put[100014]  { await ... 
Place(5) [ResilientMapImpl] put[600015]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100014] clientId[0] ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100014] clientId[0] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600015] clientId[5] ...
Place(4) [Replica(4)] TransId[200013] Applying commit changes:=> InitVersion[1] value[3] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (R,3) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400013] clientId[3] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600015] clientId[5] ...
Place(5) [Replica(5)] TransId[200013] Applying commit changes:=> InitVersion[1] value[3] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (R,3) ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[400013] ClientPlace [3] isDead[false] ...
Place(1) [Replica(1)] calling abortNoResponse for transactionId[300014] ...
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(4) [Replica(4)] check transaction client  TransId=[400013] ClientPlace [3] isDead[false] ...
Place(4) [Replica(4)] check transaction client  TransId=[100014] ClientPlace [0] isDead[false] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400013] clientId[3] ...
Place(5) [MapRequest] TransId[600015] From [2] adding response for request === <request TransactionId[600015] ReqId[44] type[Put]  key[P]> ..... output[3] exception[null] 
Place(5) [MapRequest] TransId[600015] From [3] adding response for request === <request TransactionId[600015] ReqId[44] type[Put]  key[P]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400013] From [4] adding response for request === <request TransactionId[400013] ReqId[38] type[Put]  key[F]> ..... output[4] exception[null] 
Place(3) [MapRequest] TransId[400013] From [5] adding response for request === <request TransactionId[400013] ReqId[38] type[Put]  key[F]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100014] From [3] adding response for request === <request TransactionId[100014] ReqId[44] type[Put]  key[K]> ..... output[1] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300014] ...
Place(0) [MapRequest] TransId[100014] From [4] adding response for request === <request TransactionId[100014] ReqId[44] type[Put]  key[K]> ..... output[1] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[500013] ClientPlace [4] isDead[false] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500013]          ... released }    Success=true
Place(4) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500013] ReqId[38] type[Put]  key[N]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500013] ReqId[38] type[Put]  key[N]>
Place(4) [ResilientMapImpl] put[500013]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500013] clientId[4] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500013] clientId[4] ...
Place(4) [MapRequest] TransId[500013] From [1] adding response for request === <request TransactionId[500013] ReqId[38] type[Put]  key[N]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500013] From [0] adding response for request === <request TransactionId[500013] ReqId[38] type[Put]  key[N]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300014]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 17ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600015]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600015] ReqId[45] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600015] ReqId[45] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600015]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400013]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400013] ReqId[39] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400013] ReqId[39] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400013]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200013]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200014]  { await ... 
Place(1) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <rePlace(0) [ReplicaClient] Check pending transactions new iteration ...
quest TransactionId[200014] ReqId[40] type[Get]  key[W]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200014] ReqId[40] type[Get]  key[W]>
Place(0) [ResilientMapImpl] put[100014]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100014] ReqId[45] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100014] ReqId[45] type[PrepareCommit]  key[null]>
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(2) [Replica(2)] ConflictReport for transaction[600015] is null
Place(0) [ResilientMapImpl] commitTransaction[100014]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200014] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Transaction] Tx(600015) and Tx(100014) no overlap
Place(3) [Transaction] Tx(600015) and Tx(100014) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[600015] is null
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Replica(5)] ConflictReport for transaction[400013] is null
Place(3) [Transaction] Tx(100014) and Tx(600015) no overlap
Place(3) [Transaction] Tx(100014) and Tx(600015) conflicting=[false] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(3) [Transaction] Tx(100014) and Tx(200014) no overlap
Place(3) [Transaction] Tx(100014) and Tx(200014) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[100014] is null
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200014] clientId[1] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Transaction] Tx(400013) and Tx(100014) no overlap
Place(4) [Transaction] Tx(400013) and Tx(100014) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[400013] is null
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Transaction] Tx(100014) and Tx(400013) no overlap
Place(4) [Transaction] Tx(100014) and Tx(400013) conflicting=[false] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Transaction] Tx(100014) and Tx(200014) no overlap
Place(4) [Transaction] Tx(100014) and Tx(200014) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[100014] is null
Place(3) [MapRequest] TransId[400013] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400013] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(5) [MapRequest] TransId[600015] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600015] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(5) [MapRequest] TransId[600015] From [3] adding vote response [1] ...
Place(5) [MapRequest] TransId[600015] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [3] adding vote response completed ...
Place(3) [MapRequest] TransId[400013] From [4] adding vote response [1] ...
Place(3) [MapRequest] TransId[400013] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [4] adding vote response completed ...
Place(1) [MapRequest] TransId[200014] From [3] adding response for request === <request TransactionId[200014] ReqId[40] type[Get]  key[W]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200014] From [4] adding response for request === <request TransactionId[200014] ReqId[40] type[Get]  key[W]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100014] From [4] adding vote response [1] ...
Place(0) [MapRequest] TransId[100014] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [4] adding vote response completed ...
Place(0) [MapRequest] TransId[100014] From [3] adding vote response [1] ...
Place(0) [MapRequest] TransId[100014] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [3] adding vote response completed ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[600015] ClientPlace [5] isDead[false] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500013]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500013] ReqId[39] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500013] ReqId[39] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500013]  { await ... 
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] ConflictReport for transaction[500013] is null
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Replica(1)] ConflictReport for transaction[500013] is null
Place(4) [MapRequest] TransId[500013] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500013] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500013] From [1] adding vote response [1] ...
Place(4) [MapRequest] TransId[500013] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(2) [ResilientMapImpl] get[300015]  { await ... 
Place(2) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300015] ReqId[45] type[Get]  key[N]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300015] ReqId[45] type[Get]  key[N]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400013] ReqId[39] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400013] ReqId[39] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400013] ReqId[39] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[100014] ClientPlace [0] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[200014] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[600015] ClientPlace [5] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200014]          ... released }    Success=true
PlacPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600015] ReqId[45] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600015] ReqId[45] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600015] ReqId[45] type[Commit]  key[null]>  Exception: null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
e(1) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200014] ReqId[41] type[Put]  key[W]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200014] ReqId[41] type[Put]  key[W]>
Place(1) [ResilientMapImpl] put[200014]  { await ... 
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100014] ReqId[45] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100014] ReqId[45] type[Commit]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100014] ReqId[45] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[100014] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (K,2) ...
Place(4) [Replica(4)] TransId[100014] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (K,2) ...
Place(4) [Replica(4)] TransId[400013] Applying commit changes:=> InitVersion[3] value[5] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (F,5) ...
Place(2) [Replica(2)] TransId[600015] Applying commit changes:=> InitVersion[2] value[4] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (P,4) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200014] clientId[1] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300015] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(5) [Replica(5)] TransId[400013] Applying commit changes:=> InitVersion[3] value[5] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (F,5) ...
Place(3) [Replica(3)] TransId[600015] Applying commit changes:=> InitVersion[2] value[4] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (P,4) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200014] clientId[1] ...
Place(1) [MapRequest] TransId[200014] From [4] adding response for request === <request TransactionId[200014] ReqId[41] type[Put]  key[W]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300015] From [1] adding response for request === <request TransactionId[300015] ReqId[45] type[Get]  key[N]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300015] clientId[2] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(1) [MapRequest] TransId[200014] From [3] adding response for request === <request TransactionId[200014] ReqId[41] type[Put]  key[W]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300015] From [0] adding response for request === <request TransactionId[300015] ReqId[45] type[Get]  key[N]> ..... output[2] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500013] ReqId[39] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500013] ReqId[39] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500013] ReqId[39] type[Commit]  key[null]>  Exception: null
Place(0) [Replica(0)] TransId[500013] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (N,3) ...
Place(1) [Replica(1)] TransId[500013] Applying commit changes:=> InitVersion[1] value[3] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (N,3) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300015]          ... released }    Success=true
Place(2) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300015] ReqId[46] type[Put]  key[N]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300015] ReqId[46] type[Put]  key[N]>
Place(2) [ResilientMapImpl] put[300015]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600015]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600016]  { await ... 
Place(5) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600016] ReqId[46] type[Get]  key[K]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600016] ReqId[46] type[Get]  key[K]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300015] clientId[2] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400013]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400014]  { await ... 
Place(3) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400014] ReqId[40] type[Get]  key[W]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400014] ReqId[40] type[Get]  key[W]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400014] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300015] clientId[2] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200014]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200014] ReqId[42] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200014] ReqId[42] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200014]  { await ... 
Place(3) [MapRequest] TransId[400014] From [3] adding response for request === <request TransactionId[400014] ReqId[40] type[Get]  key[W]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300015] From [0] adding response for request === <request TransactionId[300015] ReqId[46] type[Put]  key[N]> ..... output[2] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400014] clientId[3] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600016] clientId[5] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100014]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100015]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(2) [MapRequest] TransId[300015] From [1] adding response for request === <request TransactionId[300015] ReqId[46] type[Put]  key[N]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100015] ReqId[46] type[Get]  key[N]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100015] ReqId[46] type[Get]  key[N]>
Place(3) [MapRequest] TransId[400014] From [4] adding response for request === <request TransactionId[400014] ReqId[40] type[Get]  key[W]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600016] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Transaction] Tx(200014) and Tx(400014) overlapped keys = W,
Place(4) [Transaction] Tx(200014) and Tx(400014) conflict in key [W]
Place(4) [Transaction] Tx(200014) and Tx(400014) conflicting=[true] ...
Place(4) [Transaction] Tx(200014) and Tx(600016) no overlap
Place(4) [Transaction] Tx(200014) and Tx(600016) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[200014] is::: ConflictReport with active transactions: 400014,   and maxTransId is: 400014
Place(4) [Replica(4)] TransId[200014] Abort my self, NOT ready to commit ...
Place(5) [MapRequest] TransId[600016] From [4] adding response for request === <request TransactionId[600016] ReqId[46] type[Get]  key[K]> ..... output[2] exception[null] 
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Transaction] Tx(200014) and Tx(400014) overlapped keys = W,
Place(3) [Transaction] Tx(200014) and Tx(400014) conflict in key [W]
Place(3) [Transaction] Tx(200014) and Tx(400014) conflicting=[true] ...
Place(3) [Transaction] Tx(200014) and Tx(600016) no overlap
Place(3) [Transaction] Tx(200014) and Tx(600016) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[200014] is::: ConflictReport with active transactions: 400014,   and maxTransId is: 400014
Place(3) [Replica(3)] TransId[200014] Abort my self, NOT ready to commit ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100015] clientId[0] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100015] clientId[0] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(5) [MapRequest] TransId[600016] From [3] adding response for request === <request TransactionId[600016] ReqId[46] type[Get]  key[K]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100015] From [0] adding response for request === <request TransactionId[100015] ReqId[46] type[Get]  key[N]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200014] From [3] adding vote response [0] ...
Place(1) [MapRequest] TransId[200014] Waiting for votes from places [4,] commitStatus is[CancelCommit] 
Place(1) [MapRequest] From [3] adding vote response completed ...
Place(1) [MapRequest] TransId[200014] From [4] adding vote response [0] ...
Place(1) [MapRequest] TransId[200014] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(1) [MapRequest] From [4] adding vote response completed ...
Place(0) [MapRequest] TransId[100015] From [1] adding response for request === <request TransactionId[100015] ReqId[46] type[Get]  key[N]> ..... output[3] exception[null] 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[100015] ClientPlace [0] isDead[false] ...
Place(1) [Replica(1)] check transaction client  TransId=[300015] ClientPlace [2] isDead[false] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500013]          ... released }    Success=true
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500014]  { await ... 
Place(4) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500014] ReqId[40] type[Get]  key[I]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500014] ReqId[40] type[Get]  key[I]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300015]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300015] ReqId[47] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300015] ReqId[47] type[PrepareCommit]  key[null]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500014] clientId[4] ...
Place(2) [ResilientMapImpl] commitTransaction[300015]  { await ... 
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200014] ReqId[42] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(1) [ResilientMapImpl] commitTransaction[200014]          ... released }    Success=false
Place(3) [ResilientMapImpl] get[400014]          ... released }    Success=true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600016]          ... released }    Success=true
Place(5) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600016] ReqId[47] type[Put]  key[K]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600016] ReqId[47] type[Put]  key[K]>
Place(3) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400014] ReqId[41] type[Put]  key[W]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400014] ReqId[41] type[Put]  key[W]>
Place(3) [ResilientMapImpl] put[400014]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400014] clientId[3] ...
Place(3) [MapRequest] TransId[400014] From [3] adding response for request === <request TransactionId[400014] ReqId[41] type[Put]  key[W]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200014] ReqId[43] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200014] ReqId[43] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200014] ReqId[43] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200014]  { await ... 
Place(5) [ResilientMapImpl] put[600016]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500014] clientId[4] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600016] clientId[5] ...
Place(4) [MapRequest] TransId[500014] From [1] adding response for request === <request TransactionId[500014] ReqId[40] type[Get]  key[I]> ..... output[3] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400014] clientId[3] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600016] clientId[5] ...
Place(5) [MapRequest] TransId[600016] From [4] adding response for request === <request TransactionId[600016] ReqId[47] type[Put]  key[K]> ..... output[2] exception[null] 
Place(4) [Replica(4)] calling abortNoResponse for transactionId[200014] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Replica(1)] Version conflict transaction[300015] key[N] oldVersion[1] newVersion[2] ...
Place(5) [MapRequest] TransId[600016] From [3] adding response for request === <request TransactionId[600016] ReqId[47] type[Put]  key[K]> ..... output[2] exception[null] 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200014] ...
Place(4) [MapRequest] TransId[500014] From [2] adding response for request === <request TransactionId[500014] ReqId[40] type[Get]  key[I]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400014] From [4] adding response for request === <request TransactionId[400014] ReqId[41] type[Put]  key[W]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300015] From [1] adding vote response [0] ...
Place(2) [MapRequest] TransId[300015] Waiting for votes from places [0,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] Version conflict transaction[300015] key[N] oldVersion[1] newVersion[2] ...
Place(2) [MapRequest] TransId[300015] From [0] adding vote response [0] ...
Place(2) [MapRequest] TransId[300015] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100015]          ... released }    Success=true
Place(0) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100015] ReqId[47] type[Put]  key[N]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100015] ReqId[47] type[Put]  key[N]>
Place(0) [ResilientMapImpl] put[100015]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100015] clientId[0] ...
Place(0) [MapRequest] TransId[100015] From [0] adding response for request === <request TransactionId[100015] ReqId[47] type[Put]  key[N]> ..... output[3] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100015] clientId[0] ...
Place(0) [MapRequest] TransId[100015] From [1] adding response for request === <request TransactionId[100015] ReqId[47] type[Put]  key[N]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300015] ReqId[47] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ResilientMapImpl] commitTransaction[300015]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300015] ReqId[48] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300015] ReqId[48] type[Abort]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500014]          ... released }    Success=true
Place(4) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500014] ReqId[41] type[Put]  key[I]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500014] ReqId[41] type[Put]  key[I]>
Place(4) [ResilientMapImpl] put[500014]  { await ... 
Place(2) [MapRequest] Completing request: <request TransactionId[300015] ReqId[48] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300015]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[500014] clientId[4] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600016]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600016] ReqId[48] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600016] ReqId[48] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600016]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400014]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400014] ReqId[42] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400014] ReqId[42] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400014]  { await ... 
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Transaction] Tx(400014) and Tx(600016) no overlap
Place(3) [Transaction] Tx(400014) and Tx(600016) conflicting=[false] ...
Place(1) [Replica(1)] calling abortNoResponse for transactionId[300015] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200014]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 17ms
Place(3) [Replica(3)] ConflictReport for transaction[400014] is null
Place(3) [MapRequest] TransId[400014] From [3] adding vote response [1] ...
Place(3) [MapRequest] TransId[400014] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [3] adding vote response completed ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500014] clientId[4] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Transaction] Tx(600016) and Tx(400014) no overlap
Place(4) [Transaction] Tx(600016) and Tx(400014) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[600016] is null
Place(4) [MapRequest] TransId[500014] From [1] adding response for request === <request TransactionId[500014] ReqId[41] type[Put]  key[I]> ..... output[3] exception[null] 
Place(4) [MapRequest] TransId[500014] From [2] adding response for request === <request TransactionId[500014] ReqId[41] type[Put]  key[I]> ..... output[3] exception[null] 
Place(4) [Transaction] Tx(400014) and Tx(600016) no overlap
Place(4) [Transaction] Tx(400014) and Tx(600016) conflicting=[false] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Replica(4)] ConflictReport for transaction[400014] is null
Place(5) [MapRequest] TransId[600016] From [4] adding vote response [1] ...
Place(5) [MapRequest] TransId[600016] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [4] adding vote response completed ...
Place(3) [Transaction] Tx(600016) and Tx(400014) no overlap
Place(3) [Transaction] Tx(600016) and Tx(400014) conflicting=[false] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(3) [Replica(3)] ConflictReport for transaction[600016] is null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100015]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100015] ReqId[48] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100015] ReqId[48] type[PrepareCommit]  key[null]>
Place(5) [MapRequest] TransId[600016] From [3] adding vote response [1] ...
Place(5) [MapRequest] TransId[600016] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [3] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100015]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300015] ...
Place(3) [MapRequest] TransId[400014] From [4] adding vote response [1] ...
Place(3) [MapRequest] TransId[400014] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [4] adding vote response completed ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] ConflictReport for transaction[100015] is null
Place(1) [Transaction] Tx(100015) and Tx(500014) no overlap
Place(1) [Transaction] Tx(100015) and Tx(500014) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[100015] is null
Place(0) [MapRequest] TransId[100015] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100015] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [MapRequest] TransId[100015] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100015] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300015]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 9ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600016] ReqId[48] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600016] ReqId[48] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600016] ReqId[48] type[Commit]  key[null]>  Exception: null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400014] ReqId[42] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400014] ReqId[42] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400014] ReqId[42] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[400014] Applying commit changes:=> InitVersion[2] value[4] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (W,4) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500014]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500014] ReqId[42] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500014] ReqId[42] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500014]  { await ... 
Place(1) [ResilientMapImpl] get[200015]  { await ... 
Place(1) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200015] ReqId[44] type[Get]  key[W]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200015] ReqId[44] type[Get]  key[W]>
Place(1) [Transaction] Tx(500014) and Tx(100015) no overlap
Place(1) [Transaction] Tx(500014) and Tx(100015) conflicting=[false] ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(1) [Replica(1)] ConflictReport for transaction[500014] is null
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] ConflictReport for transaction[500014] is null
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200015] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Replica(3)] TransId[600016] Applying commit changes:=> InitVersion[1] value[3] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (K,3) ...
Place(4) [MapRequest] TransId[500014] From [1] adding vote response [1] ...
Place(4) [MapRequest] TransId[500014] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [1] adding vote response completed ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200015] clientId[1] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Replica(4)] TransId[400014] Applying commit changes:=> InitVersion[2] value[4] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (W,4) ...
Place(4) [Replica(4)] TransId[600016] Applying commit changes:=> InitVersion[1] value[3] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (K,3) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [MapRequest] TransId[500014] From [2] adding vote response [1] ...
Place(4) [MapRequest] TransId[500014] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [2] adding vote response completed ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100015] ReqId[48] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100015] ReqId[48] type[Commit]  key[null]>
Place(0) [Replica(0)] TransId[100015] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (N,4) ...
Place(1) [MapRequest] TransId[200015] From [3] adding response for request === <request TransactionId[200015] ReqId[44] type[Get]  key[W]> ..... output[4] exception[null] 
Place(0) [MapRequest] Completing request: <request TransactionId[100015] ReqId[48] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[100015] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (N,4) ...
Place(1) [MapRequest] TransId[200015] From [4] adding response for request === <request TransactionId[200015] ReqId[44] type[Get]  key[W]> ..... output[3] exception[null] 
Place(2) [ResilientMapImpl] get[300016]  { await ... 
Place(2) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300016] ReqId[49] type[Get]  key[N]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300016] ReqId[49] type[Get]  key[N]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600016]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600017]  { await ... 
Place(5) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600017] ReqId[49] type[Get]  key[L]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600017] ReqId[49] type[Get]  key[L]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400014]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400015]  { await ... 
Place(3) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400015] ReqId[43] type[Get]  key[O]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400015] ReqId[43] type[Get]  key[O]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500014] ReqId[42] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500014] ReqId[42] type[Commit]  key[null]>
PlPlace(5) [Replica(5)] getOrAddActiveTransaction transId[600017] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
ace(4) [MapRequest] Completing request: <request TransactionId[500014] ReqId[42] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200015]          ... released }    Success=true
Place(1) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200015] ReqId[45] type[Put]  key[W]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200015] ReqId[45] type[Put]  key[W]>
Place(1) [ResilientMapImpl] put[200015]  { await ... 
Place(5) [MapRequest] TransId[600017] From [5] adding response for request === <request TransactionId[600017] ReqId[49] type[Get]  key[L]> ..... output[3] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400015] clientId[3] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(1) [Replica(1)] TransId[500014] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (I,4) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600017] clientId[5] ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200015] clientId[1] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300016] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400015] clientId[3] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(2) [Replica(2)] TransId[500014] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (I,4) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100015]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100016]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200015] clientId[1] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300016] clientId[2] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] TransId[600017] From [4] adding response for request === <request TransactionId[600017] ReqId[49] type[Get]  key[L]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400015] From [2] adding response for request === <request TransactionId[400015] ReqId[43] type[Get]  key[O]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400015] From [1] adding response for request === <request TransactionId[400015] ReqId[43] type[Get]  key[O]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300016] From [0] adding response for request === <request TransactionId[300016] ReqId[49] type[Get]  key[N]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200015] From [3] adding response for request === <request TransactionId[200015] ReqId[45] type[Put]  key[W]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200015] From [4] adding response for request === <request TransactionId[200015] ReqId[45] type[Put]  key[W]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100016] ReqId[49] type[Get]  key[V]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100016] ReqId[49] type[Get]  key[V]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100016] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [MapRequest] TransId[300016] From [1] adding response for request === <request TransactionId[300016] ReqId[49] type[Get]  key[N]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100016] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(0) [MapRequest] TransId[100016] From [3] adding response for request === <request TransactionId[100016] ReqId[49] type[Get]  key[V]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100016] From [2] adding response for request === <request TransactionId[100016] ReqId[49] type[Get]  key[V]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400015]          ... released }    Success=true
Place(3) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400015] ReqId[44] type[Put]  key[O]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400015] ReqId[44] type[Put]  key[O]>
Place(3) [ResilientMapImpl] put[400015]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500014]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500015]  { await ... 
Place(4) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending RequestPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300016]          ... released }    Success=true
Place(2) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300016] ReqId[50] type[Put]  key[N]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300016] ReqId[50] type[Put]  key[N]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600017]          ... released }    Success=true
Place(5) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600017] ReqId[50] type[Put]  key[L]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600017] ReqId[50] type[Put]  key[L]>
Place(2) [ResilientMapImpl <request TransactionId[500015] ReqId[43] type[Get]  key[J]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500015] ReqId[43] type[Get]  key[J]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200015]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200015] ReqId[46] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200015] ReqId[46] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200015]  { await ... 
] put[300016]  { await ... 
Place(5) [ResilientMapImpl] put[600017]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600017] clientId[5] ...
Place(5) [MapRequest] TransId[600017] From [5] adding response for request === <request TransactionId[600017] ReqId[50] type[Put]  key[L]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100016]          ... released }    Success=true
Place(0) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100016] ReqId[50] type[Put]  key[V]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100016] ReqId[50] type[Put]  key[V]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100016] clientId[0] ...
Place(0) [ResilientMapImpl] put[100016]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100016] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500015] clientId[4] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400015] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Transaction] Tx(200015) and Tx(500015) no overlap
Place(3) [Transaction] Tx(200015) and Tx(500015) conflicting=[false] ...
Place(3) [Transaction] Tx(200015) and Tx(100016) no overlap
Place(3) [Transaction] Tx(200015) and Tx(100016) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[200015] is null
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600017] clientId[5] ...
Place(4) [Replica(4)] Version conflict transaction[200015] key[W] oldVersion[2] newVersion[3] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500015] clientId[4] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300016] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300016] clientId[2] ...
Place(1) [MapRequest] TransId[200015] From [4] adding vote response [0] ...
Place(1) [MapRequest] TransId[200015] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(1) [MapRequest] From [4] adding vote response completed ...
Place(3) [MapRequest] TransId[400015] From [1] adding response for request === <request TransactionId[400015] ReqId[44] type[Put]  key[O]> ..... output[2] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400015] clientId[3] ...
Place(2) [MapRequest] TransId[300016] From [0] adding response for request === <request TransactionId[300016] ReqId[50] type[Put]  key[N]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600017] From [4] adding response for request === <request TransactionId[600017] ReqId[50] type[Put]  key[L]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300016] From [1] adding response for request === <request TransactionId[300016] ReqId[50] type[Put]  key[N]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100016] From [2] adding response for request === <request TransactionId[100016] ReqId[50] type[Put]  key[V]> ..... output[3] exception[null] 
Place(4) [MapRequest] TransId[500015] From [3] adding response for request === <request TransactionId[500015] ReqId[43] type[Get]  key[J]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500015] From [2] adding response for request === <request TransactionId[500015] ReqId[43] type[Get]  key[J]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300016]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300016] ReqId[51] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300016] ReqId[51] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300016]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600017]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600017] ReqId[51] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600017] ReqId[51] type[PrepareCommit]  key[nPlace(3) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500015]          ... released }    Success=true
Place(4) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500015] ReqId[44] type[Put]  key[J]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500015] ReqId[44] type[Put]  key[J]>
Place(4) [ResilientMapImpl] put[500015]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200015] ReqId[46] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(1) [ResilientMapImpl] commitTransaction[200015]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadRull]>
Place(5) [ResilientMapImpl] commitTransaction[600017]  { await ... 
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(5) [Replica(5)] ConflictReport for transaction[600017] is null
Place(5) [MapRequest] TransId[600017] From [5] adding vote response [1] ...
Place(5) [MapRequest] TransId[600017] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [5] adding vote response completed ...
eplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200015] ReqId[47] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200015] ReqId[47] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200015] ReqId[47] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200015]  { await ... 
Place(1) [MapRequest] TransId[200015] From [3] adding vote response [1] ...
Place(1) [MapRequest] TransId[200015] From [3] VOTE IGNORED ...
Place(3) [MapRequest] TransId[400015] From [2] adding response for request === <request TransactionId[400015] ReqId[44] type[Put]  key[O]> ..... output[2] exception[null] 
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(4) [Transaction] Tx(600017) and Tx(200015) no overlap
Place(4) [Transaction] Tx(600017) and Tx(200015) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[600017] is null
Place(4) [Replica(4)] calling abortNoResponse for transactionId[200015] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500015] clientId[4] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200015] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500015] clientId[4] ...
Place(5) [MapRequest] TransId[600017] From [4] adding vote response [1] ...
Place(5) [MapRequest] TransId[600017] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [4] adding vote response completed ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Transaction] Tx(300016) and Tx(400015) no overlap
Place(1) [Transaction] Tx(300016) and Tx(400015) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[300016] is null
Place(4) [MapRequest] TransId[500015] From [3] adding response for request === <request TransactionId[500015] ReqId[44] type[Put]  key[J]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500015] From [2] adding response for request === <request TransactionId[500015] ReqId[44] type[Put]  key[J]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300016] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300016] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] ConflictReport for transaction[300016] is null
Place(0) [MapRequest] TransId[100016] From [3] adding response for request === <request TransactionId[100016] ReqId[50] type[Put]  key[V]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300016] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300016] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[600017] ClientPlace [5] isDead[false] ...
Place(0) [ResilientMapImpl] put[100016]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(4) [Replica(4)] check transaction client  TransId=[600017] ClientPlace [5] isDead[false] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100016] ReqId[51] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100016] ReqId[51] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100016]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Transaction] Tx(100016) and Tx(400015) no overlap
Place(2) [Transaction] Tx(100016) and Tx(400015) conflicting=[false] ...
Place(2) [Transaction] Tx(100016) and Tx(500015) no overlap
Place(2) [Transaction] Tx(100016) and Tx(500015) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[100016] is null
Place(3) [Transaction] Tx(100016) and Tx(500015) no overlap
Place(3) [Transaction] Tx(100016) and Tx(500015) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[100016] is null
Place(0) [MapRequest] TransId[100016] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100016] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100016] From [3] adding vote response [1] ...
Place(0) [MapRequest] TransId[100016] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [3] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300016] ReqId[51] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300016] ReqId[51] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300016] ReqId[51] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500015]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500015] ReqId[45] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500015] ReqId[45] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500015]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200015]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 9ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400015]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400015] ReqId[45] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400015] ReqId[45] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600017] ReqId[51] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600017] ReqId[51] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600017] ReqId[51] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] TransId[600017] Applying commit changes:=> InitVersion[2] value[4] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (L,4) ...
Place(3) [ResilientMapImpl] commitTransaction[400015]  { await ... 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300016] ClientPlace [2] isDead[false] ...
Place(2) [Transaction] Tx(500015) and Tx(100016) no overlap
Place(2) [Transaction] Tx(500015) and Tx(100016) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Transaction] Tx(500015) and Tx(400015) no overlap
Place(2) [Transaction] Tx(500015) and Tx(400015) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[500015] is null
Place(4) [Replica(4)] TransId[600017] Applying commit changes:=> InitVersion[2] value[4] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (L,4) ...
Place(1) [Transaction] Tx(400015) and Tx(300016) no overlap
Place(1) [Transaction] Tx(400015) and Tx(300016) conflicting=[false] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(1) [Replica(1)] ConflictReport for transaction[400015] is null
Place(3) [Transaction] Tx(500015) and Tx(100016) no overlap
Place(3) [Transaction] Tx(500015) and Tx(100016) conflicting=[false] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Replica(3)] ConflictReport for transaction[500015] is null
Place(3) [MapRequest] TransId[400015] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400015] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(1) [Replica(1)] TransId[300016] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (N,5) ...
Place(2) [Transaction] Tx(400015) and Tx(500015) no overlap
Place(2) [Transaction] Tx(400015) and Tx(500015) conflicting=[false] ...
Place(2) [Transaction] Tx(400015) and Tx(100016) no overlap
Place(2) [Transaction] Tx(400015) and Tx(100016) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(2) [Replica(2)] ConflictReport for transaction[400015] is null
Place(4) [MapRequest] TransId[500015] From [2] adding vote response [1] ...
Place(4) [MapRequest] TransId[500015] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [2] adding vote response completed ...
Place(4) [MapRequest] TransId[500015] From [3] adding vote response [1] ...
Place(4) [MapRequest] TransId[500015] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [3] adding vote response completed ...
Place(3) [MapRequest] TransId[400015] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400015] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(0) [Replica(0)] TransId[300016] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (N,5) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100016] ReqId[51] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100016] ReqId[51] type[Commit]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100016] ReqId[51] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] TransId[100016] Applying commit changes:=> InitVersion[2] value[4] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (V,4) ...
Place(3) [Replica(3)] TransId[100016] Applying commit changes:=> InitVersion[2] value[4] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (V,4) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600017]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600018]  { await ... 
Place(5) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600018] ReqId[52] type[Get]  key[M]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600018] ReqId[52] type[Get]  key[M]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600018] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(5) [MapRequest] TransId[600018] From [5] adding response for request === <request TransactionId[600018] ReqId[52] type[Get]  key[M]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [RepliPlace(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400015] ReqId[45] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400015] ReqId[45] type[Commit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500015] ReqId[45] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500015] ReqId[45] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500015] ReqId[45] type[Commit]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] get[200016]  { await ... 
Place(1) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(1) [RcaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300016]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300017]  { await ... 
Place(2) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300017] ReqId[52] type[Get]  key[A]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300017] ReqId[52] type[Get]  key[A]>
eplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200016] ReqId[48] type[Get]  key[W]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200016] ReqId[48] type[Get]  key[W]>
Place(3) [MapRequest] Completing request: <request TransactionId[400015] ReqId[45] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] TransId[500015] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (J,3) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200016] clientId[1] ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(1) [Replica(1)] TransId[400015] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (O,3) ...
Place(3) [Replica(3)] TransId[500015] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (J,3) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200016] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300017] clientId[2] ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(2) [Replica(2)] check transaction client  TransId=[400015] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] TransId[400015] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (O,3) ...
Place(1) [MapRequest] TransId[200016] From [4] adding response for request === <request TransactionId[200016] ReqId[48] type[Get]  key[W]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300017] From [5] adding response for request === <request TransactionId[300017] ReqId[52] type[Get]  key[A]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300017] clientId[2] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(1) [MapRequest] TransId[200016] From [3] adding response for request === <request TransactionId[200016] ReqId[48] type[Get]  key[W]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300017] From [0] adding response for request === <request TransactionId[300017] ReqId[52] type[Get]  key[A]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600018] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(5) [MapRequest] TransId[600018] From [0] adding response for request === <request TransactionId[600018] ReqId[52] type[Get]  key[M]> ..... output[3] exception[null] 
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[200016] ClientPlace [1] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100016]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100017]  { await ... 
Place(0) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100017] ReqId[52] type[Get]  key[T]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100017] ReqId[52] type[Get]  key[T]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100017] clientId[0] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [MapRequest] TransId[100017] From [0] adding response for request === <request TransactionId[100017] ReqId[52] type[Get]  key[T]> ..... output[3] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100017] clientId[0] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(0) [MapRequest] TransId[100017] From [1] adding response for request === <request TransactionId[100017] ReqId[52] type[Get]  key[T]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400015]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400016]  { await ... 
Place(3) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400016] ReqId[46] type[Get]  key[S]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400016] ReqId[46] type[Get]  key[S]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500015]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500016]  { await ... 
Place(4) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600018]          ... released }    Success=true
Place(5) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600018] ReqId[53] type[Put]  key[M]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600018] ReqId[53] type[Put]  key[M]>
Place(5) [ResilientMapImpl] put[600018]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600018] clientId[5] ...
Place(5) [MapRequest] TransId[600018] From [5] adding response for request === <request TransactionId[600018] ReqId[53] type[Put]  key[M]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300017]          ... released }    Success=true
Place(2) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Places: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500016] ReqId[46] type[Get]  key[G]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500016] ReqId[46] type[Get]  key[G]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200016]          ... released }    Success=true
Place(1) [ReplicaClient] Key[W] ParitionId: 3 Replicas[4  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200016] ReqId[49] type[Put]  key[W]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200016] ReqId[49] type[Put]  key[W]>
Place(1) [ResilientMapImpl] put[200016]  { await ... 
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300017] ReqId[53] type[Put]  key[A]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300017] ReqId[53] type[Put]  key[A]>
Place(2) [ResilientMapImpl] put[300017]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200016] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400016] clientId[3] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500016] clientId[4] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200016] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300017] clientId[2] ...
Place(1) [MapRequest] TransId[200016] From [3] adding response for request === <request TransactionId[200016] ReqId[49] type[Put]  key[W]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200016] From [4] adding response for request === <request TransactionId[200016] ReqId[49] type[Put]  key[W]> ..... output[4] exception[null] 
Place(3) [MapRequest] TransId[400016] From [5] adding response for request === <request TransactionId[400016] ReqId[46] type[Get]  key[S]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500016] From [5] adding response for request === <request TransactionId[500016] ReqId[46] type[Get]  key[G]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300017] From [5] adding response for request === <request TransactionId[300017] ReqId[53] type[Put]  key[A]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300017] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600018] clientId[5] ...
Place(2) [MapRequest] TransId[300017] From [0] adding response for request === <request TransactionId[300017] ReqId[53] type[Put]  key[A]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500016] clientId[4] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600018] From [0] adding response for request === <request TransactionId[600018] ReqId[53] type[Put]  key[M]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400016] clientId[3] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(4) [MapRequest] TransId[500016] From [0] adding response for request === <request TransactionId[500016] ReqId[46] type[Get]  key[G]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400016] From [0] adding response for request === <request TransactionId[400016] ReqId[46] type[Get]  key[S]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100017]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100017] ReqId[53] type[Put]  key[T]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100017] ReqId[53] type[Put]  key[T]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100017] clientId[0] ...
Place(0) [MapRequest] TransId[100017] From [0] adding response for request === <request TransactionId[100017] ReqId[53] type[Put]  key[T]> ..... output[3] exception[null] 
Place(0) [ResilientMapImpl] put[100017]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100017] clientId[0] ...
Place(0) [MapRequest] TransId[100017] From [1] adding response for request === <request TransactionId[100017] ReqId[53] type[Put]  key[T]> ..... output[3] exception[null] 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[100017] ClientPlace [0] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400016]          ... released }    Success=true
Place(3) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400016] ReqId[47] type[Put]  key[S]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400016] ReqId[47] type[Put]  key[S]>
Place(3) [ResilientMapImpl] put[400016]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500016]          ... released }    Success=true
Place(4) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500016] ReqId[47] type[Put]  key[G]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500016] RPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600018]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600018] ReqId[54] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600018] ReqId[54] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300017]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300017] ReqId[54] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300017] ReqId[54] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300017]  { awaiteqId[47] type[Put]  key[G]>
Place(4) [ResilientMapImpl] put[500016]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200016]          ... released }    Success=true
 ... 
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200016] ReqId[50] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200016] ReqId[50] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600018]  { await ... 
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(1) [ResilientMapImpl] commitTransaction[200016]  { await ... 
Place(5) [Transaction] Tx(600018) and Tx(300017) no overlap
Place(5) [Transaction] Tx(600018) and Tx(300017) conflicting=[false] ...
Place(5) [Transaction] Tx(600018) and Tx(400016) no overlap
Place(5) [Transaction] Tx(600018) and Tx(400016) conflicting=[false] ...
Place(5) [Transaction] Tx(600018) and Tx(500016) no overlap
Place(5) [Transaction] Tx(600018) and Tx(500016) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[600018] is null
Place(5) [MapRequest] TransId[600018] From [5] adding vote response [1] ...
Place(5) [MapRequest] TransId[600018] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [5] adding vote response completed ...
Place(4) [Partition] Partition [3]  GET_V (W) ...
Place(4) [Replica(4)] ConflictReport for transaction[200016] is null
Place(5) [Transaction] Tx(300017) and Tx(600018) no overlap
Place(5) [Transaction] Tx(300017) and Tx(600018) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Transaction] Tx(300017) and Tx(400016) no overlap
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400016] clientId[3] ...
Place(5) [Transaction] Tx(300017) and Tx(400016) conflicting=[false] ...
Place(5) [Transaction] Tx(300017) and Tx(500016) no overlap
Place(5) [Transaction] Tx(300017) and Tx(500016) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[300017] is null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500016] clientId[4] ...
Place(2) [MapRequest] TransId[300017] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300017] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Replica(3)] ConflictReport for transaction[200016] is null
Place(1) [MapRequest] TransId[200016] From [4] adding vote response [1] ...
Place(1) [MapRequest] TransId[200016] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [4] adding vote response completed ...
Place(3) [MapRequest] TransId[400016] From [5] adding response for request === <request TransactionId[400016] ReqId[47] type[Put]  key[S]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200016] From [3] adding vote response [1] ...
Place(1) [MapRequest] TransId[200016] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [3] adding vote response completed ...
Place(4) [MapRequest] TransId[500016] From [5] adding response for request === <request TransactionId[500016] ReqId[47] type[Put]  key[G]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500016] clientId[4] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Transaction] Tx(600018) and Tx(300017) no overlap
Place(0) [Transaction] Tx(600018) and Tx(300017) conflicting=[false] ...
Place(0) [Transaction] Tx(600018) and Tx(100017) no overlap
Place(0) [Transaction] Tx(600018) and Tx(100017) conflicting=[false] ...
Place(0) [Transaction] Tx(600018) and Tx(400016) no overlap
Place(0) [Transaction] Tx(600018) and Tx(400016) conflicting=[false] ...
Place(0) [Transaction] Tx(600018) and Tx(500016) no overlap
Place(0) [Transaction] Tx(600018) and Tx(500016) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[600018] is null
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400016] clientId[3] ...
Place(0) [Transaction] Tx(300017) and Tx(600018) no overlap
Place(0) [Transaction] Tx(300017) and Tx(600018) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(5) [MapRequest] TransId[600018] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600018] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(0) [Transaction] Tx(300017) and Tx(100017) no overlap
Place(0) [Transaction] Tx(300017) and Tx(100017) conflicting=[false] ...
Place(0) [Transaction] Tx(300017) and Tx(400016) no overlap
Place(0) [Transaction] Tx(300017) and Tx(400016) conflicting=[false] ...
Place(0) [Transaction] Tx(300017) and Tx(500016) no overlap
Place(0) [Transaction] Tx(300017) and Tx(500016) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[300017] is null
Place(3) [MapRequest] TransId[400016] From [0] adding response for request === <request TransactionId[400016] ReqId[47] type[Put]  key[S]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500016] From [0] adding response for request === <request TransactionId[500016] ReqId[47] type[Put]  key[G]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300017] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300017] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100017]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100017] ReqId[54] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100017] ReqId[54] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100017) and Tx(300017) no overlap
Place(0) [Transaction] Tx(100017) and Tx(300017) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100017]  { await ... 
Place(0) [Transaction] Tx(100017) and Tx(600018) no overlap
Place(0) [Transaction] Tx(100017) and Tx(600018) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Transaction] Tx(100017) and Tx(400016) no overlap
Place(0) [Transaction] Tx(100017) and Tx(400016) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Transaction] Tx(100017) and Tx(500016) no overlap
Place(0) [Transaction] Tx(100017) and Tx(500016) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100017] is null
Place(1) [Replica(1)] ConflictReport for transaction[100017] is null
Place(0) [MapRequest] TransId[100017] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100017] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [MapRequest] TransId[100017] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100017] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400016]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400016] ReqId[48] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400016] ReqId[48] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500016]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500016] ReqId[48] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500016] ReqId[48] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteratPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300017] ReqId[54] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300017] ReqId[54] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300017] ReqId[54] type[Commit]  key[null]>  Exception: null
ion ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200016] ReqId[50] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200016] ReqId[50] type[Commit]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200016] ReqId[50] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600018] ReqId[54] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600018] ReqId[54] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600018] ReqId[54] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] TransId[600018] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (M,4) ...
Place(3) [ResilientMapImpl] commitTransaction[400016]  { await ... 
Place(4) [ResilientMapImpl] commitTransaction[500016]  { await ... 
Place(4) [Replica(4)] TransId[200016] Applying commit changes:=> InitVersion[3] value[5] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (W,5) ...
Place(5) [Replica(5)] TransId[300017] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (A,3) ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(5) [Transaction] Tx(400016) and Tx(500016) no overlap
Place(5) [Transaction] Tx(400016) and Tx(500016) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[400016] is null
Place(5) [Transaction] Tx(500016) and Tx(400016) no overlap
Place(5) [Transaction] Tx(500016) and Tx(400016) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Replica(5)] ConflictReport for transaction[500016] is null
Place(3) [Replica(3)] TransId[200016] Applying commit changes:=> InitVersion[3] value[5] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (W,5) ...
Place(3) [MapRequest] TransId[400016] From [5] adding vote response [1] ...
Place(3) [MapRequest] TransId[400016] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [5] adding vote response completed ...
Place(4) [MapRequest] TransId[500016] From [5] adding vote response [1] ...
Place(4) [MapRequest] TransId[500016] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [5] adding vote response completed ...
Place(0) [Replica(0)] TransId[600018] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (M,4) ...
Place(0) [Transaction] Tx(500016) and Tx(300017) no overlap
Place(0) [Transaction] Tx(500016) and Tx(300017) conflicting=[false] ...
Place(0) [Transaction] Tx(500016) and Tx(100017) no overlap
Place(0) [Transaction] Tx(500016) and Tx(100017) conflicting=[false] ...
Place(0) [Transaction] Tx(500016) and Tx(600018) no overlap
Place(0) [Transaction] Tx(500016) and Tx(600018) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Transaction] Tx(500016) and Tx(400016) no overlap
Place(0) [Transaction] Tx(500016) and Tx(400016) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[500016] is null
Place(0) [Transaction] Tx(400016) and Tx(300017) no overlap
Place(0) [Transaction] Tx(400016) and Tx(300017) conflicting=[false] ...
Place(0) [Transaction] Tx(400016) and Tx(100017) no overlap
Place(0) [Transaction] Tx(400016) and Tx(100017) conflicting=[false] ...
Place(0) [Transaction] Tx(400016) and Tx(500016) no overlap
Place(0) [Transaction] Tx(400016) and Tx(500016) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[400016] is null
Place(0) [Replica(0)] TransId[300017] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (A,3) ...
Place(3) [MapRequest] TransId[400016] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400016] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500016] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500016] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100017] ReqId[54] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100017] ReqId[54] type[Commit]  key[null]>
Place(0) [Replica(0)] TransId[100017] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (T,4) ...
Place(0) [MapRequest] Completing request: <request TransactionId[100017] ReqId[54] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[100017] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (T,4) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200016]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200017]  { await ... 
Place(1) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200017] ReqId[51] type[Get]  key[Z]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200017] ReqId[51] type[Get]  key[Z]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200017] clientId[1] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400016] ReqId[48] type[Commit]  key[null]>
PPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600018]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600019]  { await ... 
Place(5) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600019] ReqId[55] type[Get]  key[H]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600019] ReqId[55] type[Get]  key[H]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300017]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300018]  { await ... 
Place(2) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadlace(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400016] ReqId[48] type[Commit]  key[null]>
Place(1) [MapRequest] TransId[200017] From [1] adding response for request === <request TransactionId[200017] ReqId[51] type[Get]  key[Z]> ..... output[3] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500016] ReqId[48] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500016] ReqId[48] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500016] ReqId[48] type[Commit]  key[null]>  Exception: null
Places: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300018] ReqId[55] type[Get]  key[Y]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300018] ReqId[55] type[Get]  key[Y]>
Place(3) [MapRequest] Completing request: <request TransactionId[400016] ReqId[48] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300018] clientId[2] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [Replica(5)] TransId[400016] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (S,3) ...
Place(5) [Replica(5)] TransId[500016] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (G,4) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600019] clientId[5] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(2) [MapRequest] TransId[300018] From [5] adding response for request === <request TransactionId[300018] ReqId[55] type[Get]  key[Y]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600019] From [1] adding response for request === <request TransactionId[600019] ReqId[55] type[Get]  key[H]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200017] clientId[1] ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600019] clientId[5] ...
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(1) [MapRequest] TransId[200017] From [0] adding response for request === <request TransactionId[200017] ReqId[51] type[Get]  key[Z]> ..... output[3] exception[null] 
Place(0) [Replica(0)] TransId[500016] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (G,4) ...
Place(5) [MapRequest] TransId[600019] From [0] adding response for request === <request TransactionId[600019] ReqId[55] type[Get]  key[H]> ..... output[4] exception[null] 
Place(0) [Replica(0)] TransId[400016] Applying commit changes:=> InitVersion[1] value[3] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (S,3) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300018] clientId[2] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(2) [MapRequest] TransId[300018] From [0] adding response for request === <request TransactionId[300018] ReqId[55] type[Get]  key[Y]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100017]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100018]  { await ... 
Place(0) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100018] ReqId[55] type[Get]  key[B]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100018] ReqId[55] type[Get]  key[B]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100018] clientId[0] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [MapRequest] TransId[100018] From [0] adding response for request === <request TransactionId[100018] ReqId[55] type[Get]  key[B]> ..... output[3] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100018] clientId[0] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(0) [MapRequest] TransId[100018] From [1] adding response for request === <request TransactionId[100018] ReqId[55] type[Get]  key[B]> ..... output[3] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500016]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200017]          ... released }    Success=true
Place(1) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200017] ReqId[52] type[Put]  key[Z]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200017] ReqId[52] type[Put]  key[Z]>
Place(1) [ResilientMapImpl] put[200017]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200017] clientId[1] ...
Place(1) [MapRequest] TransId[200017] From [1] adding response for request === <request TransactionId[200017] ReqId[52] type[Put]  key[Z]> ..... output[3] exPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300018]          ... released }    Success=true
Place(2) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300018] ReqId[56] type[Put]  key[Y]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300018] ReqId[56] type[Put]  key[Y]>
ception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400016]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500017]  { await ... 
Place(4) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500017] ReqId[49] type[Get]  key[F]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500017] ReqId[49] type[Get]  key[F]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500017] clientId[4] ...
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [MapRequest] TransId[500017] From [4] adding response for request === <request TransactionId[500017] ReqId[49] type[Get]  key[F]> ..... output[5] exception[null] 
Place(5) [ResilientMapImpl] get[600019]          ... released }    Success=true
Place(5) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600019] ReqId[56] type[Put]  key[H]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600019] ReqId[56] type[Put]  key[H]>
Place(5) [ResilientMapImpl] put[600019]  { await ... 
Place(3) [ResilientMapImpl] get[400017]  { await ... 
Place(3) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ResilientMapImpl] put[300018]  { await ... 
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400017] ReqId[49] type[Get]  key[B]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400017] ReqId[49] type[Get]  key[B]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500017] clientId[4] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300018] clientId[2] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400017] clientId[3] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600019] clientId[5] ...
Place(4) [MapRequest] TransId[500017] From [5] adding response for request === <request TransactionId[500017] ReqId[49] type[Get]  key[F]> ..... output[5] exception[null] 
Place(3) [MapRequest] TransId[400017] From [1] adding response for request === <request TransactionId[400017] ReqId[49] type[Get]  key[B]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300018] From [5] adding response for request === <request TransactionId[300018] ReqId[56] type[Put]  key[Y]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600019] From [1] adding response for request === <request TransactionId[600019] ReqId[56] type[Put]  key[H]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200017] clientId[1] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600019] clientId[5] ...
Place(1) [MapRequest] TransId[200017] From [0] adding response for request === <request TransactionId[200017] ReqId[52] type[Put]  key[Z]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400017] clientId[3] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(5) [MapRequest] TransId[600019] From [0] adding response for request === <request TransactionId[600019] ReqId[56] type[Put]  key[H]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300018] clientId[2] ...
Place(2) [MapRequest] TransId[300018] From [0] adding response for request === <request TransactionId[300018] ReqId[56] type[Put]  key[Y]> ..... output[4] exception[null] 
Place(3) [MapRequest] TransId[400017] From [0] adding response for request === <request TransactionId[400017] ReqId[49] type[Get]  key[B]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100018]          ... released }    Success=true
Place(0) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100018] ReqId[56] type[Put]  key[B]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100018] ReqId[56] type[Put]  key[B]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100018] clientId[0] ...
Place(0) [MapRequest] TransId[100018] From [0] adding response for request === <request TransactionId[100018] ReqId[56] type[Put]  key[B]> ..... output[3] exception[null] 
Place(0) [ResilientMapImpl] put[100018]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100018] clientId[0] ...
Place(0) [MapRequest] TransId[100018] From [1] adding response for request === <request TransactionId[100018] ReqId[56] type[Put]  key[B]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200017]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200017] ReqId[53] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200017] ReqId[53] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300018]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300018] ReqId[57] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300018] ReqId[57] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300018]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600019]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600019] ReqId[57] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600019] ReqId[57] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600019]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400017]          ... released }    Success=true
Place(3) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400017] ReqId[50] type[Put]  key[B]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400017] ReqId[50] type[Put]  key[B]>
Place(3) [ResilientMapImpl] put[400017]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500017]          ... released }    Success=true
Place(4) [ReplicaClient] Key[F] ParitionId: 4 Replicas[4  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ResilientMapImpl] commitTransaction[200017]  { await ... 
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500017] ReqId[50] type[Put]  key[F]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500017] ReqId[50] type[Put]  key[F]>
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500017] clientId[4] ...
Place(4) [ResilientMapImpl] put[500017]  { await ... 
Place(1) [Transaction] Tx(200017) and Tx(600019) no overlap
Place(1) [Transaction] Tx(200017) and Tx(600019) conflicting=[false] ...
Place(1) [Transaction] Tx(200017) and Tx(100018) no overlap
Place(1) [Transaction] Tx(200017) and Tx(100018) conflicting=[false] ...
Place(4) [MapRequest] TransId[500017] From [4] adding response for request === <request TransactionId[500017] ReqId[50] type[Put]  key[F]> ..... output[5] exception[null] 
Place(1) [Transaction] Tx(200017) and Tx(400017) no overlap
Place(1) [Transaction] Tx(200017) and Tx(400017) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[200017] is null
Place(1) [MapRequest] TransId[200017] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200017] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500017] clientId[4] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400017] clientId[3] ...
Place(5) [Transaction] Tx(300018) and Tx(500017) no overlap
Place(5) [Transaction] Tx(300018) and Tx(500017) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[300018] is null
Place(1) [Transaction] Tx(600019) and Tx(200017) no overlap
Place(1) [Transaction] Tx(600019) and Tx(200017) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(3) [MapRequest] TransId[400017] From [1] adding response for request === <request TransactionId[400017] ReqId[50] type[Put]  key[B]> ..... output[3] exception[null] 
Place(1) [Transaction] Tx(600019) and Tx(100018) no overlap
Place(1) [Transaction] Tx(600019) and Tx(100018) conflicting=[false] ...
Place(1) [Transaction] Tx(600019) and Tx(400017) no overlap
Place(1) [Transaction] Tx(600019) and Tx(400017) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[600019] is null
Place(4) [MapRequest] TransId[500017] From [5] adding response for request === <request TransactionId[500017] ReqId[50] type[Put]  key[F]> ..... output[5] exception[null] 
Place(2) [MapRequest] TransId[300018] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300018] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(5) [MapRequest] TransId[600019] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600019] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Transaction] Tx(200017) and Tx(600019) no overlap
Place(0) [Transaction] Tx(200017) and Tx(600019) conflicting=[false] ...
Place(0) [Transaction] Tx(200017) and Tx(300018) no overlap
Place(0) [Transaction] Tx(200017) and Tx(300018) conflicting=[false] ...
Place(0) [Transaction] Tx(200017) and Tx(100018) no overlap
Place(0) [Transaction] Tx(200017) and Tx(100018) conflicting=[false] ...
Place(0) [Transaction] Tx(200017) and Tx(400017) no overlap
Place(0) [Transaction] Tx(200017) and Tx(400017) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[200017] is null
Place(0) [Transaction] Tx(600019) and Tx(200017) no overlap
Place(0) [Transaction] Tx(600019) and Tx(200017) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Transaction] Tx(600019) and Tx(300018) no overlap
Place(0) [Transaction] Tx(600019) and Tx(300018) conflicting=[false] ...
Place(0) [ResilientMapImpl] put[100018]          ... released }    Success=true
Place(0) [Transaction] Tx(600019) and Tx(100018) no overlap
Place(0) [Transaction] Tx(600019) and Tx(100018) conflicting=[false] ...
Place(0) [Transaction] Tx(600019) and Tx(400017) no overlap
Place(0) [Transaction] Tx(600019) and Tx(400017) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[600019] is null
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100018] ReqId[57] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100018] ReqId[57] type[PrepareCommit]  key[null]>
Place(1) [MapRequest] TransId[200017] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200017] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400017] clientId[3] ...
Place(0) [ResilientMapImpl] commitTransaction[100018]  { await ... 
Place(0) [Transaction] Tx(300018) and Tx(600019) no overlap
Place(0) [Transaction] Tx(300018) and Tx(600019) conflicting=[false] ...
Place(0) [Transaction] Tx(300018) and Tx(200017) no overlap
Place(1) [Transaction] Tx(100018) and Tx(200017) no overlap
Place(1) [Transaction] Tx(100018) and Tx(200017) conflicting=[false] ...
Place(1) [Transaction] Tx(100018) and Tx(600019) no overlap
Place(1) [Transaction] Tx(100018) and Tx(600019) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [Transaction] Tx(100018) and Tx(400017) overlapped keys = B,
Place(1) [Transaction] Tx(100018) and Tx(400017) conflict in key [B]
Place(1) [Transaction] Tx(100018) and Tx(400017) conflicting=[true] ...
Place(1) [Replica(1)] ConflictReport for transaction[100018] is::: ConflictReport with active transactions: 400017,   and maxTransId is: 400017
Place(1) [Replica(1)] TransId[100018] Abort my self, NOT ready to commit ...
Place(0) [Transaction] Tx(300018) and Tx(200017) conflicting=[false] ...
Place(3) [MapRequest] TransId[400017] From [0] adding response for request === <request TransactionId[400017] ReqId[50] type[Put]  key[B]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Transaction] Tx(300018) and Tx(100018) no overlap
Place(0) [Transaction] Tx(300018) and Tx(100018) conflicting=[false] ...
Place(0) [Transaction] Tx(300018) and Tx(400017) no overlap
Place(0) [Transaction] Tx(300018) and Tx(400017) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[300018] is null
Place(5) [MapRequest] TransId[600019] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600019] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(0) [Transaction] Tx(100018) and Tx(600019) no overlap
Place(0) [Transaction] Tx(100018) and Tx(600019) conflicting=[false] ...
Place(0) [Transaction] Tx(100018) and Tx(300018) no overlap
Place(0) [Transaction] Tx(100018) and Tx(300018) conflicting=[false] ...
Place(0) [Transaction] Tx(100018) and Tx(200017) no overlap
Place(0) [Transaction] Tx(100018) and Tx(200017) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [Transaction] Tx(100018) and Tx(400017) overlapped keys = B,
Place(0) [Transaction] Tx(100018) and Tx(400017) conflict in key [B]
Place(0) [Transaction] Tx(100018) and Tx(400017) conflicting=[true] ...
Place(0) [Replica(0)] ConflictReport for transaction[100018] is::: ConflictReport with active transactions: 400017,   and maxTransId is: 400017
Place(0) [Replica(0)] TransId[100018] Abort my self, NOT ready to commit ...
Place(2) [MapRequest] TransId[300018] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300018] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(0) [MapRequest] TransId[100018] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100018] Waiting for votes from places [1,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [MapRequest] TransId[100018] From [1] adding vote response [0] ...
Place(0) [MapRequest] TransId[100018] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400017]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400017] ReqId[51] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400017] ReqId[51] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400017]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200017] ReqId[53] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200017] ReqId[53] type[Commit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600019] ReqId[57] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600019] ReqId[57] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600019] ReqId[57] type[Commit]  key[null]>  Exception: null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300018] ReqId[57] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300018] ReqId[57] type[Commit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500017]          ... released }    Success=true
Place(1) [MapRequest] Completing request: <request TransactionId[200017] ReqId[53] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500017] ReqId[51] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500017] ReqId[51] type[PrepareCommit]  key[null]>
Place(1) [Replica(1)] TransId[200017] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (Z,4) ...
Place(4) [ResilientMapImpl] commitTransaction[500017]  { await ... 
Place(4) [Partition] Partition [4]  GET_V (F) ...
Place(4) [Replica(4)] ConflictReport for transaction[500017] is null
Place(2) [MapRequest] Completing request: <request TransactionId[300018] ReqId[57] type[Commit]  key[null]>  Exception: null
Place(4) [MapRequest] TransId[500017] From [4] adding vote response [1] ...
Place(4) [MapRequest] TransId[500017] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [4] adding vote response completed ...
Place(5) [Transaction] Tx(500017) and Tx(300018) no overlap
Place(5) [Transaction] Tx(500017) and Tx(300018) conflicting=[false] ...
Place(5) [Partition] Partition [4]  GET_V (F) ...
Place(5) [Replica(5)] ConflictReport for transaction[500017] is null
Place(5) [Replica(5)] TransId[300018] Applying commit changes:=> InitVersion[3] value[5] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (Y,5) ...
Place(1) [Transaction] Tx(400017) and Tx(600019) no overlap
Place(1) [Transaction] Tx(400017) and Tx(600019) conflicting=[false] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [Replica(1)] ConflictReport for transaction[400017] is null
Place(1) [Replica(1)] TransId[600019] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (H,5) ...
Place(3) [MapRequest] TransId[400017] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400017] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(4) [MapRequest] TransId[500017] From [5] adding vote response [1] ...
Place(4) [MapRequest] TransId[500017] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [5] adding vote response completed ...
Place(0) [Replica(0)] TransId[200017] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (Z,4) ...
Place(0) [Replica(0)] TransId[600019] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (H,5) ...
Place(0) [Transaction] Tx(400017) and Tx(600019) no overlap
Place(0) [Transaction] Tx(400017) and Tx(600019) conflicting=[false] ...
Place(0) [Transaction] Tx(400017) and Tx(300018) no overlap
Place(0) [Transaction] Tx(400017) and Tx(300018) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [Replica(0)] ConflictReport for transaction[400017] is null
Place(0) [Replica(0)] TransId[300018] Applying commit changes:=> InitVersion[3] value[5] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (Y,5) ...
Place(3) [MapRequest] TransId[400017] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400017] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100018] ReqId[57] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100018]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100018] ReqId[58] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100018] ReqId[58] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100018] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100018] ReqId[58] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100018]  { await ... 
Place(1) [Replica(1)] calling abortNoResponse for transactionId[100018] ...
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(4) [Replica(4)] check transaction client  TransId=[500017] ClientPlace [4] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[500017] ClientPlace [4] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400017] ReqId[51] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400017] ReqId[51] type[Commit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200017]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200018]  { await ... 
Place(1) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200018] ReqId[54] type[Get]  key[V]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200018] ReqId[54] type[Get]  key[V]>
PlPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600019]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600020]  { await ... 
Place(5) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600020] ReqId[58] type[Get]  key[S]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600020] ReqId[58] type[Get]  key[S]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600020] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(5) [MapRequest] TransId[600020] From [5] adding response for request === <request TransactionId[600020] ReqId[58] type[Get]  key[S]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [RepliPlace(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[400017] ClientPlace [3] isDead[false] ...
ace(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500017] ReqId[51] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500017] ReqId[51] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500017] ReqId[51] type[Commit]  key[null]>  Exception: null
caClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300018]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300019]  { await ... 
Place(2) [ReplicaClient] Key[E] ParitionId: 3 Replicas[4  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300019] ReqId[58] type[Get]  key[E]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300019] ReqId[58] type[Get]  key[E]>
Place(3) [MapRequest] Completing request: <request TransactionId[400017] ReqId[51] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[500017] Applying commit changes:=> InitVersion[4] value[6] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (F,6) ...
Place(5) [Replica(5)] TransId[500017] Applying commit changes:=> InitVersion[4] value[6] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (F,6) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200018] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300019] clientId[2] ...
Place(4) [Partition] Partition [3]  GET_V (E) ...
Place(1) [Replica(1)] TransId[400017] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (B,4) ...
Place(2) [MapRequest] TransId[300019] From [4] adding response for request === <request TransactionId[300019] ReqId[58] type[Get]  key[E]> ..... output[1] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200018] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300019] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200018] From [3] adding response for request === <request TransactionId[200018] ReqId[54] type[Get]  key[V]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200018] From [2] adding response for request === <request TransactionId[200018] ReqId[54] type[Get]  key[V]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300019] From [3] adding response for request === <request TransactionId[300019] ReqId[58] type[Get]  key[E]> ..... output[1] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600020] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] TransId[400017] Applying commit changes:=> InitVersion[2] value[4] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (B,4) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100018]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 11ms
Place(5) [MapRequest] TransId[600020] From [0] adding response for request === <request TransactionId[600020] ReqId[58] type[Get]  key[S]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200018]          ... released }    Success=true
Place(1) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200018] ReqId[55] type[Put]  key[V]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200018] ReqId[55] type[Put]  key[V]>
Place(1) [ResilientMapImpl] put[200018]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400017]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400018]  { await ... 
Place(3) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400018] ReqId[52] type[Get]  key[Q]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400018] ReqId[52] type[Get]  key[Q]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400018] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [MapRequest] TransId[400018] From [3] adding response for request === <request TransactionId[400018] ReqId[52] type[Get]  key[Q]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600020]          ... released }    Success=true
Place(5) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600020] ReqId[59] type[Put]  key[S]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600020] ReqId[59] type[Put]  key[S]>
Place(5) [ResilientMapImpl] put[600020]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600020] clientId[5] ...
Place(5) [MapRequest] TransId[600020] From [5] adding response for request === <request TransactionId[600020] ReqId[59] type[Put]  key[S]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[200018] ClientPlace [1] isDead[false] ...
Place(2) [ResilientMapImpl] get[300019]          ... released }    Success=true
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500017]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500018]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500018] ReqId[52] type[Get]  key[M]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500018] ReqId[52] type[Get]  key[M]>
Place(2) [ReplicaClient] Key[E] ParitionId: 3 Replicas[4  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300019] ReqId[59] type[Put]  key[E]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300019] ReqId[59] type[Put]  key[E]>
Place(2) [ResilientMapImpl] put[300019]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200018] clientId[1] ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[300019] clientId[2] ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400018] clientId[3] ...
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(0) [ResilientMapImpl] get[100019]  { await ... 
Place(0) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100019] ReqId[59] type[Get]  key[B]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100019] ReqId[59] type[Get]  key[B]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100019] clientId[0] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [MapRequest] TransId[100019] From [0] adding response for request === <request TransactionId[100019] ReqId[59] type[Get]  key[B]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200018] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300019] clientId[2] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100019] clientId[0] ...
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[400018] ClientPlace [3] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[200018] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[300019] ClientPlace [2] isDead[false] ...
Place(1) [MapRequest] TransId[200018] From [3] adding response for request === <request TransactionId[200018] ReqId[55] type[Put]  key[V]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200018] From [2] adding response for request === <request TransactionId[200018] ReqId[55] type[Put]  key[V]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300019] From [4] adding response for request === <request TransactionId[300019] ReqId[59] type[Put]  key[E]> ..... output[1] exception[null] 
Place(2) [MapRequest] TransId[300019] From [3] adding response for request === <request TransactionId[300019] ReqId[59] type[Put]  key[E]> ..... output[1] exception[null] 
Place(0) [MapRequest] TransId[100019] From [1] adding response for request === <request TransactionId[100019] ReqId[59] type[Get]  key[B]> ..... output[4] exception[null] 
Place(3) [MapRequest] TransId[400018] From [4] adding response for request === <request TransactionId[400018] ReqId[52] type[Get]  key[Q]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500018] clientId[4] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500018] clientId[4] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600020] clientId[5] ...
Place(4) [MapRequest] TransId[500018] From [0] adding response for request === <request TransactionId[500018] ReqId[52] type[Get]  key[M]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600020] From [0] adding response for request === <request TransactionId[600020] ReqId[59] type[Put]  key[S]> ..... output[3] exception[null] 
Place(4) [MapRequest] TransId[500018] From [5] adding response for request === <request TransactionId[500018] ReqId[52] type[Get]  key[M]> ..... output[4] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500018]          ... released }    Success=true
Place(4) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500018] ReqId[53] type[Put]  key[M]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500018] ReqId[53] type[Put]  key[M]>
Place(4) [ResilientMapImpl] put[500018]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200018]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200018] ReqId[56] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200018] ReqId[56] type[PrepareCommit]  kPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300019]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300019] ReqId[60] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300019] ReqId[60] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300019]  { await ... 
ey[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400018]          ... released }    Success=true
Place(3) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400018] ReqId[53] type[Put]  key[Q]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400018] ReqId[53] type[Put]  key[Q]>
Place(3) [ResilientMapImpl] put[400018]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400018] clientId[3] ...
Place(3) [MapRequest] TransId[400018] From [3] adding response for request === <request TransactionId[400018] ReqId[53] type[Put]  key[Q]> ..... output[3] exception[null] 
Place(1) [ResilientMapImpl] commitTransaction[200018]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600020]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100019]          ... released }    Success=true
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600020] ReqId[60] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600020] ReqId[60] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Key[B] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ResilientMapImpl] commitTransaction[600020]  { await ... 
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100019] ReqId[60] type[Put]  key[B]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100019] ReqId[60] type[Put]  key[B]>
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(5) [Transaction] Tx(600020) and Tx(500018) no overlap
Place(5) [Transaction] Tx(600020) and Tx(500018) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[600020] is null
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100019] clientId[0] ...
Place(5) [MapRequest] TransId[600020] From [5] adding vote response [1] ...
Place(5) [MapRequest] TransId[600020] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [5] adding vote response completed ...
Place(0) [MapRequest] TransId[100019] From [0] adding response for request === <request TransactionId[100019] ReqId[60] type[Put]  key[B]> ..... output[4] exception[null] 
Place(0) [ResilientMapImpl] put[100019]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100019] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Replica(2)] ConflictReport for transaction[200018] is null
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Transaction] Tx(600020) and Tx(500018) no overlap
Place(0) [Transaction] Tx(600020) and Tx(500018) conflicting=[false] ...
Place(0) [Transaction] Tx(600020) and Tx(100019) no overlap
Place(0) [Transaction] Tx(600020) and Tx(100019) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[600020] is null
Place(4) [Partition] Partition [3]  GET_V (E) ...
Place(4) [Transaction] Tx(300019) and Tx(400018) no overlap
Place(4) [Transaction] Tx(300019) and Tx(400018) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[300019] is null
Place(4) [Replica(4)] getOrAddActiveTransaction transId[400018] clientId[3] ...
Place(5) [MapRequest] TransId[600020] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600020] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [Transaction] Tx(300019) and Tx(200018) no overlap
Place(3) [Transaction] Tx(300019) and Tx(200018) conflicting=[false] ...
Place(3) [Transaction] Tx(300019) and Tx(400018) no overlap
Place(3) [Transaction] Tx(300019) and Tx(400018) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[300019] is null
Place(1) [MapRequest] TransId[200018] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200018] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(2) [MapRequest] TransId[300019] From [3] adding vote response [1] ...
Place(2) [MapRequest] TransId[300019] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [3] adding vote response completed ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500018] clientId[4] ...
Place(2) [MapRequest] TransId[300019] From [4] adding vote response [1] ...
Place(2) [MapRequest] TransId[300019] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [4] adding vote response completed ...
Place(3) [MapRequest] TransId[400018] From [4] adding response for request === <request TransactionId[400018] ReqId[53] type[Put]  key[Q]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100019] From [1] adding response for request === <request TransactionId[100019] ReqId[60] type[Put]  key[B]> ..... output[4] exception[null] 
Place(4) [MapRequest] TransId[500018] From [5] adding response for request === <request TransactionId[500018] ReqId[53] type[Put]  key[M]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500018] clientId[4] ...
Place(3) [Transaction] Tx(200018) and Tx(300019) no overlap
Place(3) [Transaction] Tx(200018) and Tx(300019) conflicting=[false] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Transaction] Tx(200018) and Tx(400018) no overlap
Place(3) [Transaction] Tx(200018) and Tx(400018) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[200018] is null
Place(4) [MapRequest] TransId[500018] From [0] adding response for request === <request TransactionId[500018] ReqId[53] type[Put]  key[M]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200018] From [3] adding vote response [1] ...
Place(1) [MapRequest] TransId[200018] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [3] adding vote response completed ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[100019] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100019]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100019] ReqId[61] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100019] ReqId[61] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100019]  { await ... 
Place(0) [Transaction] Tx(100019) and Tx(600020) no overlap
Place(0) [Transaction] Tx(100019) and Tx(600020) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (B) ...
Place(0) [Transaction] Tx(100019) and Tx(500018) no overlap
Place(0) [Transaction] Tx(100019) and Tx(500018) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100019] is null
Place(0) [MapRequest] TransId[100019] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100019] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400018]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400018] ReqId[54] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400018] ReqId[54] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400018]  { await ... 
Place(3) [Transaction] Tx(400018) and Tx(300019) no overlap
Place(3) [Transaction] Tx(400018) and Tx(300019) conflicting=[false] ...
Place(3) [Transaction] Tx(400018) and Tx(200018) no overlap
Place(3) [Transaction] Tx(400018) and Tx(200018) conflicting=[false] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] ConflictReport for transaction[400018] is null
Place(3) [MapRequest] TransId[400018] From [3] adding vote response [1] ...
Place(3) [MapRPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300019] ReqId[60] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300019] ReqId[60] type[Commit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500018]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500018] ReqId[54] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500018] ReqId[54] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500018]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200018] ReqId[56] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200018] ReqId[56] type[Commit]  key[null]>
equest] TransId[400018] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [3] adding vote response completed ...
Place(1) [MapRequest] Completing request: <request TransactionId[200018] ReqId[56] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600020] ReqId[60] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600020] ReqId[60] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600020] ReqId[60] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] TransId[600020] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (S,4) ...
Place(2) [MapRequest] Completing request: <request TransactionId[300019] ReqId[60] type[Commit]  key[null]>  Exception: null
Place(1) [Partition] Partition [0]  GET_V (B) ...
Place(1) [Replica(1)] ConflictReport for transaction[100019] is null
Place(4) [Replica(4)] TransId[300019] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (E,2) ...
Place(4) [Partition] Partition [3]  GET_V (Q) ...
Place(4) [Replica(4)] ConflictReport for transaction[400018] is null
Place(2) [Replica(2)] TransId[200018] Applying commit changes:=> InitVersion[3] value[5] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (V,5) ...
Place(3) [Replica(3)] TransId[300019] Applying commit changes:=> InitVersion[0] value[2] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (E,2) ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(5) [Replica(5)] ConflictReport for transaction[500018] is null
Place(3) [Replica(3)] TransId[200018] Applying commit changes:=> InitVersion[3] value[5] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (V,5) ...
Place(4) [MapRequest] TransId[500018] From [5] adding vote response [1] ...
Place(4) [MapRequest] TransId[500018] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [5] adding vote response completed ...
Place(3) [MapRequest] TransId[400018] From [4] adding vote response [1] ...
Place(3) [MapRequest] TransId[400018] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [4] adding vote response completed ...
Place(0) [MapRequest] TransId[100019] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100019] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(0) [Replica(0)] TransId[600020] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (S,4) ...
Place(0) [Transaction] Tx(500018) and Tx(600020) no overlap
Place(0) [Transaction] Tx(500018) and Tx(600020) conflicting=[false] ...
Place(0) [Transaction] Tx(500018) and Tx(100019) no overlap
Place(0) [Transaction] Tx(500018) and Tx(100019) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] ConflictReport for transaction[500018] is null
Place(4) [MapRequest] TransId[500018] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500018] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100019] ReqId[61] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100019] ReqId[61] type[Commit]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100019] ReqId[61] type[Commit]  key[null]>  Exception: null
Place(0) [Replica(0)] TransId[100019] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (B,5) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400018] ReqId[54] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400018] ReqId[54] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400018] ReqId[54] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[400018] Applying commit changes:=> InitVersion[2] value[4] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (Q,4) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500018] ReqId[54] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600020]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600021]  { await ... 
Place(5) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600021] ReqId[61] type[Get]  key[I]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600021] ReqId[61] type[Get]  key[I]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300019]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300020]  { await ... 
Place(2) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadTransactionId[500018] ReqId[54] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500018] ReqId[54] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200018]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200019]  { await ... 
Place(1) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200019] ReqId[57] type[Get]  key[U]>
Places: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300020] ReqId[61] type[Get]  key[G]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300020] ReqId[61] type[Get]  key[G]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200019] ReqId[57] type[Get]  key[U]>
Place(1) [Replica(1)] TransId[100019] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (B,5) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200019] clientId[1] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [MapRequest] TransId[200019] From [1] adding response for request === <request TransactionId[200019] ReqId[57] type[Get]  key[U]> ..... output[2] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600021] clientId[5] ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200019] clientId[1] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(4) [Replica(4)] TransId[400018] Applying commit changes:=> InitVersion[2] value[4] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (Q,4) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600021] clientId[5] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300020] clientId[2] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Replica(5)] TransId[500018] Applying commit changes:=> InitVersion[3] value[5] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (M,5) ...
Place(2) [MapRequest] TransId[300020] From [5] adding response for request === <request TransactionId[300020] ReqId[61] type[Get]  key[G]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600021] From [1] adding response for request === <request TransactionId[600021] ReqId[61] type[Get]  key[I]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200019] From [2] adding response for request === <request TransactionId[200019] ReqId[57] type[Get]  key[U]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600021] From [2] adding response for request === <request TransactionId[600021] ReqId[61] type[Get]  key[I]> ..... output[4] exception[null] 
Place(0) [Replica(0)] TransId[500018] Applying commit changes:=> InitVersion[3] value[5] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (M,5) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300020] clientId[2] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(2) [MapRequest] TransId[300020] From [0] adding response for request === <request TransactionId[300020] ReqId[61] type[Get]  key[G]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100019]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100020]  { await ... 
Place(0) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100020] ReqId[62] type[Get]  key[R]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100020] ReqId[62] type[Get]  key[R]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400018]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400019]  { await ... 
Place(3) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400019] ReqId[55] type[Get]  key[T]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400019] ReqId[55] type[Get]  key[T]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500018]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500019]  { await ... 
Place(4) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600021]          ... released }    Success=true
Place(5) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600021] ReqId[62] type[Put]  key[I]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600021] ReqId[62] type[Put]  key[I]>
Place(5) [ResilientMapImpl] put[600021]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300020]          ... released }    Success=true
Place(2) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300020] ReqId[62] type[Put]  key[G]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300020] RPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500019] ReqId[55] type[Get]  key[A]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500019] ReqId[55] type[Get]  key[A]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200019]          ... released }    Success=true
Place(1) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200019] ReqId[58] type[Put]  key[U]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200019] ReqId[58] type[Put]  key[U]>
Place(1) [ResilientMapImpl] put[200019]  { await ... 
eqId[62] type[Put]  key[G]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200019] clientId[1] ...
Place(1) [MapRequest] TransId[200019] From [1] adding response for request === <request TransactionId[200019] ReqId[58] type[Put]  key[U]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100020] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(2) [ResilientMapImpl] put[300020]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100020] clientId[0] ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600021] clientId[5] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200019] clientId[1] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400019] clientId[3] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500019] clientId[4] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600021] clientId[5] ...
Place(5) [MapRequest] TransId[600021] From [1] adding response for request === <request TransactionId[600021] ReqId[62] type[Put]  key[I]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300020] clientId[2] ...
Place(3) [MapRequest] TransId[400019] From [1] adding response for request === <request TransactionId[400019] ReqId[55] type[Get]  key[T]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200019] From [2] adding response for request === <request TransactionId[200019] ReqId[58] type[Put]  key[U]> ..... output[2] exception[null] 
Place(4) [MapRequest] TransId[500019] From [5] adding response for request === <request TransactionId[500019] ReqId[55] type[Get]  key[A]> ..... output[3] exception[null] 
Place(5) [MapRequest] TransId[600021] From [2] adding response for request === <request TransactionId[600021] ReqId[62] type[Put]  key[I]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300020] From [5] adding response for request === <request TransactionId[300020] ReqId[62] type[Put]  key[G]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100020] From [4] adding response for request === <request TransactionId[100020] ReqId[62] type[Get]  key[R]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100020] From [5] adding response for request === <request TransactionId[100020] ReqId[62] type[Get]  key[R]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300020] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500019] clientId[4] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400019] clientId[3] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(2) [MapRequest] TransId[300020] From [0] adding response for request === <request TransactionId[300020] ReqId[62] type[Put]  key[G]> ..... output[4] exception[null] 
Place(4) [MapRequest] TransId[500019] From [0] adding response for request === <request TransactionId[500019] ReqId[55] type[Get]  key[A]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400019] From [0] adding response for request === <request TransactionId[400019] ReqId[55] type[Get]  key[T]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100020]          ... released }    Success=true
Place(0) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100020] ReqId[63] type[Put]  key[R]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100020] ReqId[63] type[Put]  key[R]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400019]          ... released }    Success=true
Place(3) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400019] ReqId[56] type[Put]  key[T]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400019] ReqId[56] type[Put]  key[T]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200019]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200019] ReqId[59] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200019] ReqId[59] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] put[100020]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600021]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600021] ReqId[63] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600021] ReqId[63] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600021]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300020]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300020] ReqId[63] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300020] ReqId[63] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300020]  { await ... 
Place(3) [ResilientMapImpl] put[400019]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500019]          ... released }    Success=true
Place(4) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500019] ReqId[56] type[Put]  key[A]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500019] ReqId[56] type[Put]  key[A]>
Place(4) [ResilientMapImpl] put[500019]  { await ... 
Place(1) [ResilientMapImpl] commitTransaction[200019]  { await ... 
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100020] clientId[0] ...
Place(1) [Transaction] Tx(200019) and Tx(400019) no overlap
Place(1) [Transaction] Tx(200019) and Tx(400019) conflicting=[false] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100020] clientId[0] ...
Place(1) [Transaction] Tx(200019) and Tx(600021) no overlap
Place(1) [Transaction] Tx(200019) and Tx(600021) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[200019] is null
Place(1) [MapRequest] TransId[200019] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200019] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(1) [Transaction] Tx(600021) and Tx(200019) no overlap
Place(1) [Transaction] Tx(600021) and Tx(200019) conflicting=[false] ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(1) [Transaction] Tx(600021) and Tx(400019) no overlap
Place(1) [Transaction] Tx(600021) and Tx(400019) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[600021] is null
Place(0) [Replica(0)] getOrAddActiveTransaction transId[500019] clientId[4] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Transaction] Tx(600021) and Tx(200019) no overlap
Place(2) [Transaction] Tx(600021) and Tx(200019) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[600021] is null
Place(2) [Transaction] Tx(200019) and Tx(600021) no overlap
Place(2) [Transaction] Tx(200019) and Tx(600021) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Replica(2)] ConflictReport for transaction[200019] is null
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400019] clientId[3] ...
Place(4) [MapRequest] TransId[500019] From [0] adding response for request === <request TransactionId[500019] ReqId[56] type[Put]  key[A]> ..... output[3] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400019] clientId[3] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500019] clientId[4] ...
Place(3) [MapRequest] TransId[400019] From [0] adding response for request === <request TransactionId[400019] ReqId[56] type[Put]  key[T]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600021] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600021] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [Transaction] Tx(300020) and Tx(500019) no overlap
Place(5) [Transaction] Tx(300020) and Tx(500019) conflicting=[false] ...
Place(5) [Transaction] Tx(300020) and Tx(100020) no overlap
Place(5) [Transaction] Tx(300020) and Tx(100020) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[300020] is null
Place(3) [MapRequest] TransId[400019] From [1] adding response for request === <request TransactionId[400019] ReqId[56] type[Put]  key[T]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100020] From [4] adding response for request === <request TransactionId[100020] ReqId[63] type[Put]  key[R]> ..... output[3] exception[null] 
Place(5) [MapRequest] TransId[600021] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600021] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100020] From [5] adding response for request === <request TransactionId[100020] ReqId[63] type[Put]  key[R]> ..... output[3] exception[null] 
Place(4) [MapRequest] TransId[500019] From [5] adding response for request === <request TransactionId[500019] ReqId[56] type[Put]  key[A]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(1) [MapRequest] TransId[200019] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200019] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(0) [Transaction] Tx(300020) and Tx(400019) no overlap
Place(0) [Transaction] Tx(300020) and Tx(400019) conflicting=[false] ...
Place(0) [Transaction] Tx(300020) and Tx(500019) no overlap
Place(0) [Transaction] Tx(300020) and Tx(500019) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[300020] is null
Place(2) [MapRequest] TransId[300020] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300020] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(2) [MapRequest] TransId[300020] From [5] adding vote response [1] ...
Place(2) [MapRequest] TransId[300020] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [5] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100020]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100020] ReqId[64] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100020] ReqId[64] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100020]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400019]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400019] ReqId[57] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400019] ReqId[57] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200019] ReqId[59] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200019] ReqId[59] type[Commit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600021] ReqId[63] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600021] ReqId[63] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300020] ReqId[63] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300020] ReqId[63] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300020] ReqId[63] type[Commit]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] commitTransaction[400019]  { await ... 
Place(1) [MapRequest] Completing request: <request TransactionId[200019] ReqId[59] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[200019] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (U,3) ...
Place(5) [MapRequest] Completing request: <request TransactionId[600021] ReqId[63] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(4) [ResilientMapImpl] put[500019]          ... released }    Success=true
Place(5) [Transaction] Tx(100020) and Tx(300020) no overlap
Place(5) [Transaction] Tx(100020) and Tx(300020) conflicting=[false] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [Transaction] Tx(100020) and Tx(500019) no overlap
Place(5) [Transaction] Tx(100020) and Tx(500019) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[100020] is null
Place(4) [Replica(4)] ConflictReport for transaction[100020] is null
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500019] ReqId[57] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500019] ReqId[57] type[PrepareCommit]  key[null]>
Place(4) [ResilientMapImpl] commitTransaction[500019]  { await ... 
Place(1) [Replica(1)] TransId[600021] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (I,5) ...
Place(2) [Replica(2)] TransId[200019] Applying commit changes:=> InitVersion[1] value[3] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (U,3) ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] ConflictReport for transaction[400019] is null
Place(0) [Transaction] Tx(400019) and Tx(300020) no overlap
Place(0) [Transaction] Tx(400019) and Tx(300020) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(2) [Replica(2)] TransId[600021] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (I,5) ...
Place(0) [Transaction] Tx(400019) and Tx(500019) no overlap
Place(0) [Transaction] Tx(400019) and Tx(500019) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[400019] is null
Place(5) [Replica(5)] TransId[300020] Applying commit changes:=> InitVersion[3] value[5] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (G,5) ...
Place(3) [MapRequest] TransId[400019] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400019] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(3) [MapRequest] TransId[400019] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400019] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(0) [Transaction] Tx(500019) and Tx(400019) no overlap
Place(0) [Transaction] Tx(500019) and Tx(400019) conflicting=[false] ...
Place(0) [Transaction] Tx(500019) and Tx(300020) no overlap
Place(0) [Transaction] Tx(500019) and Tx(300020) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[500019] is null
Place(0) [MapRequest] TransId[100020] From [4] adding vote response [1] ...
Place(0) [MapRequest] TransId[100020] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [4] adding vote response completed ...
Place(0) [Replica(0)] TransId[300020] Applying commit changes:=> InitVersion[3] value[5] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (G,5) ...
Place(0) [MapRequest] TransId[100020] From [5] adding vote response [1] ...
Place(0) [MapRequest] TransId[100020] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [5] adding vote response completed ...
Place(5) [Transaction] Tx(500019) and Tx(100020) no overlap
Place(5) [Transaction] Tx(500019) and Tx(100020) conflicting=[false] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Replica(5)] ConflictReport for transaction[500019] is null
Place(4) [MapRequest] TransId[500019] From [0] adding vote response [1] ...
Place(4) [MapRequest] TransId[500019] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500019] From [5] adding vote response [1] ...
Place(4) [MapRequest] TransId[500019] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [5] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100020] ReqId[64] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100020] ReqId[64] type[Commit]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100020] ReqId[64] type[Commit]  key[null]>  Exception: null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400019] ReqId[57] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400019] ReqId[57] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400019] ReqId[57] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200019]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200020]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600021]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600022]  { await ... 
Place(5) [ReplicaClient] Key[X] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600022] ReqId[64] type[Get]  key[X]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600022] ReqId[64] type[Get]  key[X]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300020]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300021]  { await ... 
Place(2) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300021] ReqId[64] type[Get]  key[T]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300021] ReqId[64] type[Get]  key[T]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500019] ReqId[57] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500019] ReqId[57] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500019] ReqId[57] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200020] ReqId[60] type[Get]  key[K]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200020] ReqId[60] type[Get]  key[K]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600022] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(5) [MapRequest] TransId[600022] From [5] adding response for request === <request TransactionId[600022] ReqId[64] type[Get]  key[X]> ..... output[1] exception[null] 
Place(5) [Replica(5)] TransId[100020] Applying commit changes:=> InitVersion[2] value[4] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (R,4) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600022] clientId[5] ...
Place(4) [Partition] Partition [4]  GET_V (X) ...
Place(4) [Replica(4)] TransId[100020] Applying commit changes:=> InitVersion[2] value[4] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (R,4) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200020] clientId[1] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300021] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] TransId[400019] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (T,5) ...
Place(5) [Replica(5)] TransId[500019] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(5) [Partition] Partition [5]  PUT (A,4) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200020] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(5) [MapRequest] TransId[600022] From [4] adding response for request === <request TransactionId[600022] ReqId[64] type[Get]  key[X]> ..... output[1] exception[null] 
Place(2) [MapRequest] TransId[300021] From [1] adding response for request === <request TransactionId[300021] ReqId[64] type[Get]  key[T]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200020] From [3] adding response for request === <request TransactionId[200020] ReqId[60] type[Get]  key[K]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200020] From [4] adding response for request === <request TransactionId[200020] ReqId[60] type[Get]  key[K]> ..... output[3] exception[null] 
Place(0) [Replica(0)] TransId[500019] Applying commit changes:=> InitVersion[2] value[4] partitionId[5] readOnly[false] deleted[false]

Place(0) [Partition] Partition [5]  PUT (A,4) ...
Place(4) [Replica(4)] checkDeadReplicaClient new iteration ...
Place(4) [Replica(4)] check transaction client  TransId=[200020] ClientPlace [1] isDead[false] ...
Place(4) [Replica(4)] check transaction client  TransId=[600022] ClientPlace [5] isDead[false] ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[600022] ClientPlace [5] isDead[false] ...
Place(0) [Replica(0)] TransId[400019] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (T,5) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300021] clientId[2] ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(2) [MapRequest] TransId[300021] From [0] adding response for request === <request TransactionId[300021] ReqId[64] type[Get]  key[T]> ..... output[5] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300021] ClientPlace [2] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100020]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100021]  { await ... 
Place(0) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100021] ReqId[65] type[Get]  key[U]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100021] ReqId[65] type[Get]  key[U]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400019]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400020]  { await ... 
Place(3) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400020] ReqId[58] type[Get]  key[P]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400020] ReqId[58] type[Get]  key[P]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400020] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600022]          ... released }    Success=true
Place(5) [ReplicaClient] Key[X] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600022] ReqId[65] type[Put]  key[X]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600022] ReqId[65] type[Put]  key[X]>
Place(5) [ResilientMapImpl] put[600022]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600022] clientId[5] ...
Place(5) [MapRequest] TransId[600022] From [5] adding response for request === <request TransactionId[600022] ReqId[65] type[Put]  key[X]> ..... output[1] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300021]          ... released }    Success=true
Place(2) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300021] ReqId[65] type[Put]  key[T]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300021] ReqId[65] type[Put]  key[T]>
Place(3) [MapRequest] TransId[400020] From [3] adding response for request === <request TransactionId[400020] ReqId[58] type[Get]  key[P]> ..... output[4] exception[null] 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500019]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500020]  { await ... 
Place(4) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100021] clientId[0] ...
Place(1) [ResilientMapImpl] get[200020]          ... released }    Success=true
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [ReplicaClient] Key[K] ParitionId: 3 Replicas[4  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200020] ReqIdPlace(2) [ResilientMapImpl] put[300021]  { await ... 
[61] type[Put]  key[K]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200020] ReqId[61] type[Put]  key[K]>
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500020] ReqId[58] type[Get]  key[L]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500020] ReqId[58] type[Get]  key[L]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500020] clientId[4] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100021] clientId[0] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400020] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(1) [ResilientMapImpl] put[200020]  { await ... 
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(4) [MapRequest] TransId[500020] From [4] adding response for request === <request TransactionId[500020] ReqId[58] type[Get]  key[L]> ..... output[4] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600022] clientId[5] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300021] clientId[2] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500020] clientId[4] ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(5) [MapRequest] TransId[600022] From [4] adding response for request === <request TransactionId[600022] ReqId[65] type[Put]  key[X]> ..... output[1] exception[null] 
Place(4) [MapRequest] TransId[500020] From [5] adding response for request === <request TransactionId[500020] ReqId[58] type[Get]  key[L]> ..... output[4] exception[null] 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[200020] clientId[1] ...
Place(3) [MapRequest] TransId[400020] From [2] adding response for request === <request TransactionId[400020] ReqId[58] type[Get]  key[P]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200020] clientId[1] ...
Place(2) [MapRequest] TransId[300021] From [1] adding response for request === <request TransactionId[300021] ReqId[65] type[Put]  key[T]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200020] From [3] adding response for request === <request TransactionId[200020] ReqId[61] type[Put]  key[K]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200020] From [4] adding response for request === <request TransactionId[200020] ReqId[61] type[Put]  key[K]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100021] From [2] adding response for request === <request TransactionId[100021] ReqId[65] type[Get]  key[U]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100021] From [1] adding response for request === <request TransactionId[100021] ReqId[65] type[Get]  key[U]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300021] clientId[2] ...
Place(2) [MapRequest] TransId[300021] From [0] adding response for request === <request TransactionId[300021] ReqId[65] type[Put]  key[T]> ..... output[5] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400020] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100021] ClientPlace [0] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300021]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300021] ReqId[66] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300021] ReqId[66] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100021]          ... released }    Success=true
Place(0) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100021] ReqId[66] type[Put]  key[U]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100021] ReqId[66] type[Put]  key[U]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200020]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200020] ReqId[62] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200020] ReqId[62] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400020]          ... released }    Success=true
Place(3) [ReplicaClient] Key[P] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400020] ReqId[59] type[Put]  key[P]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400020] ReqId[59] type[Put]  key[P]>
Place(3) [ResilientMapImpl] put[400020]  { aPlace(0) [ResilientMapImpl] put[100021]  { await ... 
wait ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400020] clientId[3] ...
Place(3) [MapRequest] TransId[400020] From [3] adding response for request === <request TransactionId[400020] ReqId[59] type[Put]  key[P]> ..... output[4] exception[null] 
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[200020] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[400020] ClientPlace [3] isDead[false] ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] get[500020]          ... released }    Success=true
Place(4) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500020] ReqId[59] type[Put]  key[L]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500020] ReqId[59] type[Put]  key[L]>
Place(4) [ResilientMapImpl] put[500020]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[500020] clientId[4] ...
Place(4) [MapRequest] TransId[500020] From [4] adding response for request === <request TransactionId[500020] ReqId[59] type[Put] Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600022]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600022] ReqId[66] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600022] ReqId[66] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600022]  { await ... 
Place(2) [ResilientMapImpl] commitTransaction[300021]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100021] clientId[0] ...
 key[L]> ..... output[4] exception[null] 
Place(1) [ResilientMapImpl] commitTransaction[200020]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100021] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Transaction] Tx(600022) and Tx(500020) no overlap
Place(5) [Transaction] Tx(600022) and Tx(500020) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[600022] is null
Place(5) [MapRequest] TransId[600022] From [5] adding vote response [1] ...
Place(5) [MapRequest] TransId[600022] Waiting for votes from places [4,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [5] adding vote response completed ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400020] clientId[3] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[500020] clientId[4] ...
Place(4) [Partition] Partition [4]  GET_V (X) ...
Place(4) [Transaction] Tx(600022) and Tx(200020) no overlap
Place(4) [Transaction] Tx(600022) and Tx(200020) conflicting=[false] ...
Place(4) [Transaction] Tx(600022) and Tx(500020) no overlap
Place(4) [Transaction] Tx(600022) and Tx(500020) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[600022] is null
Place(4) [Transaction] Tx(200020) and Tx(600022) no overlap
Place(4) [Transaction] Tx(200020) and Tx(600022) conflicting=[false] ...
Place(4) [Partition] Partition [3]  GET_V (K) ...
Place(4) [Transaction] Tx(200020) and Tx(500020) no overlap
Place(4) [Transaction] Tx(200020) and Tx(500020) conflicting=[false] ...
Place(4) [Replica(4)] ConflictReport for transaction[200020] is null
Place(5) [MapRequest] TransId[600022] From [4] adding vote response [1] ...
Place(5) [MapRequest] TransId[600022] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [4] adding vote response completed ...
Place(4) [MapRequest] TransId[500020] From [5] adding response for request === <request TransactionId[500020] ReqId[59] type[Put]  key[L]> ..... output[4] exception[null] 
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(3) [Transaction] Tx(200020) and Tx(400020) no overlap
Place(3) [Transaction] Tx(200020) and Tx(400020) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[200020] is null
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] Version conflict transaction[300021] key[T] oldVersion[3] newVersion[4] ...
Place(1) [MapRequest] TransId[200020] From [4] adding vote response [1] ...
Place(1) [MapRequest] TransId[200020] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [4] adding vote response completed ...
Place(1) [MapRequest] TransId[200020] From [3] adding vote response [1] ...
Place(1) [MapRequest] TransId[200020] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [3] adding vote response completed ...
Place(2) [MapRequest] TransId[300021] From [1] adding vote response [0] ...
Place(2) [MapRequest] TransId[300021] Waiting for votes from places [0,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(3) [MapRequest] TransId[400020] From [2] adding response for request === <request TransactionId[400020] ReqId[59] type[Put]  key[P]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100021] From [2] adding response for request === <request TransactionId[100021] ReqId[66] type[Put]  key[U]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100021] From [1] adding response for request === <request TransactionId[100021] ReqId[66] type[Put]  key[U]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Replica(0)] ConflictReport for transaction[300021] is null
Place(2) [MapRequest] TransId[300021] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300021] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200020] ReqId[62] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200020] ReqId[62] type[Commit]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200020] ReqId[62] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600022] ReqId[66] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600022] ReqId[66] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300021] ReqId[66] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ResilientMapImpl] commitTransaction[300021]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300021] ReqId[67] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactiPlace(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100021]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100021] ReqId[67] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100021] ReqId[67] type[PrepareCommit]  key[null]>
onId[300021] ReqId[67] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300021] ReqId[67] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300021]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400020]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400020] ReqId[60] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400020] ReqId[60] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400020]  { await ... 
Place(3) [Transaction] Tx(400020) and Tx(200020) no overlap
Place(3) [Transaction] Tx(400020) and Tx(200020) conflicting=[false] ...
Place(3) [Partition] Partition [2]  GET_V (P) ...
Place(3) [Replica(3)] ConflictReport for transaction[400020] is null
Place(3) [MapRequest] TransId[400020] From [3] adding vote response [1] ...
Place(3) [MapRequest] TransId[400020] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [3] adding vote Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500020]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500020] ReqId[60] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500020] ReqId[60] type[PrepareCommit]  key[null]>
response completed ...
Place(4) [ResilientMapImpl] commitTransaction[500020]  { await ... 
Place(4) [Transaction] Tx(500020) and Tx(200020) no overlap
Place(4) [Transaction] Tx(500020) and Tx(200020) conflicting=[false] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600022] ReqId[66] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] TransId[600022] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (X,2) ...
Place(4) [Transaction] Tx(500020) and Tx(600022) no overlap
Place(4) [Transaction] Tx(500020) and Tx(600022) conflicting=[false] ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(4) [Replica(4)] ConflictReport for transaction[500020] is null
Place(0) [ResilientMapImpl] commitTransaction[100021]  { await ... 
Place(4) [MapRequest] TransId[500020] From [4] adding vote response [1] ...
Place(4) [MapRequest] TransId[500020] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [4] adding vote response completed ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [Transaction] Tx(100021) and Tx(300021) no overlap
Place(1) [Transaction] Tx(100021) and Tx(300021) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[100021] is null
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Transaction] Tx(100021) and Tx(400020) no overlap
Place(2) [Transaction] Tx(100021) and Tx(400020) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[100021] is null
Place(2) [Transaction] Tx(400020) and Tx(100021) no overlap
Place(2) [Transaction] Tx(400020) and Tx(100021) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (P) ...
Place(2) [Replica(2)] ConflictReport for transaction[400020] is null
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(5) [Replica(5)] ConflictReport for transaction[500020] is null
Place(4) [Replica(4)] TransId[600022] Applying commit changes:=> InitVersion[0] value[2] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (X,2) ...
Place(4) [Replica(4)] TransId[200020] Applying commit changes:=> InitVersion[2] value[4] partitionId[3] readOnly[false] deleted[false]

Place(4) [Partition] Partition [3]  PUT (K,4) ...
Place(4) [MapRequest] TransId[500020] From [5] adding vote response [1] ...
Place(4) [MapRequest] TransId[500020] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [5] adding vote response completed ...
Place(3) [Replica(3)] TransId[200020] Applying commit changes:=> InitVersion[2] value[4] partitionId[3] readOnly[false] deleted[false]

Place(3) [Partition] Partition [3]  PUT (K,4) ...
Place(1) [Replica(1)] calling abortNoResponse for transactionId[300021] ...
Place(3) [MapRequest] TransId[400020] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400020] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100021] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100021] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100021] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100021] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300021] ...
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[100021] ClientPlace [0] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400020] ReqId[60] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400020] ReqId[60] type[Commit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200020]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200021]  { await ... 
Place(1) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200021] ReqId[63] type[Get]  key[C]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200021] ReqId[63] type[Get]  key[C]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300021]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 14ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100021] ReqId[67] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100021] ReqId[67] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400020] ReqId[60] type[Commit]  key[null]>  Exception: null
Place(3) [Replica(3)] TransId[400020] Applying commit changes:=> InitVersion[3] value[5] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (P,5) ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500020] ReqId[60] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500020] ReqId[60] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500020] ReqId[60] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[500020] Applying commit changes:=> InitVersion[3] value[5] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (L,5) ...
Place(1) [ReplicaPlace(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600022]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600023]  { await ... 
Place(5) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600023] ReqId[67] type[Get]  key[U]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600023] ReqId[67] type[Get]  key[U]>
Place(0) [MapRequest] Completing request: <request TransactionId[100021] ReqId[67] type[Commit]  key[null]>  Exception: null
(1)] getOrAddActiveTransaction transId[200021] clientId[1] ...
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(1) [MapRequest] TransId[200021] From [1] adding response for request === <request TransactionId[200021] ReqId[63] type[Get]  key[C]> ..... output[4] exception[null] 
Place(1) [Replica(1)] TransId[100021] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (U,4) ...
Place(2) [Replica(2)] TransId[100021] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (U,4) ...
Place(5) [Replica(5)] TransId[500020] Applying commit changes:=> InitVersion[3] value[5] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (L,5) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600023] clientId[5] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200021] clientId[1] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [Replica(2)] TransId[400020] Applying commit changes:=> InitVersion[3] value[5] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (P,5) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600023] clientId[5] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(1) [MapRequest] TransId[200021] From [2] adding response for request === <request TransactionId[200021] ReqId[63] type[Get]  key[C]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600023] From [1] adding response for request === <request TransactionId[600023] ReqId[67] type[Get]  key[U]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600023] From [2] adding response for request === <request TransactionId[600023] ReqId[67] type[Get]  key[U]> ..... output[4] exception[null] 
Place(2) [ResilientMapImpl] get[300022]  { await ... 
Place(2) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300022] ReqId[68] type[Get]  key[T]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300022] ReqId[68] type[Get]  key[T]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400020]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400021]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] commitTransaction[500020]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500021]  { await ... 
Place(3) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400021] ReqId[61] type[Get]  key[U]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400021] ReqId[61] type[Get]  key[U]>
Place(4) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500021] ReqId[61] type[Get]  key[D]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500021] ReqId[61] type[Get]  key[D]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200021]          ... released }    Success=true
Place(1) [ReplicaClient] Key[C] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100021]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100022]  { await ... 
Place(0) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100022] ReqId[68] type[Get]  key[L]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100022] ReqId[68] type[Get]  key[L]>
Request <request TransactionId[200021] ReqId[64] type[Put]  key[C]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200021] ReqId[64] type[Put]  key[C]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200021]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200021] clientId[1] ...
Place(1) [MapRequest] TransId[200021] From [1] adding response for request === <request TransactionId[200021] ReqId[64] type[Put]  key[C]> ..... output[4] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600023]          ... released }    Success=true
Place(5) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600023] ReqId[68] type[Put]  key[U]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600023] ReqId[68] type[Put]  key[U]>
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100022] clientId[0] ...
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[600023] clientId[5] ...
Place(5) [ResilientMapImpl] put[600023]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200021] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100022] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500021] clientId[4] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500021] clientId[4] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300022] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [MapRequest] TransId[200021] From [2] adding response for request === <request TransactionId[200021] ReqId[64] type[Put]  key[C]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600023] From [1] adding response for request === <request TransactionId[600023] ReqId[68] type[Put]  key[U]> ..... output[4] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[600023] clientId[5] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400021] clientId[3] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [MapRequest] TransId[300022] From [1] adding response for request === <request TransactionId[300022] ReqId[68] type[Get]  key[T]> ..... output[5] exception[null] 
Place(4) [MapRequest] TransId[500021] From [2] adding response for request === <request TransactionId[500021] ReqId[61] type[Get]  key[D]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100022] From [5] adding response for request === <request TransactionId[100022] ReqId[68] type[Get]  key[L]> ..... output[5] exception[null] 
Place(4) [MapRequest] TransId[500021] From [3] adding response for request === <request TransactionId[500021] ReqId[61] type[Get]  key[D]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600023] From [2] adding response for request === <request TransactionId[600023] ReqId[68] type[Put]  key[U]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300022] clientId[2] ...
Place(0) [MapRequest] TransId[100022] From [4] adding response for request === <request TransactionId[100022] ReqId[68] type[Get]  key[L]> ..... output[5] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(3) [MapRequest] TransId[400021] From [2] adding response for request === <request TransactionId[400021] ReqId[61] type[Get]  key[U]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300022] From [0] adding response for request === <request TransactionId[300022] ReqId[68] type[Get]  key[T]> ..... output[5] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400021] clientId[3] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(3) [MapRequest] TransId[400021] From [1] adding response for request === <request TransactionId[400021] ReqId[61] type[Get]  key[U]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200021]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200021] ReqId[65] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200021] ReqId[65] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200021]  { await ... 
Place(1) [Partition] Partition [1]  GET_V (C) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300022]          ... released }    Success=true
Place(2) [ReplicaClient] Key[T] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300022] ReqId[69] type[Put]  key[T]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300022] ReqId[69] type[Put]  key[T]>
Place(2) [ResilientMapImpl] put[300022]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400021]          ... released }    Success=true
Place(3) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400021] ReqId[62] type[Put]  key[U]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400021] ReqId[62] type[Put]  key[U]>
Place(3) [ResilientMapImpl] put[400021]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Transaction] Tx(200021) and Tx(600023) no overlap
Place(1) [Transaction] Tx(200021) and Tx(600023) conflicting=[false] ...
Place(1) [Transaction] Tx(200021) and Tx(300022) no overlap
Place(1) [Transaction] Tx(200021) and Tx(300022) conflicting=[false] ...
Place(0) [ResilientMapImpl] get[100022]          ... released }    Success=true
Place(0) [ReplicaClient] Key[L] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100022] ReqId[69] type[Put]  key[L]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100022] ReqId[69] type[Put]  key[L]>
Place(4) [ResilientMapImpl] get[500021]          ... released }    Success=true
Place(4) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500021] ReqId[62] type[Put]  key[D]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500021] ReqId[62] type[Put]  key[D]>
Place(1) [Transaction] Tx(200021) and Tx(400021) no overlap
Place(1) [Transaction] Tx(200021) and Tx(400021) conflicting=[false] ...
Place(1) [Replica(1)] ConflictReport for transaction[200021] is null
Place(1) [MapRequest] TransId[200021] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200021] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(4) [ResilientMapImpl] put[500021]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100022]  { await ... 
Place(4) [Replica(4)] getOrAddActiveTransaction transId[100022] clientId[0] ...
Place(5) [ResilientMapImpl] put[600023]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600023] ReqId[69] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600023] ReqId[69] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600023]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100022] clientId[0] ...
Place(2) [Partition] Partition [1]  GET_V (C) ...
Place(2) [Transaction] Tx(200021) and Tx(500021) no overlap
Place(2) [Transaction] Tx(200021) and Tx(500021) conflicting=[false] ...
Place(2) [Transaction] Tx(200021) and Tx(600023) no overlap
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400021] clientId[3] ...
Place(2) [Transaction] Tx(200021) and Tx(600023) conflicting=[false] ...
Place(2) [Transaction] Tx(200021) and Tx(400021) no overlap
Place(2) [Transaction] Tx(200021) and Tx(400021) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[200021] is null
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300022] clientId[2] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[500021] clientId[4] ...
Place(3) [MapRequest] TransId[400021] From [1] adding response for request === <request TransactionId[400021] ReqId[62] type[Put]  key[U]> ..... output[4] exception[null] 
Place(1) [Transaction] Tx(600023) and Tx(200021) no overlap
Place(1) [Transaction] Tx(600023) and Tx(200021) conflicting=[false] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [Transaction] Tx(600023) and Tx(300022) no overlap
Place(1) [Transaction] Tx(600023) and Tx(300022) conflicting=[false] ...
Place(1) [Transaction] Tx(600023) and Tx(400021) overlapped keys = U,
Place(1) [Transaction] Tx(600023) and Tx(400021) conflict in key [U]
Place(1) [Transaction] Tx(600023) and Tx(400021) conflicting=[true] ...
Place(1) [Replica(1)] ConflictReport for transaction[600023] is::: ConflictReport with active transactions: 400021,   and maxTransId is: 600023
Place(1) [Replica(1)] TransId[600023] Abort other transaction and become ready to commit ...
Place(2) [MapRequest] TransId[300022] From [0] adding response for request === <request TransactionId[300022] ReqId[69] type[Put]  key[T]> ..... output[5] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[500021] clientId[4] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300022] clientId[2] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400021] clientId[3] ...
Place(2) [Transaction] Tx(600023) and Tx(200021) no overlap
Place(2) [Transaction] Tx(600023) and Tx(200021) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Transaction] Tx(600023) and Tx(500021) no overlap
Place(2) [Transaction] Tx(600023) and Tx(500021) conflicting=[false] ...
Place(2) [Transaction] Tx(600023) and Tx(400021) overlapped keys = U,
Place(2) [Transaction] Tx(600023) and Tx(400021) conflict in key [U]
Place(2) [Transaction] Tx(600023) and Tx(400021) conflicting=[true] ...
Place(2) [Replica(2)] ConflictReport for transaction[600023] is::: ConflictReport with active transactions: 400021,   and maxTransId is: 600023
Place(2) [Replica(2)] TransId[600023] Abort other transaction and become ready to commit ...
Place(5) [MapRequest] TransId[600023] From [1] adding vote response [1] ...
Place(5) [MapRequest] TransId[600023] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [1] adding vote response completed ...
Place(1) [MapRequest] TransId[200021] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200021] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(4) [MapRequest] TransId[500021] From [3] adding response for request === <request TransactionId[500021] ReqId[62] type[Put]  key[D]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300022] From [1] adding response for request === <request TransactionId[300022] ReqId[69] type[Put]  key[T]> ..... output[5] exception[null] 
Place(4) [MapRequest] TransId[500021] From [2] adding response for request === <request TransactionId[500021] ReqId[62] type[Put]  key[D]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400021] From [2] adding response for request === <request TransactionId[400021] ReqId[62] type[Put]  key[U]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600023] From [2] adding vote response [1] ...
Place(5) [MapRequest] TransId[600023] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(5) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100022] From [5] adding response for request === <request TransactionId[100022] ReqId[69] type[Put]  key[L]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100022] From [4] adding response for request === <request TransactionId[100022] ReqId[69] type[Put]  key[L]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200021] ReqId[65] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200021] ReqId[65] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300022]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300022] ReqId[70] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300022] ReqId[70] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300022]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400021]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400021] ReqId[63] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400021] ReqId[63] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400021]  { await ... 
Place(1) [MapRequest] Completing request: <request TransactionId[200021] ReqId[65] type[Commit]  key[null]>  Exception: null
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ResilientMapImpl] put[500021]          ... released }    Success=true
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500021] ReqId[63] type[PrepareCommit]  key[null]>
Place(4) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[500021] ReqId[63] type[PrepareCommit]  key[null]>
Place(1) [Replica(1)] TransId[200021] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (C,5) ...
Place(0) [ResilientMapImpl] put[100022]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ResilientMapImpl] commitTransaction[500021]  { await ... 
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100022] ReqId[70] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100022] ReqId[70] type[PrepareCommit]  key[null]>
Place(1) [Replica(1)] (ready) Transaction [400021]  is not active. Return Not Ready ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [Transaction] Tx(500021) and Tx(200021) no overlap
Place(2) [Transaction] Tx(500021) and Tx(200021) conflicting=[false] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600023] ReqId[69] type[Commit]  key[null]>
Place(5) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[600023] ReqId[69] type[Commit]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600023] ReqId[69] type[Commit]  key[null]>  Exception: null
Place(2) [Transaction] Tx(500021) and Tx(600023) no overlap
Place(2) [Transaction] Tx(500021) and Tx(600023) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[500021] is null
Place(4) [Partition] Partition [4]  GET_V (L) ...
Place(4) [Replica(4)] ConflictReport for transaction[100022] is null
Place(2) [Replica(2)] TransId[200021] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (C,5) ...
Place(0) [ResilientMapImpl] commitTransaction[100022]  { await ... 
Place(5) [Partition] Partition [4]  GET_V (L) ...
Place(0) [Partition] Partition [0]  GET_V (T) ...
Place(0) [Replica(0)] ConflictReport for transaction[300022] is null
Place(5) [Replica(5)] ConflictReport for transaction[100022] is null
Place(2) [Replica(2)] (ready) Transaction [400021]  is not active. Return Not Ready ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] ConflictReport for transaction[500021] is null
Place(3) [MapRequest] TransId[400021] From [1] adding vote response [0] ...
Place(3) [MapRequest] TransId[400021] Waiting for votes from places [2,] commitStatus is[CancelCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(1) [Replica(1)] TransId[600023] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (U,5) ...
Place(2) [MapRequest] TransId[300022] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300022] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(4) [MapRequest] TransId[500021] From [3] adding vote response [1] ...
Place(4) [MapRequest] TransId[500021] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(4) [MapRequest] From [3] adding vote response completed ...
Place(1) [Partition] Partition [0]  GET_V (T) ...
Place(1) [Replica(1)] ConflictReport for transaction[300022] is null
Place(0) [MapRequest] TransId[100022] From [4] adding vote response [1] ...
Place(0) [MapRequest] TransId[100022] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [4] adding vote response completed ...
Place(2) [Replica(2)] TransId[600023] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (U,5) ...
Place(4) [MapRequest] TransId[500021] From [2] adding vote response [1] ...
Place(4) [MapRequest] TransId[500021] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(4) [MapRequest] From [2] adding vote response completed ...
Place(2) [MapRequest] TransId[300022] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300022] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(3) [MapRequest] TransId[400021] From [2] adding vote response [0] ...
Place(3) [MapRequest] TransId[400021] Waiting for votes from places [] commitStatus is[CancelCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100022] From [5] adding vote response [1] ...
Place(0) [MapRequest] TransId[100022] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [5] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300022] ReqId[70] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300022] ReqId[70] type[Commit]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400021] ReqId[63] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(3) [ResilientMapImpl] commitTransaction[400021]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400021] ReqId[64] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400021] ReqId[64] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300022] ReqId[70] type[Commit]  key[null]>  Exception: null
Place(3) [MapRequest] Completing request: <request TransactionId[400021] ReqId[64] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400021]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200021]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200022]  { await ... 
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200022] ReqId[66] type[Get]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200022] ReqId[66] type[Get]  key[D]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100022] ReqId[70] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100022] ReqId[70] type[Commit]  key[null]>
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500021] ReqId[63] type[Commit]  key[null]>
Place(4) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[500021] ReqId[63] type[Commit]  key[null]>
Place(4) [MapRequest] Completing request: <request TransactionId[500021] ReqId[63] type[Commit]  key[null]>  Exception: null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600023]          ... released }    Success=true
Place(5) [ResilientMapImpl] get[600024]  { await ... 
Place(2) [Replica(2)] TransId[500021] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(2) [Partition] Partition [2]  PUT (D,3) ...
Place(0) [MapRequest] Completing request: <request TransactionId[100022] ReqId[70] type[Commit]  key[null]>  Exception: null
Place(4) [Replica(4)] TransId[100022] Applying commit changes:=> InitVersion[4] value[6] partitionId[4] readOnly[false] deleted[false]

Place(4) [Partition] Partition [4]  PUT (L,6) ...
Place(1) [Replica(1)] calling abortNoResponse for transactionId[400021] ...
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600024] ReqId[70] type[Get]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600024] ReqId[70] type[Get]  key[R]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200022] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400021] ...
Place(1) [Replica(1)] TransId[300022] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (T,6) ...
Place(5) [Replica(5)] TransId[100022] Applying commit changes:=> InitVersion[4] value[6] partitionId[4] readOnly[false] deleted[false]

Place(5) [Partition] Partition [4]  PUT (L,6) ...
Place(3) [Replica(3)] TransId[500021] Applying commit changes:=> InitVersion[1] value[3] partitionId[2] readOnly[false] deleted[false]

Place(3) [Partition] Partition [2]  PUT (D,3) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200022] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(4) [Replica(4)] getOrAddActiveTransaction transId[600024] clientId[5] ...
Place(4) [Partition] Partition [4]  GET_V (R) ...
Place(1) [MapRequest] TransId[200022] From [2] adding response for request === <request TransactionId[200022] ReqId[66] type[Get]  key[D]> ..... output[3] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600024] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [MapRequest] TransId[600024] From [5] adding response for request === <request TransactionId[600024] ReqId[70] type[Get]  key[R]> ..... output[4] exception[null] 
Place(0) [Replica(0)] TransId[300022] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (T,6) ...
Place(1) [MapRequest] TransId[200022] From [3] adding response for request === <request TransactionId[200022] ReqId[66] type[Get]  key[D]> ..... output[3] exception[null] 
Place(5) [MapRequest] TransId[600024] From [4] adding response for request === <request TransactionId[600024] ReqId[70] type[Get]  key[R]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400021]          ... released }    Success=true
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200022]          ... released }    Success=true
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200022] ReqId[67] type[Put]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200022] ReqId[67] type[Put]  key[D]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300022]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300023]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300023] ReqId[71] type[Get]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300023] ReqId[71] type[Get]  key[Q]>
Place(3) [ResilientMapImpl] sleeping for 2ms
Place(4) [ResilientMapImpl] commitTransaction[500021]          ... released }    Success=true
Place(4) [ResilientMapImpl] get[500022]  { await ... 
Place(4) [ReplicaClient] Check pending transactions new iteration ...
Place(4) [ReplicaClient] Key[X] ParitionId: 4 Replicas[4  5   ]
Place(4) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(4) [ReplicaClient] Added Pending Request <request TransactionId[500022] ReqId[64] type[Get]  key[X]>
Place(4) [ReplicaClient] Submitting request: <request TransactionId[500022] ReqId[64] type[Get]  key[X]>
Place(1) [ResilientMapImpl] put[200022]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100022]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100023]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200022] clientId[1] ...
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600024]          ... released }    Success=true
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100023] ReqId[71] type[Get]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100023] ReqId[71] type[Get]  key[Y]>
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600024] ReqId[71] type[Put]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600024] ReqId[71] type[Put]  key[R]>
Place(5) [ResilientMapImpl] put[600024]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600024] clientId[5] ...
Place(5) [MapRequest] TransId[600024] From [5] adding response for request === <request TransactionId[600024] ReqId[71] type[Put]  key[R]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300023] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200022] clientId[1] ...
Place(1) [MapRequest] TransId[200022] From [2] adding response for request === <request TransactionId[200022] ReqId[67] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100023] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100023] From [0] adding response for request === <request TransactionId[100023] ReqId[71] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(3) [ResilientMapImpl] get[400022]  { await ... 
Place(2) [MapRequest] TransId[300023] From [3] adding response for request === <request TransactionId[300023] ReqId[71] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300023] ReqId[71] type[Get]  key[Q]>  Exception: x10.lang.DeadPlaceException: DeadPlaceException at Place(4)
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[600024] ClientPlace [5] isDead[false] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600024] ReqId[71] type[Put]  key[R]>  Exception: x10.lang.DeadPlaceException: DeadPlaceException at Place(4)
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100023] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400022] ReqId[65] type[Get]  key[U]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400022] ReqId[65] type[Get]  key[U]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200022] From [3] adding response for request === <request TransactionId[200022] ReqId[67] type[Put]  key[D]> ..... output[3] exception[null] 
Place(5) [ResilientMapImpl] put[600024]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600024] ReqId[72] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= false
Place(5) [MapRequest] Completing request: <request TransactionId[600024] ReqId[72] type[Abort]  key[null]>  Exception: x10.lang.DeadPlaceException: DeadPlaceException at Place(4)
Place(5) [ReplicaClient] complete request with dead place exception= <request TransactionId[600024] ReqId[72] type[Abort]  key[null]>
Place(5) [ResilientMapImpl] abortTransaction[600024]  { await ... 
Place(5) [DataStore] clientNotifyDeadPlaces: 4,
Place(5) [DataStore] reporting dead places to LEADER: Place(3)
Place(2) [ResilientMapImpl] get[300023]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300023] ReqId[72] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= false
Place(2) [MapRequest] Completing request: <request TransactionId[300023] ReqId[72] type[Abort]  key[null]>  Exception: x10.lang.DeadPlaceException: DeadPlaceException at Place(4)
Place(2) [ReplicaClient] complete request with dead place exception= <request TransactionId[300023] ReqId[72] type[Abort]  key[null]>
Place(2) [ResilientMapImpl] abortTransaction[300023]  { await ... 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[200022] ClientPlace [1] isDead[false] ...
Place(2) [DataStore] clientNotifyDeadPlaces: 4,
Place(2) [DataStore] reporting dead places to LEADER: Place(3)
Place(0) [MapRequest] TransId[100023] From [5] adding response for request === <request TransactionId[100023] ReqId[71] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400022] clientId[3] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100023]          ... released }    Success=true
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100023] ReqId[72] type[Put]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100023] ReqId[72] type[Put]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100023] clientId[0] ...
Place(0) [MapRequest] TransId[100023] From [0] adding response for request === <request TransactionId[100023] ReqId[72] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[200022] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[300023] ClientPlace [2] isDead[false] ...
Place(3) [MigrationHandler] adding dead place notification from client [5]
Place(3) [MigrationHandler] starting an async migration request ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400022] clientId[3] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(0) [ResilientMapImpl] put[100023]  { await ... 
Place(3) [MigrationHandler] processing migration requests ...
Place(3) [MigrationHandler] nextMigrationRequest is: ImpactedClients=[5,]  deadPlaces[4,]
Place(3) [MigrationHandler] new iteration for processing migration requests ...
Place(3) [PartitionTable] Node partitions 
Node0->>> Part-0 - 4 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-
Node5->>> Part-4 - 5 - 3 - 
Place(3) [PartitionTable] Place partitions 
Place0->>> Part-0 - 4 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place5->>> Part-4 - 5 - 3 - 
%%%   Old Table   %%%
Place(3) [PartitionTable] Parition places
0 => 0 - 1 - 
1 => 1 - 2 - 
2 => 2 - 3 - 
3 => 3 - 4 - 
4 => 4 - 5 - 
5 => 5 - 0 - 
%%%   New Table   %%%
Place(3) [PartitionTable] Parition places
0 => 0 - 1 - 
1 => 1 - 2 - 
2 => 2 - 3 - 
3 => 3 - 5 - 
4 => 5 - 0 - 
5 => 5 - 0 - 
%%%%%%%%%%%%%%%%%%%%%%
Place(3) [PartitionTable] Printing migration requests:
Place(3) [PartitionTable] partitionId:3=> old[3,]  newPlace(5) [Replica(5)] getOrAddActiveTransaction transId[100023] clientId[0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
[5,] 
Place(3) [PartitionTable] partitionId:4=> old[5,]  new[0,] 
Place(3) [MigrationHandler] Handling migration request: partitionId:3=> old[3,]  new[5,] 
Place(3) [MigrationHandler] Copying partition from[3] to[5,] ... 
Place(3) [MigrationHandler] migration request for partitionId[3] started at [1463981285736]
Place(3) [MigrationHandler] adding dead place notification from client [2]
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] Handling migration request: partitionId:4=> old[5,]  new[0,] 
Place(3) [MigrationHandler] Copying partition from[5] to[0,] ... 
Place(3) [MigrationHandler] migration request for partitionId[4] started at [1463981285736]
Place(3) [MapRequest] TransId[400022] From [2] adding response for request === <request TransactionId[400022] ReqId[65] type[Get]  key[U]> ..... output[5] exception[null] 
Place(2) [ResilientMapImpl] abortTransaction[300023]          ... released }    Success=false
Place(2) [ResilientMapImpl] sleeping for 11ms
Place(0) [MapRequest] TransId[100023] From [5] adding response for request === <request TransactionId[100023] ReqId[72] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(3) [MapRequest] TransId[400022] From [1] adding response for request === <request TransactionId[400022] ReqId[65] type[Get]  key[U]> ..... output[5] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100023]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100023] ReqId[73] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100023] ReqId[73] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100023]  { await ... 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [ResilientMapImpl] put[200022]          ... released }    Success=true
Place(1) [Replica(1)] check transaction client  TransId=[400022] ClientPlace [3] isDead[false] ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200022] ReqId[68] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200022] ReqId[68] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200022]  { await ... 
Place(5) [Replica(5)] copyPartitionsTo partitionId[4] to places [0,] ...
Place(5) [Replica(5)] copyPartitionsTo - obtained transactionsLock ...
Place(5) [Replica(5)] copyPartitionsTo - partition ready to migrate ...
Place(5) [ResilientMapImpl] abortTransaction[600024]          ... released }    Success=false
Place(5) [ResilientMapImpl] sleeping for 2ms
Place(3) [Replica(3)] copyPartitionsTo partitionId[3] to places [5,] ...
Place(3) [Replica(3)] copyPartitionsTo - obtained transactionsLock ...
Place(3) [Replica(3)] copyPartitionsTo - partition ready to migrate ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(2) [ResilientMapImpl] get[300024]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Transaction] Tx(200022) and Tx(400022) no overlap
Place(2) [Transaction] Tx(200022) and Tx(400022) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[200022] is null
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(2) [ReplicaClient] Dead places already notified ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300024] ReqId[73] type[Get]  key[Q]>
Place(2) [ReplicaClient] Request Held until partition table is updated: <request TransactionId[300024] ReqId[73] type[Get]  key[Q]>
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Replica(0)] ConflictReport for transaction[100023] is null
Place(0) [MapRequest] TransId[100023] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100023] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(5) [ResilientMapImpl] get[600025]  { await ... 
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(5) [ReplicaClient] Dead places already notified ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600025] ReqId[73] type[Get]  key[R]>
Place(5) [ReplicaClient] Request Held until partition table is updated: <request TransactionId[600025] ReqId[73] type[Get]  key[R]>
Place(1) [MapRequest] TransId[200022] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200022] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400022]          ... released }    Success=true
Place(3) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400022] ReqId[66] type[Put]  key[U]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400022] ReqId[66] type[Put]  key[U]>
Place(3) [ResilientMapImpl] put[400022]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400022] clientId[3] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400022] clientId[3] ...
Place(0) [Replica(0)] Adding partition , waiting for partitions lock ...
Place(0) [Replica(0)] Adding partition succeeded ...
Place(3) [MapRequest] TransId[400022] From [1] adding response for request === <request TransactionId[400022] ReqId[66] type[Put]  key[U]> ..... output[5] exception[null] 
Place(3) [MapRequest] TransId[400022] From [2] adding response for request === <request TransactionId[400022] ReqId[66] type[Put]  key[U]> ..... output[5] exception[null] 
Place(5) [Replica(5)] Adding partition , waiting for partitions lock ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400022]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400022] ReqId[67] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400022] ReqId[67] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400022]  { await ... 
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [Replica(1)] ConflictReport for transaction[400022] is null
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100023] ClientPlace [0] isDead[false] ...
Place(2) [Transaction] Tx(400022) and Tx(200022) no overlap
Place(2) [Transaction] Tx(400022) and Tx(200022) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Replica(2)] ConflictReport for transaction[400022] is null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[200022] ClientPlace [1] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[400022] ClientPlace [3] isDead[false] ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100023] ReqId[73] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100023]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100023] ReqId[74] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100023] ReqId[74] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100023] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100023] ReqId[74] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100023]  { await ... 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[400022] ClientPlace [3] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200022] ReqId[68] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200022]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200022] ReqId[69] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200022] ReqId[69] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200022] ReqId[69] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200022]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[200022] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100023]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 0ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300024] ReqId[73] type[Get]  key[Q]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] get[300024]          ... released }    Success=false
Place(2) [ReplicaClient] abort successfully because replicas are null for request: <request TransactionId[300024] ReqId[74] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300024] ReqId[74] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300024]  { await ... 
Place(2) [ResilientMapImpl] abortTransaction[300024]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 0ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200022]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 14ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600025] ReqId[73] type[Get]  key[R]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] get[600025]          ... released }    Success=false
Place(5) [ReplicaClient] abort successfully because replicas are null for request: <request TransactionId[600025] ReqId[74] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600025] ReqId[74] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600025]  { await ... 
Place(5) [ResilientMapImpl] abortTransaction[600025]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 17ms
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100023] ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100024]  { await ... 
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100024] ReqId[75] type[Get]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100024] ReqId[75] type[Get]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100024] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [MapRequest] TransId[100024] From [0] adding response for request === <request TransactionId[100024] ReqId[75] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(2) [ResilientMapImpl] get[300025]  { await ... 
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[4  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(2) [ReplicaClient] Dead places already notified ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300025] ReqId[75] type[Get]  key[Q]>
Place(2) [ReplicaClient] Request Held until partition table is updated: <request TransactionId[300025] ReqId[75] type[Get]  key[Q]>
Place(1) [ResilientMapImpl] get[200023]  { await ... 
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ResilientMapImpl] get[600026]  { await ... 
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200023] ReqId[70] type[Get]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200023] ReqId[70] type[Get]  key[D]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200023] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(1) [MapRequest] TransId[200023] From [2] adding response for request === <request TransactionId[200023] ReqId[70] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100024] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] waiting for migration to complete ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400022] ReqId[67] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400022]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400022] ReqId[68] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400022] ReqId[68] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400022] ReqId[68] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400022]  { await ... 
Place(3) [MapRequest] TransId[400022] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400022] From [1] VOTE IGNORED ...
Place(3) [MapRequest] TransId[400022] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400022] From [2] VOTE IGNORED ...
Place(3) [MigrationHandler] migration request for partitionId[4] is complete
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200022] ...
Place(5) [Replica(5)] Adding partition succeeded ...
Place(5) [Replica(5)] copyPartitionsTo partitionId[4] to places [0,] succeeded.  Broke infinite loop...
Place(5) [Replica(5)] check transaction client  TransId=[600024] ClientPlace [5] isDead[false] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100024] clientId[0] ...
Place(5) [Replica(5)] check transaction client  TransId=[100023] ClientPlace [0] isDead[false] ...
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[4  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(5) [ReplicaClient] Dead places already notified ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600026] ReqId[75] type[Get]  key[R]>
Place(5) [ReplicaClient] Request Held until partition table is updated: <request TransactionId[600026] ReqId[75] type[Get]  key[R]>
Place(5) [Transaction] Tx(100023) and Tx(600024) no overlap
Place(5) [Transaction] Tx(100023) and Tx(600024) conflicting=[false] ...
Place(5) [Replica(5)] ConflictReport for transaction[100023] is null
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(3) [MigrationHandler] migration request for partitionId[3] is complete
Place(3) [Replica(3)] copyPartitionsTo partitionId[3] to places [5,] succeeded.  Broke infinite loop...
Place(3) [Replica(3)] check transaction client  TransId=[200022] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[300023] ClientPlace [2] isDead[false] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200023] clientId[1] ...
Place(3) [Transaction] Tx(200022) and Tx(300023) no overlap
Place(3) [Transaction] Tx(200022) and Tx(300023) conflicting=[false] ...
Place(3) [Replica(3)] ConflictReport for transaction[200022] is null
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(0) [MapRequest] TransId[100023] From [5] adding vote response [1] ...
Place(0) [MapRequest] TransId[100024] From [5] adding response for request === <request TransactionId[100024] ReqId[75] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100023] From [5] VOTE IGNORED ...
Place(1) [MapRequest] TransId[200023] From [3] adding response for request === <request TransactionId[200023] ReqId[70] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [Replica(1)] calling abortNoResponse for transactionId[400022] ...
Place(1) [MapRequest] TransId[200022] From [3] adding vote response [1] ...
Place(1) [MapRequest] TransId[200022] From [3] VOTE IGNORED ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400022] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[200023] ClientPlace [1] isDead[false] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400022] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100024]          ... released }    Success=true
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100024] ReqId[76] type[Put]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100024] ReqId[76] type[Put]  key[Y]>
Place(3) [MigrationHandler] Migration completed with successStatus = [true] ...
Place(3) [MigrationHandler] nextMigrationRequest is: ImpactedClients=[2,]  deadPlaces[4,]
Place(3) [MigrationHandler] new iteration for processing migration requests ...
Place(3) [DataStore] Updating Leader Status ...
Place(3) [DataStore] Updating Leader Status - topology updated ...
Place(3) [DataStore] Updating Leader Status - partition table updated ...
Place(3) [DataStore] Changing the deputy leader ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200023]          ... released }    Success=true
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100024] clientId[0] ...
Place(0) [ResilientMapImpl] put[100024]  { await ... 
Place(0) [MapRequest] TransId[100024] From [0] adding response for request === <request TransactionId[100024] ReqId[76] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200023] ReqId[71] type[Put]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200023] ReqId[71] type[Put]  key[D]>
Place(3) [PartitionTable] Node partitions 
Node0->>> Part-0 - 4 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-
Node5->>> Part-4 - 5 - 3 - 
Place(3) [PartitionTable] Place partitions 
Place0->>> Part-0 - 4 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place5->>> Part-4 - 5 - 3 - 
Place(3) [DataStore] Topology and Partition Table Updated , leader changed from[Place(3)] to[Place(3)], and deputyLeader changed from [Place(3)] to [Place(3)] ...
Place(3) [DataStore] Updating impacted client places ...
Place(1) [ResilientMapImpl] put[200023]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200023] clientId[1] ...
Place(1) [MapRequest] TransId[200023] From [2] adding response for request === <request TransactionId[200023] ReqId[71] type[Put]  key[D]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100024] clientId[0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400022]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 17ms
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200023] clientId[1] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200023] From [3] adding response for request === <request TransactionId[200023] ReqId[71] type[Put]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200023]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200023] ReqId[72] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200023] ReqId[72] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200023]  { await ... 
Place(2) [PartitionTable] Node partitions 
Node0->>> Part-0 - 4 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-
Node5->>> Part-4 - 5 - 3 - 
Place(2) [PartitionTable] Place partitions 
Place0->>> Part-0 - 4 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place3->>> Part-2 - 3 - 
Place(2) [Replica(2)] ConflictReport for transaction[200023] is null
Place5->>> Part-4 - 5 - 3 - 
Place(2) [DataStore] Topology and Partition Table Updated , leader changed from[Place(3)] to[Place(3)], and deputyLeader changed from [Place(4)] to [Place(3)] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200023] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200023] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] TransId[100024] From [5] adding response for request === <request TransactionId[100024] ReqId[76] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(5) [PartitionTable] Node partitions 
Node0->>> Part-0 - 4 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-
Node5->>> Part-4 - 5 - 3 - 
Place(5) [PartitionTable] Place partitions 
Place0->>> Part-0 - 4 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place5->>> Part-4 - 5 - 3 - 
Place(5) [DataStore] Topology and Partition Table Updated , leader changed from[Place(3)] to[Place(3)], and deputyLeader changed from [Place(4)] to [Place(3)] ...
Place(3) [ResilientMapImpl] get[400023]  { await ... 
Place(3) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400023] ReqId[69] type[Get]  key[U]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400023] ReqId[69] type[Get]  key[U]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300025] ReqId[75] type[Get]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300025] ReqId[75] type[Get]  key[Q]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100024]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100024] ReqId[77] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100024] ReqId[77] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Replica(0)] ConflictReport for transaction[100024] is null
Place(0) [MapRequest] TransId[100024] From [0] adding vote response [1] ...
Place(0) [ResilientMapImpl] commitTransaction[100024]  { await ... 
Place(0) [MapRequest] TransId[100024] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400023] clientId[3] ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400023] clientId[3] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600026] ReqId[75] type[Get]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600026] ReqId[75] type[Get]  key[R]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300025] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [MapRequest] TransId[400023] From [2] adding response for request === <request TransactionId[400023] ReqId[69] type[Get]  key[U]> ..... output[5] exception[null] 
Place(3) [MapRequest] TransId[400023] From [1] adding response for request === <request TransactionId[400023] ReqId[69] type[Get]  key[U]> ..... output[5] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] TransId[300025] From [3] adding response for request === <request TransactionId[300025] ReqId[75] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600026] clientId[5] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300025] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(5) [MapRequest] TransId[600026] From [0] adding response for request === <request TransactionId[600026] ReqId[75] type[Get]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600026] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [MapRequest] TransId[600026] From [5] adding response for request === <request TransactionId[600026] ReqId[75] type[Get]  key[R]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300025] From [5] adding response for request === <request TransactionId[300025] ReqId[75] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400023]          ... released }    Success=true
Place(3) [ReplicaClient] Key[U] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400023] ReqId[70] type[Put]  key[U]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400023] ReqId[70] type[Put]  key[U]>
Place(3) [ResilientMapImpl] put[400023]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400023] clientId[3] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400023] clientId[3] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300025]          ... released }    Success=true
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300025] ReqId[76] type[Put]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300025] ReqId[76] type[Put]  key[Q]>
Place(2) [ResilientMapImpl] put[300025]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300025] clientId[2] ...
Place(2) [MapRequest] TransId[300025] From [5] adding response for request === <request TransactionId[300025] ReqId[76] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [Replica(1)] check transaction client  TransId=[400023] ClientPlace [3] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600026]          ... released }    Success=true
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600026] ReqId[76] type[Put]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600026] ReqId[76] type[Put]  key[R]>
Place(5) [ResilientMapImpl] put[600026]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600026] clientId[5] ...
Place(5) [MapRequest] TransId[600026] From [5] adding response for request === <request TransactionId[600026] ReqId[76] type[Put]  key[R]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600026] clientId[5] ...
Place(5) [MapRequest] TransId[600026] From [0] adding response for request === <request TransactionId[600026] ReqId[76] type[Put]  key[R]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300025] clientId[2] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400023] From [1] adding response for request === <request TransactionId[400023] ReqId[70] type[Put]  key[U]> ..... output[5] exception[null] 
Place(3) [MapRequest] TransId[400023] From [2] adding response for request === <request TransactionId[400023] ReqId[70] type[Put]  key[U]> ..... output[5] exception[null] 
Place(2) [MapRequest] TransId[300025] From [3] adding response for request === <request TransactionId[300025] ReqId[76] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600026]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600026] ReqId[77] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600026] ReqId[77] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600026]  { await ... 
Place(0) [Transaction] Tx(600026) and Tx(100024) no overlap
Place(0) [Transaction] Tx(600026) and Tx(100024) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[600026] is null
Place(5) [MapRequest] TransId[600026] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600026] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400023]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400023] ReqId[71] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400023] ReqId[71] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400023]  { await ... 
Place(2) [Transaction] Tx(400023) and Tx(200023) no overlap
Place(2) [Transaction] Tx(400023) and Tx(200023) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (U) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] ConflictReport for transaction[400023] is null
Place(2) [ResilientMapImpl] put[300025]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300025] ReqId[77] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300025] ReqId[77] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300025]  { await ... 
Place(3) [MapRequest] TransId[400023] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400023] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Partition] Partition [1]  GET_V (U) ...
Place(1) [Replica(1)] ConflictReport for transaction[400023] is null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400023] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400023] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400023] ReqId[71] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400023] ReqId[71] type[Commit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400023] ReqId[71] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[400023] Applying commit changes:=> InitVersion[4] value[6] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (U,6) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100024] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[600026] ClientPlace [5] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400023]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400024]  { await ... 
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400024] ReqId[72] type[Get]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400024] ReqId[72] type[Get]  key[X]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400024] clientId[3] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400024] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(3) [MapRequest] TransId[400024] From [5] adding response for request === <request TransactionId[400024] ReqId[72] type[Get]  key[X]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400024] From [0] adding response for request === <request TransactionId[400024] ReqId[72] type[Get]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] check transaction client  TransId=[600024] ClientPlace [5] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[300025] ClientPlace [2] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[400024] ClientPlace [3] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[100024] ClientPlace [0] isDead[false] ...
Place(5) [Replica(5)] check transaction client  TransId=[600026] ClientPlace [5] isDead[false] ...
Place(3) [Replica(3)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] check transaction client  TransId=[200023] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] check transaction client  TransId=[300025] ClientPlace [2] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400023] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[200023] ClientPlace [1] isDead[false] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] TransId[400023] Applying commit changes:=> InitVersion[4] value[6] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (U,6) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400024]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400024] ReqId[73] type[Put]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400024] ReqId[73] type[Put]  key[X]>
Place(3) [ResilientMapImpl] put[400024]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400024] clientId[3] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400024] clientId[3] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400024] From [5] adding response for request === <request TransactionId[400024] ReqId[73] type[Put]  key[X]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400024] From [0] adding response for request === <request TransactionId[400024] ReqId[73] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400024]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400024] ReqId[74] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400024] ReqId[74] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400024]  { await ... 
Place(0) [Transaction] Tx(400024) and Tx(100024) no overlap
Place(0) [Transaction] Tx(400024) and Tx(100024) conflicting=[false] ...
Place(0) [Transaction] Tx(400024) and Tx(600026) no overlap
Place(0) [Transaction] Tx(400024) and Tx(600026) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[400024] is null
Place(3) [MapRequest] TransId[400024] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400024] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200023] ReqId[72] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200023]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200023] ReqId[73] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200023] ReqId[73] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200023] ReqId[73] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200023]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[200023] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200023] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100024] ReqId[77] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100024]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100024] ReqId[78] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100024] ReqId[78] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100024] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100024] ReqId[78] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100024]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100024] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200023]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 11ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100024]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 6ms
Place(1) [ResilientMapImpl] get[200024]  { await ... 
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200024] ReqId[74] type[Get]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200024] ReqId[74] type[Get]  key[D]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200024] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(1) [MapRequest] TransId[200024] From [3] adding response for request === <request TransactionId[200024] ReqId[74] type[Get]  key[D]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200024] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200024] From [2] adding response for request === <request TransactionId[200024] ReqId[74] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [ResilientMapImpl] get[100025]  { await ... 
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100025] ReqId[79] type[Get]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100025] ReqId[79] type[Get]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100025] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [MapRequest] TransId[100025] From [0] adding response for request === <request TransactionId[100025] ReqId[79] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100025] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [MapRequest] TransId[100025] From [5] adding response for request === <request TransactionId[100025] ReqId[79] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200024]          ... released }    Success=true
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200024] ReqId[75] type[Put]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200024] ReqId[75] type[Put]  key[D]>
Place(1) [ResilientMapImpl] put[200024]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200024] clientId[1] ...
Place(1) [MapRequest] TransId[200024] From [2] adding response for request === <request TransactionId[200024] ReqId[75] type[Put]  key[D]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200024] clientId[1] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200024] From [3] adding response for request === <request TransactionId[200024] ReqId[75] type[Put]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100025]          ... released }    Success=true
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100025] ReqId[80] type[Put]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100025] ReqId[80] type[Put]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100025] clientId[0] ...
Place(0) [MapRequest] TransId[100025] From [0] adding response for request === <request TransactionId[100025] ReqId[80] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100025]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200024]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200024] ReqId[76] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200024] ReqId[76] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200024]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[200024] is null
Place(1) [MapRequest] TransId[200024] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200024] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600026] ReqId[77] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100025] clientId[0] ...
Place(5) [ResilientMapImpl] commitTransaction[600026]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600026] ReqId[78] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600026] ReqId[78] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600026] ReqId[78] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600026]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600026] ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600026] ...
Place(0) [MapRequest] TransId[100025] From [5] adding response for request === <request TransactionId[100025] ReqId[80] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300025] ReqId[77] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300025]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300025] ReqId[78] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300025] ReqId[78] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300025] ReqId[78] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300025]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300025] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100025]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100025] ReqId[81] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100025] ReqId[81] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100025) and Tx(400024) no overlap
Place(0) [Transaction] Tx(100025) and Tx(400024) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100025]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Replica(0)] ConflictReport for transaction[100025] is null
Place(0) [MapRequest] TransId[100025] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100025] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600026]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 9ms
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300025] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300025]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 6ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600027]  { await ... 
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600027] ReqId[79] type[Get]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600027] ReqId[79] type[Get]  key[R]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600027] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [MapRequest] TransId[600027] From [5] adding response for request === <request TransactionId[600027] ReqId[79] type[Get]  key[R]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600027] clientId[5] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(5) [MapRequest] TransId[600027] From [0] adding response for request === <request TransactionId[600027] ReqId[79] type[Get]  key[R]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300026]  { await ... 
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300026] ReqId[79] type[Get]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300026] ReqId[79] type[Get]  key[Q]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300026] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300026] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(2) [MapRequest] TransId[300026] From [5] adding response for request === <request TransactionId[300026] ReqId[79] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300026] From [3] adding response for request === <request TransactionId[300026] ReqId[79] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[400024] ClientPlace [3] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100025] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[600027] ClientPlace [5] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600027]          ... released }    Success=true
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600027] ReqId[80] type[Put]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600027] ReqId[80] type[Put]  key[R]>
Place(5) [ResilientMapImpl] put[600027]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600027] clientId[5] ...
Place(5) [MapRequest] TransId[600027] From [5] adding response for request === <request TransactionId[600027] ReqId[80] type[Put]  key[R]> ..... output[4] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[200024] ClientPlace [1] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300026]          ... released }    Success=true
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300026] ReqId[80] type[Put]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300026] ReqId[80] type[Put]  key[Q]>
Place(2) [ResilientMapImpl] put[300026]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600027] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300026] clientId[2] ...
Place(2) [MapRequest] TransId[300026] From [3] adding response for request === <request TransactionId[300026] ReqId[80] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600027] From [0] adding response for request === <request TransactionId[600027] ReqId[80] type[Put]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300026] clientId[2] ...
Place(2) [MapRequest] TransId[300026] From [5] adding response for request === <request TransactionId[300026] ReqId[80] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600027]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600027] ReqId[81] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600027] ReqId[81] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600027]  { await ... 
Place(0) [Transaction] Tx(600027) and Tx(100025) no overlap
Place(0) [Transaction] Tx(600027) and Tx(100025) conflicting=[false] ...
Place(0) [Transaction] Tx(600027) and Tx(400024) no overlap
Place(0) [Transaction] Tx(600027) and Tx(400024) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[600027] is null
Place(5) [MapRequest] TransId[600027] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600027] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300026]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300026] ReqId[81] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300026] ReqId[81] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300026]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400024] ReqId[74] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400024]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400024] ReqId[75] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400024] ReqId[75] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400024] ReqId[75] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400024]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[400024] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400024] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400024]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 9ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400025]  { await ... 
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400025] ReqId[76] type[Get]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400025] ReqId[76] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400025] clientId[3] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(3) [MapRequest] TransId[400025] From [0] adding response for request === <request TransactionId[400025] ReqId[76] type[Get]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400025] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(3) [MapRequest] TransId[400025] From [5] adding response for request === <request TransactionId[400025] ReqId[76] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400025]          ... released }    Success=true
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400025] ReqId[77] type[Put]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400025] ReqId[77] type[Put]  key[X]>
Place(3) [ResilientMapImpl] put[400025]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400025] clientId[3] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400025] clientId[3] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400025] From [0] adding response for request === <request TransactionId[400025] ReqId[77] type[Put]  key[X]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400025] From [5] adding response for request === <request TransactionId[400025] ReqId[77] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400025]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400025] ReqId[78] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400025] ReqId[78] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400025]  { await ... 
Place(0) [Transaction] Tx(400025) and Tx(100025) no overlap
Place(0) [Transaction] Tx(400025) and Tx(100025) conflicting=[false] ...
Place(0) [Transaction] Tx(400025) and Tx(600027) no overlap
Place(0) [Transaction] Tx(400025) and Tx(600027) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[400025] is null
Place(3) [MapRequest] TransId[400025] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400025] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200024] ReqId[76] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200024]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200024] ReqId[77] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200024] ReqId[77] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200024] ReqId[77] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200024]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[200024] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200024] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100025] ReqId[81] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100025]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100025] ReqId[82] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100025] ReqId[82] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100025] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100025] ReqId[82] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100025]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100025] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200024]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 0ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100025]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 10ms
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[400025] ClientPlace [3] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[600027] ClientPlace [5] isDead[false] ...
Place(1) [ResilientMapImpl] get[200025]  { await ... 
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200025] ReqId[78] type[Get]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200025] ReqId[78] type[Get]  key[D]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(0) [ResilientMapImpl] get[100026]  { await ... 
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100026] ReqId[83] type[Get]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100026] ReqId[83] type[Get]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100026] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [MapRequest] TransId[100026] From [0] adding response for request === <request TransactionId[100026] ReqId[83] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100026] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200025] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200025] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200025] From [3] adding response for request === <request TransactionId[200025] ReqId[78] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200025] From [2] adding response for request === <request TransactionId[200025] ReqId[78] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100026] From [5] adding response for request === <request TransactionId[100026] ReqId[83] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200025]          ... released }    Success=true
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200025] ReqId[79] type[Put]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200025] ReqId[79] type[Put]  key[D]>
Place(1) [ResilientMapImpl] put[200025]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200025] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200025] clientId[1] ...
Place(1) [MapRequest] TransId[200025] From [2] adding response for request === <request TransactionId[200025] ReqId[79] type[Put]  key[D]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600027] ReqId[81] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600027]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600027] ReqId[82] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600027] ReqId[82] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600027] ReqId[82] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600027]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600027] ...
Place(1) [MapRequest] TransId[200025] From [3] adding response for request === <request TransactionId[200025] ReqId[79] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600027] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300026] ReqId[81] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300026]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300026] ReqId[82] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300026] ReqId[82] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300026] ReqId[82] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300026]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300026] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100026]          ... released }    Success=true
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100026] ReqId[84] type[Put]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100026] ReqId[84] type[Put]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100026] clientId[0] ...
Place(0) [MapRequest] TransId[100026] From [0] adding response for request === <request TransactionId[100026] ReqId[84] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100026]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100026] clientId[0] ...
Place(0) [MapRequest] TransId[100026] From [5] adding response for request === <request TransactionId[100026] ReqId[84] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200025]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200025] ReqId[80] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200025] ReqId[80] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600027]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 14ms
Place(1) [ResilientMapImpl] commitTransaction[200025]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[200025] is null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300026]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 10ms
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300026] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100026]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100026] ReqId[85] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100026] ReqId[85] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100026) and Tx(400025) no overlap
Place(0) [Transaction] Tx(100026) and Tx(400025) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [ResilientMapImpl] commitTransaction[100026]  { await ... 
Place(0) [Replica(0)] ConflictReport for transaction[100026] is null
Place(0) [MapRequest] TransId[100026] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100026] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600028]  { await ... 
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600028] ReqId[83] type[Get]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600028] ReqId[83] type[Get]  key[R]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600028] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [MapRequest] TransId[600028] From [5] adding response for request === <request TransactionId[600028] ReqId[83] type[Get]  key[R]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600028] clientId[5] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(5) [MapRequest] TransId[600028] From [0] adding response for request === <request TransactionId[600028] ReqId[83] type[Get]  key[R]> ..... output[4] exception[null] 
Place(2) [ResilientMapImpl] get[300027]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300027] ReqId[83] type[Get]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300027] ReqId[83] type[Get]  key[Q]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300027] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300027] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(2) [MapRequest] TransId[300027] From [3] adding response for request === <request TransactionId[300027] ReqId[83] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300027] From [5] adding response for request === <request TransactionId[300027] ReqId[83] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600028]          ... released }    Success=true
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600028] ReqId[84] type[Put]  key[R]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600028] ReqId[84] type[Put]  key[R]>
Place(2) [ResilientMapImpl] get[300027]          ... released }    Success=true
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ResilientMapImpl] put[600028]  { await ... 
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300027] ReqId[84] type[Put]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300027] ReqId[84] type[Put]  key[Q]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600028] clientId[5] ...
Place(5) [MapRequest] TransId[600028] From [5] adding response for request === <request TransactionId[600028] ReqId[84] type[Put]  key[R]> ..... output[4] exception[null] 
Place(2) [ResilientMapImpl] put[300027]  { await ... 
Place(1) [MapRequest] TransId[200025] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200025] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600028] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300027] clientId[2] ...
Place(2) [MapRequest] TransId[300027] From [3] adding response for request === <request TransactionId[300027] ReqId[84] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] TransId[600028] From [0] adding response for request === <request TransactionId[600028] ReqId[84] type[Put]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300027] clientId[2] ...
Place(2) [MapRequest] TransId[300027] From [5] adding response for request === <request TransactionId[300027] ReqId[84] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400025] ReqId[78] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400025]          ... released }    Success=false
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300027]          ... released }    Success=true
Place(5) [ResilientMapImpl] put[600028]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600028] ReqId[85] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600028] ReqId[85] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300027] ReqId[85] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300027] ReqId[85] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400025] ReqId[79] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400025] ReqId[79] type[Abort]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600028]  { await ... 
Place(2) [ResilientMapImpl] commitTransaction[300027]  { await ... 
Place(3) [MapRequest] Completing request: <request TransactionId[400025] ReqId[79] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400025]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400025] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400025]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 14ms
Place(0) [Replica(0)] calling abortNoResponse for transactionId[400025] ...
Place(0) [Transaction] Tx(600028) and Tx(100026) no overlap
Place(0) [Transaction] Tx(600028) and Tx(100026) conflicting=[false] ...
Place(0) [Transaction] Tx(600028) and Tx(400025) no overlap
Place(0) [Transaction] Tx(600028) and Tx(400025) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[600028] is null
Place(5) [MapRequest] TransId[600028] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600028] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400026]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400026] ReqId[80] type[Get]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400026] ReqId[80] type[Get]  key[X]>
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[600028] ClientPlace [5] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100026] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400026] clientId[3] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400026] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(3) [MapRequest] TransId[400026] From [5] adding response for request === <request TransactionId[400026] ReqId[80] type[Get]  key[X]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400026] From [0] adding response for request === <request TransactionId[400026] ReqId[80] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400026]          ... released }    Success=true
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400026] ReqId[81] type[Put]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400026] ReqId[81] type[Put]  key[X]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400026]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400026] clientId[3] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400026] clientId[3] ...
Place(3) [MapRequest] TransId[400026] From [5] adding response for request === <request TransactionId[400026] ReqId[81] type[Put]  key[X]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400026] From [0] adding response for request === <request TransactionId[400026] ReqId[81] type[Put]  key[X]> ..... output[2] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[200025] ClientPlace [1] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400026]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400026] ReqId[82] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400026] ReqId[82] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400026]  { await ... 
Place(0) [Transaction] Tx(400026) and Tx(100026) no overlap
Place(0) [Transaction] Tx(400026) and Tx(100026) conflicting=[false] ...
Place(0) [Transaction] Tx(400026) and Tx(600028) no overlap
Place(0) [Transaction] Tx(400026) and Tx(600028) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[400026] is null
Place(3) [MapRequest] TransId[400026] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400026] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200025] ReqId[80] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200025]          ... released }    Success=false
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200025] ReqId[81] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200025] ReqId[81] type[Abort]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200025] ReqId[81] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200025]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[200025] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100026] ReqId[85] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100026]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100026] ReqId[86] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100026] ReqId[86] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100026] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100026] ReqId[86] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100026]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100026] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200025]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 6ms
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200025] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100026]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 14ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200026]  { await ... 
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200026] ReqId[82] type[Get]  key[D]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200026] ReqId[82] type[Get]  key[D]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200026] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200026] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(1) [MapRequest] TransId[200026] From [2] adding response for request === <request TransactionId[200026] ReqId[82] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200026] From [3] adding response for request === <request TransactionId[200026] ReqId[82] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [ResilientMapImpl] get[100027]  { await ... 
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100027] ReqId[87] type[Get]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100027] ReqId[87] type[Get]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100027] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [MapRequest] TransId[100027] From [0] adding response for request === <request TransactionId[100027] ReqId[87] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200026]          ... released }    Success=true
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200026] ReqId[83] type[Put]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200026] ReqId[83] type[Put]  key[D]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200026]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200026] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200026] clientId[1] ...
Place(1) [MapRequest] TransId[200026] From [3] adding response for request === <request TransactionId[200026] ReqId[83] type[Put]  key[D]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200026] From [2] adding response for request === <request TransactionId[200026] ReqId[83] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200026]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200026] ReqId[84] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200026] ReqId[84] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600028] ReqId[85] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600028]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600028] ReqId[86] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600028] ReqId[86] type[Abort]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200026]  { await ... 
Place(5) [MapRequest] Completing request: <request TransactionId[600028] ReqId[86] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600028]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600028] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300027] ReqId[85] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300027]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300027] ReqId[86] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300027] ReqId[86] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300027] ReqId[86] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300027]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[200026] is null
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300027] ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600028] ...
Place(1) [MapRequest] TransId[200026] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200026] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300027]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 14ms
Place(5) [ResilientMapImpl] abortTransaction[600028]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 11ms
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300027] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100027] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [MapRequest] TransId[100027] From [5] adding response for request === <request TransactionId[100027] ReqId[87] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[400026] ClientPlace [3] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100027] ClientPlace [0] isDead[false] ...
Place(0) [ResilientMapImpl] get[100027]          ... released }    Success=true
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100027] ReqId[88] type[Put]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100027] ReqId[88] type[Put]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100027] clientId[0] ...
Place(0) [MapRequest] TransId[100027] From [0] adding response for request === <request TransactionId[100027] ReqId[88] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100027]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100027] clientId[0] ...
Place(0) [MapRequest] TransId[100027] From [5] adding response for request === <request TransactionId[100027] ReqId[88] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600029]  { await ... 
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600029] ReqId[87] type[Get]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600029] ReqId[87] type[Get]  key[R]>
Place(2) [ResilientMapImpl] get[300028]  { await ... 
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300028] ReqId[87] type[Get]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300028] ReqId[87] type[Get]  key[Q]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600029] clientId[5] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [MapRequest] TransId[600029] From [5] adding response for request === <request TransactionId[600029] ReqId[87] type[Get]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300028] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300028] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600029] clientId[5] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300028] From [5] adding response for request === <request TransactionId[300028] ReqId[87] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600029] From [0] adding response for request === <request TransactionId[600029] ReqId[87] type[Get]  key[R]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300028] From [3] adding response for request === <request TransactionId[300028] ReqId[87] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100027]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100027] ReqId[89] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100027] ReqId[89] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100027) and Tx(400026) no overlap
Place(0) [Transaction] Tx(100027) and Tx(400026) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100027]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(0) [Transaction] Tx(100027) and Tx(600029) no overlap
Place(0) [Transaction] Tx(100027) and Tx(600029) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100027] is null
Place(0) [MapRequest] TransId[100027] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100027] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[200026] ClientPlace [1] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300028]          ... released }    Success=true
Place(2) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300028] ReqId[88] type[Put]  key[Q]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300028] ReqId[88] type[Put]  key[Q]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600029]          ... released }    Success=true
Place(5) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ResilientMapImpl] put[300028]  { await ... 
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600029] ReqId[88] type[Put]  key[R]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600029] ReqId[88] type[Put]  key[R]>
Place(5) [ResilientMapImpl] put[600029]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600029] clientId[5] ...
Place(5) [MapRequest] TransId[600029] From [5] adding response for request === <request TransactionId[600029] ReqId[88] type[Put]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300028] clientId[2] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300028] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600029] clientId[5] ...
Place(5) [MapRequest] TransId[600029] From [0] adding response for request === <request TransactionId[600029] ReqId[88] type[Put]  key[R]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] TransId[300028] From [3] adding response for request === <request TransactionId[300028] ReqId[88] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300028] From [5] adding response for request === <request TransactionId[300028] ReqId[88] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400026] ReqId[82] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400026]          ... released }    Success=false
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300028]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400026] ReqId[83] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400026] ReqId[83] type[Abort]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600029]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600029] ReqId[89] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600029] ReqId[89] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300028] ReqId[89] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300028] ReqId[89] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300028]  { await ... 
Place(5) [ResilientMapImpl] commitTransaction[600029]  { await ... 
Place(3) [MapRequest] Completing request: <request TransactionId[400026] ReqId[83] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400026]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400026] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400026]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 11ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Transaction] Tx(600029) and Tx(100027) no overlap
Place(0) [Transaction] Tx(600029) and Tx(100027) conflicting=[false] ...
Place(0) [Transaction] Tx(600029) and Tx(400026) no overlap
Place(0) [Transaction] Tx(600029) and Tx(400026) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[600029] is null
Place(0) [Replica(0)] calling abortNoResponse for transactionId[400026] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] TransId[600029] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600029] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400027]  { await ... 
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400027] ReqId[84] type[Get]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400027] ReqId[84] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400027] clientId[3] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400027] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400027] From [5] adding response for request === <request TransactionId[400027] ReqId[84] type[Get]  key[X]> ..... output[2] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400027] From [0] adding response for request === <request TransactionId[400027] ReqId[84] type[Get]  key[X]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400027]          ... released }    Success=true
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400027] ReqId[85] type[Put]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400027] ReqId[85] type[Put]  key[X]>
Place(3) [ResilientMapImpl] put[400027]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400027] clientId[3] ...
Place(3) [MapRequest] TransId[400027] From [0] adding response for request === <request TransactionId[400027] ReqId[85] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400027] clientId[3] ...
Place(3) [MapRequest] TransId[400027] From [5] adding response for request === <request TransactionId[400027] ReqId[85] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400027]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400027] ReqId[86] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400027] ReqId[86] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400027]  { await ... 
Place(0) [Transaction] Tx(400027) and Tx(100027) no overlap
Place(0) [Transaction] Tx(400027) and Tx(100027) conflicting=[false] ...
Place(0) [Transaction] Tx(400027) and Tx(600029) no overlap
Place(0) [Transaction] Tx(400027) and Tx(600029) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[400027] is null
Place(3) [MapRequest] TransId[400027] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400027] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200026] ReqId[84] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200026]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200026] ReqId[85] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200026] ReqId[85] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200026] ReqId[85] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200026]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[200026] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200026]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 10ms
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100027] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[600029] ClientPlace [5] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[400027] ClientPlace [3] isDead[false] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200026] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100027] ReqId[89] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100027]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100027] ReqId[90] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100027] ReqId[90] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100027] ReqId[90] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100027]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100027] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(1) [ResilientMapImpl] get[200027]  { await ... 
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200027] ReqId[86] type[Get]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200027] ReqId[86] type[Get]  key[D]>
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100027] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200027] clientId[1] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(1) [MapRequest] TransId[200027] From [3] adding response for request === <request TransactionId[200027] ReqId[86] type[Get]  key[D]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100027]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 18ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200027] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200027] From [2] adding response for request === <request TransactionId[200027] ReqId[86] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [ResilientMapImpl] get[100028]  { await ... 
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300028] ReqId[89] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100028] ReqId[91] type[Get]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100028] ReqId[91] type[Get]  key[Y]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100028] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600029] ReqId[89] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600029]          ... released }    Success=false
Place(2) [ResilientMapImpl] commitTransaction[300028]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300028] ReqId[90] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300028] ReqId[90] type[Abort]  key[null]>
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600029] ReqId[90] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600029] ReqId[90] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600029] ReqId[90] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600029]  { await ... 
Place(2) [MapRequest] Completing request: <request TransactionId[300028] ReqId[90] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300028]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200027]          ... released }    Success=true
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600029] ...
Place(1) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [MapRequest] TransId[100028] From [0] adding response for request === <request TransactionId[100028] ReqId[91] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200027] ReqId[87] type[Put]  key[D]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200027] ReqId[87] type[Put]  key[D]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100028] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (Y) ...
Place(1) [ResilientMapImpl] put[200027]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300028] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200027] clientId[1] ...
Place(1) [MapRequest] TransId[200027] From [2] adding response for request === <request TransactionId[200027] ReqId[87] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100028] From [5] adding response for request === <request TransactionId[100028] ReqId[91] type[Get]  key[Y]> ..... output[5] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600029] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200027] clientId[1] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300028] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300028]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 18ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100028]          ... released }    Success=true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600029]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 0ms
Place(2)key[Q]  all retries failed ...
Place(2) [ResilientMapImpl] get[300029]  { await ... 
Place(0) [ReplicaClient] Key[Y] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100028] ReqId[92] type[Put]  key[Y]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100028] ReqId[92] type[Put]  key[Y]>
Place(5)key[R]  all retries failed ...
Place(5) [ResilientMapImpl] get[600030]  { await ... 
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300029] ReqId[91] type[Get]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300029] ReqId[91] type[Get]  key[K]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100028] clientId[0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600030] ReqId[91] type[Get]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600030] ReqId[91] type[Get]  key[G]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600030] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600030] From [5] adding response for request === <request TransactionId[600030] ReqId[91] type[Get]  key[G]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100028]  { await ... 
Place(0) [MapRequest] TransId[100028] From [0] adding response for request === <request TransactionId[100028] ReqId[92] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(1) [MapRequest] TransId[200027] From [3] adding response for request === <request TransactionId[200027] ReqId[87] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600030] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300029] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(2) [MapRequest] TransId[300029] From [3] adding response for request === <request TransactionId[300029] ReqId[91] type[Get]  key[K]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] TransId[600030] From [0] adding response for request === <request TransactionId[600030] ReqId[91] type[Get]  key[G]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100028] clientId[0] ...
Place(1) [ResilientMapImpl] put[200027]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200027] ReqId[88] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200027] ReqId[88] type[PrepareCommit]  key[null]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300029] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (K) ...
Place(1) [ResilientMapImpl] commitTransaction[200027]  { await ... 
Place(0) [MapRequest] TransId[100028] From [5] adding response for request === <request TransactionId[100028] ReqId[92] type[Put]  key[Y]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600030]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100028]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100028] ReqId[93] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100028] ReqId[93] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600030] ReqId[92] type[Put]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600030] ReqId[92] type[Put]  key[G]>
Place(5) [ResilientMapImpl] put[600030]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600030] clientId[5] ...
Place(0) [Transaction] Tx(100028) and Tx(400027) no overlap
Place(0) [Transaction] Tx(100028) and Tx(400027) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (Y) ...
Place(5) [MapRequest] TransId[600030] From [5] adding response for request === <request TransactionId[600030] ReqId[92] type[Put]  key[G]> ..... output[5] exception[null] 
Place(0) [Transaction] Tx(100028) and Tx(600030) no overlap
Place(0) [Transaction] Tx(100028) and Tx(600030) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100028] is null
Place(0) [ResilientMapImpl] commitTransaction[100028]  { await ... 
Place(0) [MapRequest] TransId[100028] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100028] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600030] clientId[5] ...
Place(5) [MapRequest] TransId[600030] From [0] adding response for request === <request TransactionId[600030] ReqId[92] type[Put]  key[G]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400027] ReqId[86] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400027]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400027] ReqId[87] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400027] ReqId[87] type[Abort]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400027] ReqId[87] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400027]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600030]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600030] ReqId[93] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600030] ReqId[93] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600030]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[400027] ...
Place(0) [Transaction] Tx(600030) and Tx(400027) no overlap
Place(0) [Transaction] Tx(600030) and Tx(400027) conflicting=[false] ...
Place(0) [Transaction] Tx(600030) and Tx(100028) no overlap
Place(0) [Transaction] Tx(600030) and Tx(100028) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[600030] is null
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400027] ...
Place(5) [MapRequest] TransId[600030] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600030] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400027]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 0ms
Place(2) [MapRequest] TransId[300029] From [5] adding response for request === <request TransactionId[300029] ReqId[91] type[Get]  key[K]> ..... output[4] exception[null] 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[200027] is null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300029]          ... released }    Success=true
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300029] ReqId[92] type[Put]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300029] ReqId[92] type[Put]  key[K]>
Place(2) [ResilientMapImpl] put[300029]  { await ... 
Place(3) [ResilientMapImpl] get[400028]  { await ... 
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400028] ReqId[88] type[Get]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400028] ReqId[88] type[Get]  key[X]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300029] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400028] clientId[3] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400028] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(2) [MapRequest] TransId[300029] From [5] adding response for request === <request TransactionId[300029] ReqId[92] type[Put]  key[K]> ..... output[4] exception[null] 
Place(3) [MapRequest] TransId[400028] From [5] adding response for request === <request TransactionId[400028] ReqId[88] type[Get]  key[X]> ..... output[2] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300029] clientId[2] ...
Place(3) [MapRequest] TransId[400028] From [0] adding response for request === <request TransactionId[400028] ReqId[88] type[Get]  key[X]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300029] From [3] adding response for request === <request TransactionId[300029] ReqId[92] type[Put]  key[K]> ..... output[4] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[400028] ClientPlace [3] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100028] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[600030] ClientPlace [5] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400028]          ... released }    Success=true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300029]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300029] ReqId[93] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300029] ReqId[93] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400028] ReqId[89] type[Put]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400028] ReqId[89] type[Put]  key[X]>
Place(2) [ResilientMapImpl] commitTransaction[300029]  { await ... 
Place(3) [ResilientMapImpl] put[400028]  { await ... 
Place(1) [MapRequest] TransId[200027] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200027] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[200027] ClientPlace [1] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400028] clientId[3] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400028] clientId[3] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400028] From [0] adding response for request === <request TransactionId[400028] ReqId[89] type[Put]  key[X]> ..... output[2] exception[null] 
Place(3) [MapRequest] TransId[400028] From [5] adding response for request === <request TransactionId[400028] ReqId[89] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400028]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400028] ReqId[90] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400028] ReqId[90] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400028]  { await ... 
Place(0) [Transaction] Tx(400028) and Tx(100028) no overlap
Place(0) [Transaction] Tx(400028) and Tx(100028) conflicting=[false] ...
Place(0) [Transaction] Tx(400028) and Tx(600030) no overlap
Place(0) [Transaction] Tx(400028) and Tx(600030) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[400028] is null
Place(3) [MapRequest] TransId[400028] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400028] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200027] ReqId[88] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200027]          ... released }    Success=false
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200027] ReqId[89] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200027] ReqId[89] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200027] ReqId[89] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200027]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[200027] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200027] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100028] ReqId[93] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100028]          ... released }    Success=false
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200027]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 14ms
Place(1)key[D]  all retries failed ...
Place(1) [ResilientMapImpl] get[200028]  { await ... 
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[4  3   ]
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100028] ReqId[94] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100028] ReqId[94] type[Abort]  key[null]>
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200028] ReqId[90] type[Get]  key[E]>
Place(1) [DataStore] clientNotifyDeadPlaces: 4,
Place(1) [ReplicaClient] Request Held until partition table is updated: <request TransactionId[200028] ReqId[90] type[Get]  key[E]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100028] ...
Place(1) [DataStore] reporting dead places to LEADER: Place(3)
Place(0) [MapRequest] Completing request: <request TransactionId[100028] ReqId[94] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100028]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100028] ...
Place(3) [MigrationHandler] adding dead place notification from client [1]
Place(3) [MigrationHandler] starting an async migration request ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] processing migration requests ...
Place(3) [MigrationHandler] nextMigrationRequest is: ImpactedClients=[1,]  deadPlaces[4,]
Place(3) [MigrationHandler] new iteration for processing migration requests ...
Place(3) [DataStore] Updating impacted client places ...
Place(1) [PartitionTable] Node partitions 
Node0->>> Part-0 - 4 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-
Node5->>> Part-4 - 5 - 3 - 
Place(1) [PartitionTable] Place partitions 
Place0->>> Part-0 - 4 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place5->>> Part-4 - 5 - 3 - 
Place(1) [DataStore] Topology and Partition Table Updated , leader changed from[Place(3)] to[Place(3)], and deputyLeader changed from [Place(4)] to [Place(3)] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100028]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 11ms
Place(0)key[Y]  all retries failed ...
Place(0) [ResilientMapImpl] get[100029]  { await ... 
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[4  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [1] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100029] ReqId[95] type[Get]  key[E]>
Place(0) [ReplicaClient] Request Held until partition table is updated: <request TransactionId[100029] ReqId[95] type[Get]  key[E]>
Place(0) [DataStore] clientNotifyDeadPlaces: 4,
Place(0) [DataStore] reporting dead places to LEADER: Place(3)
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200028] ReqId[90] type[Get]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200028] ReqId[90] type[Get]  key[E]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MigrationHandler] adding dead place notification from client [0]
Place(3) [MigrationHandler] starting an async migration request ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600030] ReqId[93] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600030]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600030] ReqId[94] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600030] ReqId[94] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600030] ReqId[94] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600030]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600030] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200028] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MigrationHandler] processing migration requests ...
Place(3) [MigrationHandler] nextMigrationRequest is: ImpactedClients=[0,]  deadPlaces[4,]
Place(3) [MigrationHandler] new iteration for processing migration requests ...
Place(3) [DataStore] Updating impacted client places ...
Place(1) [MapRequest] TransId[200028] From [3] adding response for request === <request TransactionId[200028] ReqId[90] type[Get]  key[E]> ..... output[2] exception[null] 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600030] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200028] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...

Topology dead place [4] ....
Place(0) [PartitionTable] Node partitions 
Node0->>> Part-0 - 4 - 5 - 
Node1->>> Part-0 - 1 - 
Node2->>> Part-1 - 2 - 
Node3->>> Part-2 - 3 - 
Node4->>> Part-
Node5->>> Part-4 - 5 - 3 - 
Place(0) [PartitionTable] Place partitions 
Place0->>> Part-0 - 4 - 5 - 
Place1->>> Part-0 - 1 - 
Place2->>> Part-1 - 2 - 
Place3->>> Part-2 - 3 - 
Place5->>> Part-4 - 5 - 3 - 
Place(0) [DataStore] Topology and Partition Table Updated , leader changed from[Place(3)] to[Place(3)], and deputyLeader changed from [Place(4)] to [Place(3)] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200028] From [5] adding response for request === <request TransactionId[200028] ReqId[90] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100029] ReqId[95] type[Get]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100029] ReqId[95] type[Get]  key[E]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100029] clientId[0] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200028]          ... released }    Success=true
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200028] ReqId[91] type[Put]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200028] ReqId[91] type[Put]  key[E]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200028]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600030]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 6ms
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200028] clientId[1] ...
Place(0) [MapRequest] TransId[100029] From [5] adding response for request === <request TransactionId[100029] ReqId[95] type[Get]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200028] From [5] adding response for request === <request TransactionId[200028] ReqId[91] type[Put]  key[E]> ..... output[2] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100029] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200028] clientId[1] ...
Place(1) [MapRequest] TransId[200028] From [3] adding response for request === <request TransactionId[200028] ReqId[91] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100029] From [3] adding response for request === <request TransactionId[100029] ReqId[95] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[400028] ClientPlace [3] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100029]          ... released }    Success=true
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200028]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100029] ReqId[96] type[Put]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100029] ReqId[96] type[Put]  key[E]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200028] ReqId[92] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200028] ReqId[92] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200028]  { await ... 
Place(5) [ResilientMapImpl] get[600031]  { await ... 
Place(0) [ResilientMapImpl] put[100029]  { await ... 
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600031] ReqId[95] type[Get]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600031] ReqId[95] type[Get]  key[G]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600031] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100029] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600031] From [5] adding response for request === <request TransactionId[600031] ReqId[95] type[Get]  key[G]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100029] clientId[0] ...
Place(0) [MapRequest] TransId[100029] From [5] adding response for request === <request TransactionId[100029] ReqId[96] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100029] From [3] adding response for request === <request TransactionId[100029] ReqId[96] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600031] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600031] From [0] adding response for request === <request TransactionId[600031] ReqId[95] type[Get]  key[G]> ..... output[5] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300029] ReqId[93] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100029]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300029]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300029] ReqId[94] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300029] ReqId[94] type[Abort]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100029] ReqId[97] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100029] ReqId[97] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300029] ReqId[94] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300029]  { await ... 
Place(0) [ResilientMapImpl] commitTransaction[100029]  { await ... 
Place(5) [ResilientMapImpl] get[600031]          ... released }    Success=true
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600031] ReqId[96] type[Put]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600031] ReqId[96] type[Put]  key[G]>
Place(5) [ResilientMapImpl] put[600031]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600031] clientId[5] ...
Place(5) [MapRequest] TransId[600031] From [5] adding response for request === <request TransactionId[600031] ReqId[96] type[Put]  key[G]> ..... output[5] exception[null] 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300029] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300029]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 11ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300029] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600031] clientId[5] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300030]  { await ... 
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300030] ReqId[95] type[Get]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300030] ReqId[95] type[Get]  key[K]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300030] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(2) [MapRequest] TransId[300030] From [3] adding response for request === <request TransactionId[300030] ReqId[95] type[Get]  key[K]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600031] From [0] adding response for request === <request TransactionId[600031] ReqId[96] type[Put]  key[G]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300030] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (K) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600031]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [MapRequest] Completing request: <request TransactionId[400028] ReqId[90] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400028]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400028] ReqId[91] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400028] ReqId[91] type[Abort]  key[null]>
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600031] ReqId[97] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600031] ReqId[97] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600031]  { await ... 
Place(3) [MapRequest] Completing request: <request TransactionId[400028] ReqId[91] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400028]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[400028] ...
Place(0) [Transaction] Tx(600031) and Tx(400028) no overlap
Place(0) [Transaction] Tx(600031) and Tx(400028) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[600031] is null
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400028] ...
Place(5) [MapRequest] TransId[600031] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600031] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(2) [MapRequest] TransId[300030] From [5] adding response for request === <request TransactionId[300030] ReqId[95] type[Get]  key[K]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300030]          ... released }    Success=true
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300030] ReqId[96] type[Put]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300030] ReqId[96] type[Put]  key[K]>
Place(2) [ResilientMapImpl] put[300030]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400028]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 6ms
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300030] clientId[2] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300030] clientId[2] ...
Place(2) [MapRequest] TransId[300030] From [5] adding response for request === <request TransactionId[300030] ReqId[96] type[Put]  key[K]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300030] From [3] adding response for request === <request TransactionId[300030] ReqId[96] type[Put]  key[K]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300030]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300030] ReqId[97] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300030] ReqId[97] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] get[400029]  { await ... 
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400029] ReqId[92] type[Get]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400029] ReqId[92] type[Get]  key[X]>
Place(2) [ResilientMapImpl] commitTransaction[300030]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400029] clientId[3] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(3) [MapRequest] TransId[400029] From [5] adding response for request === <request TransactionId[400029] ReqId[92] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400029] clientId[3] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(3) [MapRequest] TransId[400029] From [0] adding response for request === <request TransactionId[400029] ReqId[92] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400029]          ... released }    Success=true
Place(3) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400029] ReqId[93] type[Put]  key[X]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400029] ReqId[93] type[Put]  key[X]>
Place(3) [ResilientMapImpl] put[400029]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[400029] clientId[3] ...
Place(3) [MapRequest] TransId[400029] From [0] adding response for request === <request TransactionId[400029] ReqId[93] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400029] clientId[3] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[400029] ClientPlace [3] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[600031] ClientPlace [5] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200028] ReqId[92] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200028]          ... released }    Success=false
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200028] ReqId[93] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200028] ReqId[93] type[Abort]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200028] ReqId[93] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200028]  { await ... 
Place(3) [MapRequest] TransId[400029] From [5] adding response for request === <request TransactionId[400029] ReqId[93] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100029] ReqId[97] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100029]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100029] ReqId[98] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100029] ReqId[98] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400029]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400029] ReqId[94] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400029] ReqId[94] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200028]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 18ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100029] ReqId[98] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100029]  { await ... 
Place(3) [ResilientMapImpl] commitTransaction[400029]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100029] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100029] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200029]  { await ... 
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200029] ReqId[94] type[Get]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200029] ReqId[94] type[Get]  key[E]>
Place(0) [ResilientMapImpl] abortTransaction[100029]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 6ms
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200028] ...
Place(0) [Transaction] Tx(400029) and Tx(600031) no overlap
Place(0) [Transaction] Tx(400029) and Tx(600031) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[400029] is null
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200029] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400029] From [0] adding vote response [1] ...
Place(3) [MapRequest] TransId[400029] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [0] adding vote response completed ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200028] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200029] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200029] From [5] adding response for request === <request TransactionId[200029] ReqId[94] type[Get]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200029] From [3] adding response for request === <request TransactionId[200029] ReqId[94] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [ResilientMapImpl] get[100030]  { await ... 
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100030] ReqId[99] type[Get]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100030] ReqId[99] type[Get]  key[E]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200029]          ... released }    Success=true
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200029] ReqId[95] type[Put]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200029] ReqId[95] type[Put]  key[E]>
Place(1) [ResilientMapImpl] put[200029]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100030] clientId[0] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100030] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200029] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200029] clientId[1] ...
Place(0) [MapRequest] TransId[100030] From [5] adding response for request === <request TransactionId[100030] ReqId[99] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100030] From [3] adding response for request === <request TransactionId[100030] ReqId[99] type[Get]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200029] From [3] adding response for request === <request TransactionId[200029] ReqId[95] type[Put]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200029] From [5] adding response for request === <request TransactionId[200029] ReqId[95] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100030]          ... released }    Success=true
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600031] ReqId[97] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600031]          ... released }    Success=false
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100030] ReqId[100] type[Put]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100030] ReqId[100] type[Put]  key[E]>
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600031] ReqId[98] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600031] ReqId[98] type[Abort]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200029]          ... released }    Success=true
Place(5) [MapRequest] Completing request: <request TransactionId[600031] ReqId[98] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600031]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600031] ...
Place(0) [ResilientMapImpl] put[100030]  { await ... 
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200029] ReqId[96] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200029] ReqId[96] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200029]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100030] clientId[0] ...
Place(0) [MapRequest] TransId[100030] From [5] adding response for request === <request TransactionId[100030] ReqId[100] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600031] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100030] clientId[0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600031]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 10ms
Place(0) [MapRequest] TransId[100030] From [3] adding response for request === <request TransactionId[100030] ReqId[100] type[Put]  key[E]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300030] ReqId[97] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300030]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300030] ReqId[98] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300030] ReqId[98] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300030] ReqId[98] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300030]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100030]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100030] ReqId[101] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100030] ReqId[101] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] get[600032]  { await ... 
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600032] ReqId[99] type[Get]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600032] ReqId[99] type[Get]  key[G]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600032] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(0) [ResilientMapImpl] commitTransaction[100030]  { await ... 
Place(5) [MapRequest] TransId[600032] From [5] adding response for request === <request TransactionId[600032] ReqId[99] type[Get]  key[G]> ..... output[5] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600032] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300030] ...
Place(5) [MapRequest] TransId[600032] From [0] adding response for request === <request TransactionId[600032] ReqId[99] type[Get]  key[G]> ..... output[5] exception[null] 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300030] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300030]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 6ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600032]          ... released }    Success=true
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600032] ReqId[100] type[Put]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600032] ReqId[100] type[Put]  key[G]>
Place(5) [ResilientMapImpl] put[600032]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600032] clientId[5] ...
Place(5) [MapRequest] TransId[600032] From [5] adding response for request === <request TransactionId[600032] ReqId[100] type[Put]  key[G]> ..... output[5] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600032] clientId[5] ...
Place(5) [MapRequest] TransId[600032] From [0] adding response for request === <request TransactionId[600032] ReqId[100] type[Put]  key[G]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600032]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300031]  { await ... 
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300031] ReqId[99] type[Get]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300031] ReqId[99] type[Get]  key[K]>
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600032] ReqId[101] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600032] ReqId[101] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600032]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300031] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (K) ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[600032] ClientPlace [5] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[400029] ClientPlace [3] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Transaction] Tx(600032) and Tx(400029) no overlap
Place(0) [Transaction] Tx(600032) and Tx(400029) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[600032] is null
Place(2) [MapRequest] TransId[300031] From [5] adding response for request === <request TransactionId[300031] ReqId[99] type[Get]  key[K]> ..... output[4] exception[null] 
Place(5) [MapRequest] TransId[600032] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600032] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400029] ReqId[94] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400029]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400029] ReqId[95] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400029] ReqId[95] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400029] ReqId[95] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400029]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300031] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[400029] ...
Place(2) [MapRequest] TransId[300031] From [3] adding response for request === <request TransactionId[300031] ReqId[99] type[Get]  key[K]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300031]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400029]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 10ms
Place(3)key[X]  all retries failed ...
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300031] ReqId[100] type[Put]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300031] ReqId[100] type[Put]  key[K]>
Place(3) [ResilientMapImpl] get[400030]  { await ... 
Place(3) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400030] ReqId[96] type[Get]  key[I]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400030] ReqId[96] type[Get]  key[I]>
Place(2) [ResilientMapImpl] put[300031]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400030] clientId[3] ...
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400030] clientId[3] ...
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(3) [MapRequest] TransId[400030] From [1] adding response for request === <request TransactionId[400030] ReqId[96] type[Get]  key[I]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300031] clientId[2] ...
Place(3) [MapRequest] TransId[400030] From [2] adding response for request === <request TransactionId[400030] ReqId[96] type[Get]  key[I]> ..... output[5] exception[null] 
Place(2) [MapRequest] TransId[300031] From [3] adding response for request === <request TransactionId[300031] ReqId[100] type[Put]  key[K]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400030]          ... released }    Success=true
Place(3) [ReplicaClient] Key[I] ParitionId: 1 Replicas[1  2   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400030] ReqId[97] type[Put]  key[I]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400030] ReqId[97] type[Put]  key[I]>
Place(3) [ResilientMapImpl] put[400030]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300031] clientId[2] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400030] clientId[3] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400029] ...
Place(2) [MapRequest] TransId[300031] From [5] adding response for request === <request TransactionId[300031] ReqId[100] type[Put]  key[K]> ..... output[4] exception[null] 
Place(3) [MapRequest] TransId[400030] From [2] adding response for request === <request TransactionId[400030] ReqId[97] type[Put]  key[I]> ..... output[5] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200029] ReqId[96] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300031]          ... released }    Success=true
Place(1) [ResilientMapImpl] commitTransaction[200029]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200029] ReqId[97] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200029] ReqId[97] type[Abort]  key[null]>
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300031] ReqId[101] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300031] ReqId[101] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300031]  { await ... 
Place(1) [MapRequest] Completing request: <request TransactionId[200029] ReqId[97] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200029]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[400030] clientId[3] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200029] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200029] ...
Place(3) [MapRequest] TransId[400030] From [1] adding response for request === <request TransactionId[400030] ReqId[97] type[Put]  key[I]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400030]          ... released }    Success=true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400030] ReqId[98] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400030] ReqId[98] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] abortTransaction[200029]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 11ms
Place(3) [ResilientMapImpl] commitTransaction[400030]  { await ... 
Place(1) [Partition] Partition [1]  GET_V (I) ...
Place(1) [Replica(1)] ConflictReport for transaction[400030] is null
Place(3) [MapRequest] TransId[400030] From [1] adding vote response [1] ...
Place(3) [MapRequest] TransId[400030] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [1] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100030] ReqId[101] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100030]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100030] ReqId[102] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100030] ReqId[102] type[Abort]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100030] ReqId[102] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100030]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200030]  { await ... 
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200030] ReqId[98] type[Get]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200030] ReqId[98] type[Get]  key[E]>
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100030] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100030] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200030] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200030] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200030] From [3] adding response for request === <request TransactionId[200030] ReqId[98] type[Get]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200030] From [5] adding response for request === <request TransactionId[200030] ReqId[98] type[Get]  key[E]> ..... output[2] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100030]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 3ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200030]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200030] ReqId[99] type[Put]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200030] ReqId[99] type[Put]  key[E]>
Place(1) [ResilientMapImpl] put[200030]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200030] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200030] clientId[1] ...
Place(1) [MapRequest] TransId[200030] From [3] adding response for request === <request TransactionId[200030] ReqId[99] type[Put]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200030] From [5] adding response for request === <request TransactionId[200030] ReqId[99] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [Partition] Partition [1]  GET_V (I) ...
Place(2) [Replica(2)] ConflictReport for transaction[400030] is null
Place(3) [MapRequest] TransId[400030] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400030] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600032] ReqId[101] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] get[100031]  { await ... 
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100031] ReqId[103] type[Get]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100031] ReqId[103] type[Get]  key[E]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400030] ReqId[98] type[Commit]  key[null]>
Place(3) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[400030] ReqId[98] type[Commit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600032]          ... released }    Success=false
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [MapRequest] Completing request: <request TransactionId[400030] ReqId[98] type[Commit]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200030]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600032] ReqId[102] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600032] ReqId[102] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600032] ReqId[102] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600032]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600032] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200030] ReqId[100] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200030] ReqId[100] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200030]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100031] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100031] clientId[0] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[600032] ClientPlace [5] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400030]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400031]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600032]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 14ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400031] ReqId[99] type[Get]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400031] ReqId[99] type[Get]  key[D]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400031] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [MapRequest] TransId[400031] From [3] adding response for request === <request TransactionId[400031] ReqId[99] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600033]  { await ... 
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600033] ReqId[103] type[Get]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600033] ReqId[103] type[Get]  key[G]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600033] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600033] From [5] adding response for request === <request TransactionId[600033] ReqId[103] type[Get]  key[G]> ..... output[5] exception[null] 
Place(1) [Replica(1)] TransId[400030] Applying commit changes:=> InitVersion[4] value[6] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (I,6) ...
Place(2) [Replica(2)] TransId[400030] Applying commit changes:=> InitVersion[4] value[6] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (I,6) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400031] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600033] clientId[5] ...
Place(0) [MapRequest] TransId[100031] From [3] adding response for request === <request TransactionId[100031] ReqId[103] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600032] ...
Place(0) [MapRequest] TransId[100031] From [5] adding response for request === <request TransactionId[100031] ReqId[103] type[Get]  key[E]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600033] From [0] adding response for request === <request TransactionId[600033] ReqId[103] type[Get]  key[G]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100031]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600033]          ... released }    Success=true
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100031] ReqId[104] type[Put]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100031] ReqId[104] type[Put]  key[E]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600033] ReqId[104] type[Put]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600033] ReqId[104] type[Put]  key[G]>
Place(5) [ResilientMapImpl] put[600033]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600033] clientId[5] ...
Place(0) [ResilientMapImpl] put[100031]  { await ... 
Place(5) [MapRequest] TransId[600033] From [5] adding response for request === <request TransactionId[600033] ReqId[104] type[Put]  key[G]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100031] clientId[0] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600033] clientId[5] ...
Place(0) [MapRequest] TransId[100031] From [5] adding response for request === <request TransactionId[100031] ReqId[104] type[Put]  key[E]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600033] From [0] adding response for request === <request TransactionId[600033] ReqId[104] type[Put]  key[G]> ..... output[5] exception[null] 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400031] ClientPlace [3] isDead[false] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100031] clientId[0] ...
Place(0) [MapRequest] TransId[100031] From [3] adding response for request === <request TransactionId[100031] ReqId[104] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100031]          ... released }    Success=true
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600033]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100031] ReqId[105] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100031] ReqId[105] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600033] ReqId[105] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600033] ReqId[105] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600033]  { await ... 
Place(0) [ResilientMapImpl] commitTransaction[100031]  { await ... 
Place(3) [MapRequest] TransId[400031] From [2] adding response for request === <request TransactionId[400031] ReqId[99] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[600033] is null
Place(5) [MapRequest] TransId[600033] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600033] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400031]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400031] ReqId[100] type[Put]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400031] ReqId[100] type[Put]  key[D]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400031]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400031] clientId[3] ...
Place(3) [MapRequest] TransId[400031] From [3] adding response for request === <request TransactionId[400031] ReqId[100] type[Put]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300031] ReqId[101] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300031]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300031] ReqId[102] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300031] ReqId[102] type[Abort]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400031] clientId[3] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300031] ReqId[102] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300031]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300031] ...
Place(3) [MapRequest] TransId[400031] From [2] adding response for request === <request TransactionId[400031] ReqId[100] type[Put]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400031]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400031] ReqId[101] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300031]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 3ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400031] ReqId[101] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400031]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[400031] is null
Place(3) [MapRequest] TransId[400031] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400031] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300031] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300032]  { await ... 
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300032] ReqId[103] type[Get]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300032] ReqId[103] type[Get]  key[K]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300032] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300032] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (K) ...
Place(2) [MapRequest] TransId[300032] From [3] adding response for request === <request TransactionId[300032] ReqId[103] type[Get]  key[K]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300032] From [5] adding response for request === <request TransactionId[300032] ReqId[103] type[Get]  key[K]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300032]          ... released }    Success=true
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300032] ReqId[104] type[Put]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300032] ReqId[104] type[Put]  key[K]>
Place(2) [ResilientMapImpl] put[300032]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300032] clientId[2] ...
Place(2) [MapRequest] TransId[300032] From [5] adding response for request === <request TransactionId[300032] ReqId[104] type[Put]  key[K]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200030] ReqId[100] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200030]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[600033] ClientPlace [5] isDead[false] ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200030] ReqId[101] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200030] ReqId[101] type[Abort]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200030] ReqId[101] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200030]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200030] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200030]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 6ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200030] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300032] clientId[2] ...
Place(1) [ResilientMapImpl] get[200031]  { await ... 
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200031] ReqId[102] type[Get]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200031] ReqId[102] type[Get]  key[E]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200031] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200031] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200031] From [5] adding response for request === <request TransactionId[200031] ReqId[102] type[Get]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200031] From [3] adding response for request === <request TransactionId[200031] ReqId[102] type[Get]  key[E]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300032] From [3] adding response for request === <request TransactionId[300032] ReqId[104] type[Put]  key[K]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300032]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300032] ReqId[105] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300032] ReqId[105] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300032]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200031]          ... released }    Success=true
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200031] ReqId[103] type[Put]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200031] ReqId[103] type[Put]  key[E]>
Place(1) [ResilientMapImpl] put[200031]  { await ... 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400031] ClientPlace [3] isDead[false] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100031] ReqId[105] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [MapRequest] Completing request: <request TransactionId[600033] ReqId[105] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100031]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] commitTransaction[600033]          ... released }    Success=false
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100031] ReqId[106] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100031] ReqId[106] type[Abort]  key[null]>
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600033] ReqId[106] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600033] ReqId[106] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600033] ReqId[106] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600033]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600033] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100031] ReqId[106] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100031]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100031] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100031] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100031]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 17ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600033]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 18ms
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200031] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200031] clientId[1] ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600033] ...
Place(1) [MapRequest] TransId[200031] From [3] adding response for request === <request TransactionId[200031] ReqId[103] type[Put]  key[E]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200031] From [5] adding response for request === <request TransactionId[200031] ReqId[103] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200031]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200031] ReqId[104] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200031] ReqId[104] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200031]  { await ... 
Place(5) [ResilientMapImpl] get[600034]  { await ... 
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600034] ReqId[107] type[Get]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600034] ReqId[107] type[Get]  key[G]>
Place(0) [ResilientMapImpl] get[100032]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600034] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [MapRequest] TransId[600034] From [5] adding response for request === <request TransactionId[600034] ReqId[107] type[Get]  key[G]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100032] ReqId[107] type[Get]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100032] ReqId[107] type[Get]  key[E]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100032] clientId[0] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100032] clientId[0] ...
Place(0) [MapRequest] TransId[100032] From [5] adding response for request === <request TransactionId[100032] ReqId[107] type[Get]  key[E]> ..... output[2] exception[null] 
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(0) [MapRequest] TransId[100032] From [3] adding response for request === <request TransactionId[100032] ReqId[107] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600034] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600034] From [0] adding response for request === <request TransactionId[600034] ReqId[107] type[Get]  key[G]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400031] ReqId[101] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400031]          ... released }    Success=false
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400031] ReqId[102] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400031] ReqId[102] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400031] ReqId[102] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400031]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400031] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600034]          ... released }    Success=true
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600034] ReqId[108] type[Put]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600034] ReqId[108] type[Put]  key[G]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100032]          ... released }    Success=true
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100032] ReqId[108] type[Put]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100032] ReqId[108] type[Put]  key[E]>
Place(5) [ResilientMapImpl] put[600034]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600034] clientId[5] ...
Place(5) [MapRequest] TransId[600034] From [5] adding response for request === <request TransactionId[600034] ReqId[108] type[Put]  key[G]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100032]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100032] clientId[0] ...
Place(0) [MapRequest] TransId[100032] From [5] adding response for request === <request TransactionId[100032] ReqId[108] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600034] clientId[5] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400031] ...
Place(5) [MapRequest] TransId[600034] From [0] adding response for request === <request TransactionId[600034] ReqId[108] type[Put]  key[G]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400031]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 14ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[600034] is null
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100032] clientId[0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600034]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600034] ReqId[109] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600034] ReqId[109] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600034]  { await ... 
Place(0) [MapRequest] TransId[100032] From [3] adding response for request === <request TransactionId[100032] ReqId[108] type[Put]  key[E]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600034] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600034] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400032]  { await ... 
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400032] ReqId[103] type[Get]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400032] ReqId[103] type[Get]  key[D]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400032] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [MapRequest] TransId[400032] From [3] adding response for request === <request TransactionId[400032] ReqId[103] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100032]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100032] ReqId[109] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100032] ReqId[109] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100032]  { await ... 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[600034] ClientPlace [5] isDead[false] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400032] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400032] From [2] adding response for request === <request TransactionId[400032] ReqId[103] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400032]          ... released }    Success=true
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400032] ReqId[104] type[Put]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400032] ReqId[104] type[Put]  key[D]>
Place(3) [ResilientMapImpl] put[400032]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400032] clientId[3] ...
Place(3) [MapRequest] TransId[400032] From [3] adding response for request === <request TransactionId[400032] ReqId[104] type[Put]  key[D]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400032] clientId[3] ...
Place(3) [MapRequest] TransId[400032] From [2] adding response for request === <request TransactionId[400032] ReqId[104] type[Put]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400032]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400032] ReqId[105] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400032] ReqId[105] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400032]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[400032] is null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400032] ClientPlace [3] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300032] ReqId[105] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300032]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300032] ReqId[106] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300032] ReqId[106] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300032] ReqId[106] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300032]  { await ... 
Place(3) [MapRequest] TransId[400032] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400032] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300032] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300032] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300032]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 17ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300033]  { await ... 
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300033] ReqId[107] type[Get]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300033] ReqId[107] type[Get]  key[K]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300033] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (K) ...
Place(2) [MapRequest] TransId[300033] From [5] adding response for request === <request TransactionId[300033] ReqId[107] type[Get]  key[K]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200031] ReqId[104] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200031]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200031] ReqId[105] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200031] ReqId[105] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200031] ReqId[105] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200031]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300033] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200031] ...
Place(2) [MapRequest] TransId[300033] From [3] adding response for request === <request TransactionId[300033] ReqId[107] type[Get]  key[K]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200031] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300033]          ... released }    Success=true
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300033] ReqId[108] type[Put]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300033] ReqId[108] type[Put]  key[K]>
Place(2) [ResilientMapImpl] put[300033]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200031]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 3ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300033] clientId[2] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] TransId[300033] From [5] adding response for request === <request TransactionId[300033] ReqId[108] type[Put]  key[K]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300033] clientId[2] ...
Place(1) [ResilientMapImpl] get[200032]  { await ... 
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200032] ReqId[106] type[Get]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200032] ReqId[106] type[Get]  key[E]>
Place(2) [MapRequest] TransId[300033] From [3] adding response for request === <request TransactionId[300033] ReqId[108] type[Put]  key[K]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300033]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600034] ReqId[109] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600034]          ... released }    Success=false
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300033] ReqId[109] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300033] ReqId[109] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600034] ReqId[110] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600034] ReqId[110] type[Abort]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300033]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200032] clientId[1] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600034] ReqId[110] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600034]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600034] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200032] From [3] adding response for request === <request TransactionId[200032] ReqId[106] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600034] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100032] ReqId[109] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100032]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100032] ReqId[110] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100032] ReqId[110] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100032] ReqId[110] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100032]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600034]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 11ms
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100032] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100032] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200032] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200032] From [5] adding response for request === <request TransactionId[200032] ReqId[106] type[Get]  key[E]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200032]          ... released }    Success=true
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200032] ReqId[107] type[Put]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200032] ReqId[107] type[Put]  key[E]>
Place(1) [ResilientMapImpl] put[200032]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100032]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 7ms
Place(5) [ResilientMapImpl] get[600035]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600035] ReqId[111] type[Get]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600035] ReqId[111] type[Get]  key[G]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200032] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600035] clientId[5] ...
Place(5) [Partition] Partition [5]  GET_V (G) ...
Place(5) [MapRequest] TransId[600035] From [5] adding response for request === <request TransactionId[600035] ReqId[111] type[Get]  key[G]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200032] clientId[1] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100033]  { await ... 
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100033] ReqId[111] type[Get]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100033] ReqId[111] type[Get]  key[E]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100033] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600035] clientId[5] ...
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(1) [MapRequest] TransId[200032] From [5] adding response for request === <request TransactionId[200032] ReqId[107] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100033] From [3] adding response for request === <request TransactionId[100033] ReqId[111] type[Get]  key[E]> ..... output[2] exception[null] 
Place(5) [MapRequest] TransId[600035] From [0] adding response for request === <request TransactionId[600035] ReqId[111] type[Get]  key[G]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100033] clientId[0] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100033] From [5] adding response for request === <request TransactionId[100033] ReqId[111] type[Get]  key[E]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400032] ReqId[105] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400032]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400032] ReqId[106] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400032] ReqId[106] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400032] ReqId[106] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400032]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400032] ...
Place(1) [MapRequest] TransId[200032] From [3] adding response for request === <request TransactionId[200032] ReqId[107] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400032] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100033]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100033] ReqId[112] type[Put]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100033] ReqId[112] type[Put]  key[E]>
Place(5) [ResilientMapImpl] get[600035]          ... released }    Success=true
Place(5) [ReplicaClient] Key[G] ParitionId: 5 Replicas[0  5   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600035] ReqId[112] type[Put]  key[G]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600035] ReqId[112] type[Put]  key[G]>
Place(0) [ResilientMapImpl] put[100033]  { await ... 
Place(5) [ResilientMapImpl] put[600035]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600035] clientId[5] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100033] clientId[0] ...
Place(5) [MapRequest] TransId[600035] From [5] adding response for request === <request TransactionId[600035] ReqId[112] type[Put]  key[G]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100033] From [5] adding response for request === <request TransactionId[100033] ReqId[112] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[600035] clientId[5] ...
Place(5) [MapRequest] TransId[600035] From [0] adding response for request === <request TransactionId[600035] ReqId[112] type[Put]  key[G]> ..... output[5] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200032]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200032] ReqId[108] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200032] ReqId[108] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200032]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400032]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 18ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600035]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600035] ReqId[113] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600035] ReqId[113] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600035]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100033] clientId[0] ...
Place(0) [MapRequest] TransId[100033] From [3] adding response for request === <request TransactionId[100033] ReqId[112] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [Partition] Partition [5]  GET_V (G) ...
Place(0) [Replica(0)] ConflictReport for transaction[600035] is null
Place(5) [MapRequest] TransId[600035] From [0] adding vote response [1] ...
Place(5) [MapRequest] TransId[600035] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(5) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400033]  { await ... 
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400033] ReqId[107] type[Get]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400033] ReqId[107] type[Get]  key[D]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400033] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [MapRequest] TransId[400033] From [3] adding response for request === <request TransactionId[400033] ReqId[107] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400033] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100033]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100033] ReqId[113] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100033] ReqId[113] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100033]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400033] From [2] adding response for request === <request TransactionId[400033] ReqId[107] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400033]          ... released }    Success=true
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400033] ReqId[108] type[Put]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400033] ReqId[108] type[Put]  key[D]>
Place(3) [ResilientMapImpl] put[400033]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400033] clientId[3] ...
Place(3) [MapRequest] TransId[400033] From [3] adding response for request === <request TransactionId[400033] ReqId[108] type[Put]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400033] clientId[3] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400033] From [2] adding response for request === <request TransactionId[400033] ReqId[108] type[Put]  key[D]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400033]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400033] ReqId[109] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400033] ReqId[109] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400033]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300033] ReqId[109] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300033]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300033] ReqId[110] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300033] ReqId[110] type[Abort]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300033] ReqId[110] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300033]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300033] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300033] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[400033] is null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400033] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400033] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300033]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 7ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300034]  { await ... 
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300034] ReqId[111] type[Get]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300034] ReqId[111] type[Get]  key[K]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300034] clientId[2] ...
Place(5) [Partition] Partition [3]  GET_V (K) ...
Place(2) [MapRequest] TransId[300034] From [5] adding response for request === <request TransactionId[300034] ReqId[111] type[Get]  key[K]> ..... output[4] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[600035] ClientPlace [5] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300034] clientId[2] ...
Place(3) [Partition] Partition [3]  GET_V (K) ...
Place(2) [MapRequest] TransId[300034] From [3] adding response for request === <request TransactionId[300034] ReqId[111] type[Get]  key[K]> ..... output[4] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300034]          ... released }    Success=true
Place(2) [ReplicaClient] Key[K] ParitionId: 3 Replicas[5  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300034] ReqId[112] type[Put]  key[K]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300034] ReqId[112] type[Put]  key[K]>
Place(2) [ResilientMapImpl] put[300034]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300034] clientId[2] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300034] clientId[2] ...
Place(2) [MapRequest] TransId[300034] From [5] adding response for request === <request TransactionId[300034] ReqId[112] type[Put]  key[K]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300034] From [3] adding response for request === <request TransactionId[300034] ReqId[112] type[Put]  key[K]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300034]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300034] ReqId[113] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300034] ReqId[113] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300034]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200032] ReqId[108] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200032]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200032] ReqId[109] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200032] ReqId[109] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200032] ReqId[109] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200032]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600035] ReqId[113] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600035]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600035] ReqId[114] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600035] ReqId[114] type[Abort]  key[null]>
Place(5) [MapRequest] Completing request: <request TransactionId[600035] ReqId[114] type[Abort]  key[null]>  Exception: null
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600035] ...
Place(5) [ResilientMapImpl] abortTransaction[600035]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200032] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200032] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[600035] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400033] ClientPlace [3] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200032]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 17ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100033] ReqId[113] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100033]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100033] ReqId[114] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100033] ReqId[114] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100033] ReqId[114] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100033]  { await ... 
Place(5) [ResilientMapImpl] abortTransaction[600035]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 6ms
Place(5)key[G]  all retries failed ...
Place(5) [ResilientMapImpl] get[600036]  { await ... 
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600036] ReqId[115] type[Get]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600036] ReqId[115] type[Get]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600036] clientId[5] ...
Place(5) [Partition] Partition [3]  GET_V (W) ...
Place(5) [MapRequest] TransId[600036] From [5] adding response for request === <request TransactionId[600036] ReqId[115] type[Get]  key[W]> ..... output[5] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100033] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100033] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600036] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(5) [MapRequest] TransId[600036] From [3] adding response for request === <request TransactionId[600036] ReqId[115] type[Get]  key[W]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200033]  { await ... 
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200033] ReqId[110] type[Get]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200033] ReqId[110] type[Get]  key[E]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600036]          ... released }    Success=true
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600036] ReqId[116] type[Put]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600036] ReqId[116] type[Put]  key[W]>
Place(5) [ResilientMapImpl] put[600036]  { await ... 
Place(0) [ResilientMapImpl] abortTransaction[100033]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 7ms
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600036] clientId[5] ...
Place(5) [MapRequest] TransId[600036] From [5] adding response for request === <request TransactionId[600036] ReqId[116] type[Put]  key[W]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200033] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(1) [MapRequest] TransId[200033] From [5] adding response for request === <request TransactionId[200033] ReqId[110] type[Get]  key[E]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600036] clientId[5] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200033] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100034]  { await ... 
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100034] ReqId[115] type[Get]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100034] ReqId[115] type[Get]  key[E]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100034] clientId[0] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100034] clientId[0] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(5) [MapRequest] TransId[600036] From [3] adding response for request === <request TransactionId[600036] ReqId[116] type[Put]  key[W]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100034] From [5] adding response for request === <request TransactionId[100034] ReqId[115] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100034] From [3] adding response for request === <request TransactionId[100034] ReqId[115] type[Get]  key[E]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600036]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600036] ReqId[117] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600036] ReqId[117] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600036]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100034]          ... released }    Success=true
Place(0) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100034] ReqId[116] type[Put]  key[E]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100034] ReqId[116] type[Put]  key[E]>
Place(0) [ResilientMapImpl] put[100034]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100034] clientId[0] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100034] clientId[0] ...
Place(0) [MapRequest] TransId[100034] From [5] adding response for request === <request TransactionId[100034] ReqId[116] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [MapRequest] TransId[100034] From [3] adding response for request === <request TransactionId[100034] ReqId[116] type[Put]  key[E]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400033] ReqId[109] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400033]          ... released }    Success=false
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400033] ReqId[110] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400033] ReqId[110] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400033] ReqId[110] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400033]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400033] ...
Place(1) [MapRequest] TransId[200033] From [3] adding response for request === <request TransactionId[200033] ReqId[110] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100034]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100034] ReqId[117] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100034] ReqId[117] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100034]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400033] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200033]          ... released }    Success=true
Place(1) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400033]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 11ms
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200033] ReqId[111] type[Put]  key[E]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200033] ReqId[111] type[Put]  key[E]>
Place(1) [ResilientMapImpl] put[200033]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200033] clientId[1] ...
Place(1) [MapRequest] TransId[200033] From [3] adding response for request === <request TransactionId[200033] ReqId[111] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200033] clientId[1] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400034]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400034] ReqId[111] type[Get]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400034] ReqId[111] type[Get]  key[D]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400034] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [MapRequest] TransId[400034] From [3] adding response for request === <request TransactionId[400034] ReqId[111] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200033] From [5] adding response for request === <request TransactionId[200033] ReqId[111] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200033]          ... released }    Success=true
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200033] ReqId[112] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200033] ReqId[112] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200033]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400034] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(3) [MapRequest] TransId[400034] From [2] adding response for request === <request TransactionId[400034] ReqId[111] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400034]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300034] ReqId[113] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300034]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300034] ReqId[114] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300034] ReqId[114] type[Abort]  key[null]>
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400034] ReqId[112] type[Put]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400034] ReqId[112] type[Put]  key[D]>
Place(3) [ResilientMapImpl] put[400034]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300034] ReqId[114] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300034]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400034] clientId[3] ...
Place(3) [MapRequest] TransId[400034] From [3] adding response for request === <request TransactionId[400034] ReqId[112] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300034] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400034] clientId[3] ...
Place(3) [MapRequest] TransId[400034] From [2] adding response for request === <request TransactionId[400034] ReqId[112] type[Put]  key[D]> ..... output[3] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400034] ClientPlace [3] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400034]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400034] ReqId[113] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400034] ReqId[113] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400034]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300034]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 7ms
Place(2)key[K]  all retries failed ...
Place(2) [ResilientMapImpl] get[300035]  { await ... 
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300035] ReqId[115] type[Get]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300035] ReqId[115] type[Get]  key[J]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300035] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [MapRequest] TransId[300035] From [2] adding response for request === <request TransactionId[300035] ReqId[115] type[Get]  key[J]> ..... output[3] exception[null] 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300034] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300035] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Transaction] Tx(400034) and Tx(300035) no overlap
Place(2) [Transaction] Tx(400034) and Tx(300035) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[400034] is null
Place(2) [MapRequest] TransId[300035] From [3] adding response for request === <request TransactionId[300035] ReqId[115] type[Get]  key[J]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400034] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400034] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300035]          ... released }    Success=true
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300035] ReqId[116] type[Put]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300035] ReqId[116] type[Put]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300035] clientId[2] ...
Place(2) [ResilientMapImpl] put[300035]  { await ... 
Place(2) [MapRequest] TransId[300035] From [2] adding response for request === <request TransactionId[300035] ReqId[116] type[Put]  key[J]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300035] clientId[2] ...
Place(2) [MapRequest] TransId[300035] From [3] adding response for request === <request TransactionId[300035] ReqId[116] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300035]          ... released }    Success=true
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300035] ReqId[117] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300035] ReqId[117] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300035]  { await ... 
Place(2) [Transaction] Tx(300035) and Tx(400034) no overlap
Place(2) [Transaction] Tx(300035) and Tx(400034) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] ConflictReport for transaction[300035] is null
Place(2) [MapRequest] TransId[300035] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300035] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600036] ReqId[117] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600036]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600036] ReqId[118] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600036] ReqId[118] type[Abort]  key[null]>
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600036] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600036] ReqId[118] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600036]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[600036] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600036]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 3ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100034] ReqId[117] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100034]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100034] ReqId[118] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100034] ReqId[118] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100034] ReqId[118] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100034]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100034] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100034] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600037]  { await ... 
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600037] ReqId[119] type[Get]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600037] ReqId[119] type[Get]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600037] clientId[5] ...
Place(5) [Partition] Partition [3]  GET_V (W) ...
Place(5) [MapRequest] TransId[600037] From [5] adding response for request === <request TransactionId[600037] ReqId[119] type[Get]  key[W]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100034]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 14ms
Place(0)key[E]  all retries failed ...
Place(0) [ResilientMapImpl] get[100035]  { await ... 
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100035] ReqId[119] type[Get]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100035] ReqId[119] type[Get]  key[J]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100035] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600037] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100035] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200033] ReqId[112] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200033]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200033] ReqId[113] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200033] ReqId[113] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200033] ReqId[113] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200033]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200033] ...
Place(5) [MapRequest] TransId[600037] From [3] adding response for request === <request TransactionId[600037] ReqId[119] type[Get]  key[W]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100035] From [3] adding response for request === <request TransactionId[100035] ReqId[119] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100035] From [2] adding response for request === <request TransactionId[100035] ReqId[119] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100035]          ... released }    Success=true
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100035] ReqId[120] type[Put]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100035] ReqId[120] type[Put]  key[J]>
Place(0) [ResilientMapImpl] put[100035]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100035] clientId[0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200033]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 7ms
Place(1)key[E]  all retries failed ...
Place(1) [ResilientMapImpl] get[200034]  { await ... 
Place(1) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200034] ReqId[114] type[Get]  key[N]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200034] ReqId[114] type[Get]  key[N]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200034] clientId[1] ...
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [MapRequest] TransId[200034] From [1] adding response for request === <request TransactionId[200034] ReqId[114] type[Get]  key[N]> ..... output[5] exception[null] Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600037]          ... released }    Success=true
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600037] ReqId[120] type[Put]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600037] ReqId[120] type[Put]  key[W]>
Place(5) [ResilientMapImpl] put[600037]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600037] clientId[5] ...
Place(5) [MapRequest] TransId[600037] From [5] adding response for request === <request TransactionId[600037] ReqId[120] type[Put]  key[W]> ..... output[5] exception[null] 

Place(0) [MapRequest] TransId[100035] From [2] adding response for request === <request TransactionId[100035] ReqId[120] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200034] clientId[1] ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600037] clientId[5] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200033] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100035] clientId[0] ...
Place(1) [MapRequest] TransId[200034] From [0] adding response for request === <request TransactionId[200034] ReqId[114] type[Get]  key[N]> ..... output[5] exception[null] 
Place(5) [MapRequest] TransId[600037] From [3] adding response for request === <request TransactionId[600037] ReqId[120] type[Put]  key[W]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100035] From [3] adding response for request === <request TransactionId[100035] ReqId[120] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300035] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[400034] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100035] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100035]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100035] ReqId[121] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100035] ReqId[121] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100035]  { await ... 
Place(2) [Transaction] Tx(100035) and Tx(400034) no overlap
Place(2) [Transaction] Tx(100035) and Tx(400034) conflicting=[false] ...
Place(2) [Transaction] Tx(100035) and Tx(300035) overlapped keys = J,
Place(2) [Transaction] Tx(100035) and Tx(300035) conflict in key [J]
Place(2) [Transaction] Tx(100035) and Tx(300035) conflicting=[true] ...
Place(2) [Replica(2)] Found conflict between transaction[100035]  and [300035] ...
Place(0) [MapRequest] TransId[100035] From [2] adding vote response [0] ...
Place(0) [MapRequest] TransId[100035] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400034] ReqId[113] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400034]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400034] ReqId[114] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400034] ReqId[114] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400034] ReqId[114] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400034]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400034] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200034]          ... released }    Success=true
Place(1) [ReplicaClient] Key[N] ParitionId: 0 Replicas[0  1   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200034] ReqId[115] type[Put]  key[N]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200034] ReqId[115] type[Put]  key[N]>
Place(1) [ResilientMapImpl] put[200034]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200034] clientId[1] ...
Place(1) [MapRequest] TransId[200034] From [1] adding response for request === <request TransactionId[200034] ReqId[115] type[Put]  key[N]> ..... output[5] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600037]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600037] ReqId[121] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600037] ReqId[121] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600037]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100035] ReqId[121] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100035]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100035] ReqId[122] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100035] ReqId[122] type[Abort]  key[null]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200034] clientId[1] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100035] ReqId[122] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100035]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100035] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400034]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 6ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200034] From [0] adding response for request === <request TransactionId[200034] ReqId[115] type[Put]  key[N]> ..... output[5] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200034]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200034] ReqId[116] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200034] ReqId[116] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200034]  { await ... 
Place(1) [Partition] Partition [0]  GET_V (N) ...
Place(1) [Replica(1)] ConflictReport for transaction[200034] is null
Place(1) [MapRequest] TransId[200034] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200034] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(0) [Partition] Partition [0]  GET_V (N) ...
Place(0) [Replica(0)] ConflictReport for transaction[200034] is null
Place(1) [MapRequest] TransId[200034] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200034] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100035]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 10ms
Place(3) [ResilientMapImpl] get[400035]  { await ... 
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300035] ReqId[117] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300035]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400035] ReqId[115] type[Get]  key[D]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300035] ReqId[118] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300035] ReqId[118] type[Abort]  key[null]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400035] ReqId[115] type[Get]  key[D]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300035] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300035] ReqId[118] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300035]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400035] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [MapRequest] TransId[400035] From [3] adding response for request === <request TransactionId[400035] ReqId[115] type[Get]  key[D]> ..... output[3] exception[null] 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300035] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400035] clientId[3] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100035] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400034] ...
Place(3) [MapRequest] TransId[400035] From [2] adding response for request === <request TransactionId[400035] ReqId[115] type[Get]  key[D]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200034] ReqId[116] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200034] ReqId[116] type[Commit]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200034] ReqId[116] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[200034] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (N,6) ...
Place(0) [Replica(0)] TransId[200034] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (N,6) ...
Place(0) [ResilientMapImpl] get[100036]  { await ... 
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100036] ReqId[123] type[Get]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100036] ReqId[123] type[Get]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100036] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100036] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(0) [MapRequest] TransId[100036] From [3] adding response for request === <request TransactionId[100036] ReqId[123] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100036] From [2] adding response for request === <request TransactionId[100036] ReqId[123] type[Get]  key[J]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400035]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300035]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 14ms
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400035] ReqId[116] type[Put]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400035] ReqId[116] type[Put]  key[D]>
Place(3) [ResilientMapImpl] put[400035]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400035] clientId[3] ...
Place(3) [MapRequest] TransId[400035] From [3] adding response for request === <request TransactionId[400035] ReqId[116] type[Put]  key[D]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400035] clientId[3] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400035] From [2] adding response for request === <request TransactionId[400035] ReqId[116] type[Put]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200034]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200035]  { await ... 
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200035] ReqId[117] type[Get]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200035] ReqId[117] type[Get]  key[S]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200035] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(1) [MapRequest] TransId[200035] From [0] adding response for request === <request TransactionId[200035] ReqId[117] type[Get]  key[S]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100036]          ... released }    Success=true
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100036] ReqId[124] type[Put]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100036] ReqId[124] type[Put]  key[J]>
Place(0) [ResilientMapImpl] put[100036]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100036] clientId[0] ...
Place(0) [MapRequest] TransId[100036] From [2] adding response for request === <request TransactionId[100036] ReqId[124] type[Put]  key[J]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100036] clientId[0] ...
Place(0) [MapRequest] TransId[100036] From [3] adding response for request === <request TransactionId[100036] ReqId[124] type[Put]  key[J]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400035]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400035] ReqId[117] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400035] ReqId[117] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] get[300036]  { await ... 
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300036] ReqId[119] type[Get]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300036] ReqId[119] type[Get]  key[J]>
Place(3) [ResilientMapImpl] commitTransaction[400035]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300036] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [MapRequest] TransId[300036] From [2] adding response for request === <request TransactionId[300036] ReqId[119] type[Get]  key[J]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200035] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100036]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100036] ReqId[125] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100036] ReqId[125] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100036]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Transaction] Tx(100036) and Tx(300036) overlapped keys = J,
Place(2) [Transaction] Tx(100036) and Tx(300036) conflict in key [J]
Place(2) [Transaction] Tx(100036) and Tx(300036) conflicting=[true] ...
Place(2) [Transaction] Tx(100036) and Tx(400035) no overlap
Place(2) [Transaction] Tx(100036) and Tx(400035) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[100036] is::: ConflictReport with active transactions: 300036,   and maxTransId is: 300036
Place(2) [Replica(2)] TransId[100036] Abort my self, NOT ready to commit ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300036] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Transaction] Tx(400035) and Tx(300036) no overlap
Place(2) [Transaction] Tx(400035) and Tx(300036) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[400035] is null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400035] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400035] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100036] From [2] adding vote response [0] ...
Place(0) [MapRequest] TransId[100036] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] TransId[300036] From [3] adding response for request === <request TransactionId[300036] ReqId[119] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200035] From [5] adding response for request === <request TransactionId[200035] ReqId[117] type[Get]  key[S]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100036] ReqId[125] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100036]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100036] ReqId[126] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100036] ReqId[126] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100036] ReqId[126] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100036]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100036] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100036] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300036]          ... released }    Success=true
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300036] ReqId[120] type[Put]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300036] ReqId[120] type[Put]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300036] clientId[2] ...
Place(2) [ResilientMapImpl] put[300036]  { await ... 
Place(2) [MapRequest] TransId[300036] From [2] adding response for request === <request TransactionId[300036] ReqId[120] type[Put]  key[J]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300036] clientId[2] ...
Place(2) [MapRequest] TransId[300036] From [3] adding response for request === <request TransactionId[300036] ReqId[120] type[Put]  key[J]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200035]          ... released }    Success=true
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200035] ReqId[118] type[Put]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200035] ReqId[118] type[Put]  key[S]>
Place(1) [ResilientMapImpl] put[200035]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100036]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 6ms
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200035] clientId[1] ...
Place(1) [MapRequest] TransId[200035] From [0] adding response for request === <request TransactionId[200035] ReqId[118] type[Put]  key[S]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300036]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300036] ReqId[121] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300036] ReqId[121] type[PrepareCommit]  key[null]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200035] clientId[1] ...
Place(2) [ResilientMapImpl] commitTransaction[300036]  { await ... 
Place(2) [Transaction] Tx(300036) and Tx(400035) no overlap
Place(2) [Transaction] Tx(300036) and Tx(400035) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] ConflictReport for transaction[300036] is null
Place(2) [MapRequest] TransId[300036] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300036] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(1) [MapRequest] TransId[200035] From [5] adding response for request === <request TransactionId[200035] ReqId[118] type[Put]  key[S]> ..... output[4] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200035]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200035] ReqId[119] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200035] ReqId[119] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200035]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[200035] is null
Place(1) [MapRequest] TransId[200035] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200035] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ResilientMapImpl] get[100037]  { await ... 
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100037] ReqId[127] type[Get]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100037] ReqId[127] type[Get]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100037] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(0) [MapRequest] TransId[100037] From [2] adding response for request === <request TransactionId[100037] ReqId[127] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100037] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200035] ClientPlace [1] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300036] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100037] ClientPlace [0] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[400035] ClientPlace [3] isDead[false] ...
Place(0) [MapRequest] TransId[100037] From [3] adding response for request === <request TransactionId[100037] ReqId[127] type[Get]  key[J]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100037]          ... released }    Success=true
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100037] ReqId[128] type[Put]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100037] ReqId[128] type[Put]  key[J]>
Place(0) [ResilientMapImpl] put[100037]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100037] clientId[0] ...
Place(0) [MapRequest] TransId[100037] From [3] adding response for request === <request TransactionId[100037] ReqId[128] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100037] clientId[0] ...
Place(0) [MapRequest] TransId[100037] From [2] adding response for request === <request TransactionId[100037] ReqId[128] type[Put]  key[J]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600037] ReqId[121] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600037]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600037] ReqId[122] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600037] ReqId[122] type[Abort]  key[null]>
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600037] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600037] ReqId[122] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600037]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[600037] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100037]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100037] ReqId[129] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100037] ReqId[129] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100037]  { await ... 
Place(2) [Transaction] Tx(100037) and Tx(300036) overlapped keys = J,
Place(2) [Transaction] Tx(100037) and Tx(300036) conflict in key [J]
Place(2) [Transaction] Tx(100037) and Tx(300036) conflicting=[true] ...
Place(2) [Replica(2)] Found conflict between transaction[100037]  and [300036] ...
Place(0) [MapRequest] TransId[100037] From [2] adding vote response [0] ...
Place(0) [MapRequest] TransId[100037] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600037]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 17ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100037] ReqId[129] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100037]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100037] ReqId[130] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100037] ReqId[130] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100037] ReqId[130] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100037]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100037] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100037] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600038]  { await ... 
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600038] ReqId[123] type[Get]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600038] ReqId[123] type[Get]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600038] clientId[5] ...
Place(5) [Partition] Partition [3]  GET_V (W) ...
Place(5) [MapRequest] TransId[600038] From [5] adding response for request === <request TransactionId[600038] ReqId[123] type[Get]  key[W]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600038] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] TransId[600038] From [3] adding response for request === <request TransactionId[600038] ReqId[123] type[Get]  key[W]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100037]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 19ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600038]          ... released }    Success=true
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600038] ReqId[124] type[Put]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600038] ReqId[124] type[Put]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600038] clientId[5] ...
Place(5) [ResilientMapImpl] put[600038]  { await ... 
Place(5) [MapRequest] TransId[600038] From [5] adding response for request === <request TransactionId[600038] ReqId[124] type[Put]  key[W]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100038]  { await ... 
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100038] ReqId[131] type[Get]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100038] ReqId[131] type[Get]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100038] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(0) [MapRequest] TransId[100038] From [2] adding response for request === <request TransactionId[100038] ReqId[131] type[Get]  key[J]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400035] ReqId[117] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400035]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400035] ReqId[118] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400035] ReqId[118] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400035] ReqId[118] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400035]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400035] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100038] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600038] clientId[5] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400035] ...
Place(0) [MapRequest] TransId[100038] From [3] adding response for request === <request TransactionId[100038] ReqId[131] type[Get]  key[J]> ..... output[3] exception[null] 
Place(5) [MapRequest] TransId[600038] From [3] adding response for request === <request TransactionId[600038] ReqId[124] type[Put]  key[W]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100038]          ... released }    Success=true
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100038] ReqId[132] type[Put]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100038] ReqId[132] type[Put]  key[J]>
Place(0) [ResilientMapImpl] put[100038]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100038] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100038] clientId[0] ...
Place(0) [MapRequest] TransId[100038] From [2] adding response for request === <request TransactionId[100038] ReqId[132] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100038] From [3] adding response for request === <request TransactionId[100038] ReqId[132] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400035]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 3ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600038]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600038] ReqId[125] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600038] ReqId[125] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600038]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100038]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100038] ReqId[133] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100038] ReqId[133] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100038]  { await ... 
Place(2) [Transaction] Tx(100038) and Tx(300036) overlapped keys = J,
Place(2) [Transaction] Tx(100038) and Tx(300036) conflict in key [J]
Place(2) [Transaction] Tx(100038) and Tx(300036) conflicting=[true] ...
Place(2) [Replica(2)] Found conflict between transaction[100038]  and [300036] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100038] From [2] adding vote response [0] ...
Place(0) [MapRequest] TransId[100038] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(3) [ResilientMapImpl] get[400036]  { await ... 
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400036] ReqId[119] type[Get]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400036] ReqId[119] type[Get]  key[D]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400036] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [MapRequest] TransId[400036] From [3] adding response for request === <request TransactionId[400036] ReqId[119] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400036] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100038] ReqId[133] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300036] ReqId[121] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300036]          ... released }    Success=false
Place(0) [ResilientMapImpl] commitTransaction[100038]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300036] ReqId[122] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100038] ReqId[134] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100038] ReqId[134] type[Abort]  key[null]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300036] ReqId[122] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300036] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300036] ReqId[122] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300036]  { await ... 
Place(0) [MapRequest] Completing request: <request TransactionId[100038] ReqId[134] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100038]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100038] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200035] ReqId[119] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200035]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200035] ReqId[120] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200035] ReqId[120] type[Abort]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200035] ReqId[120] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200035]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300036]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 10ms
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100038] ...
Place(0) [ResilientMapImpl] abortTransaction[100038]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 16ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200035] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200035] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300036] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200035]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 7ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400036] ClientPlace [3] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300037]  { await ... 
Place(0) [ResilientMapImpl] get[100039]  { await ... 
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300037] ReqId[123] type[Get]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300037] ReqId[123] type[Get]  key[J]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100039] ReqId[135] type[Get]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100039] ReqId[135] type[Get]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300037] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [MapRequest] TransId[300037] From [2] adding response for request === <request TransactionId[300037] ReqId[123] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100039] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(0) [MapRequest] TransId[100039] From [2] adding response for request === <request TransactionId[100039] ReqId[135] type[Get]  key[J]> ..... output[3] exception[null] 
Place(1) [ResilientMapImpl] get[200036]  { await ... 
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200036] ReqId[121] type[Get]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200036] ReqId[121] type[Get]  key[S]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200036] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300037] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400036] From [2] adding response for request === <request TransactionId[400036] ReqId[119] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200036] From [0] adding response for request === <request TransactionId[200036] ReqId[121] type[Get]  key[S]> ..... output[4] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200036] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100039] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(1) [MapRequest] TransId[200036] From [5] adding response for request === <request TransactionId[200036] ReqId[121] type[Get]  key[S]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100039] From [3] adding response for request === <request TransactionId[100039] ReqId[135] type[Get]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200036]          ... released }    Success=true
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200036] ReqId[122] type[Put]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200036] ReqId[122] type[Put]  key[S]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200036] clientId[1] ...
Place(1) [ResilientMapImpl] put[200036]  { await ... 
Place(1) [MapRequest] TransId[200036] From [0] adding response for request === <request TransactionId[200036] ReqId[122] type[Put]  key[S]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200036] clientId[1] ...
Place(1) [MapRequest] TransId[200036] From [5] adding response for request === <request TransactionId[200036] ReqId[122] type[Put]  key[S]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100039]          ... released }    Success=true
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100039] ReqId[136] type[Put]  key[J]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400036]          ... released }    Success=true
Place(3) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400036] ReqId[120] type[Put]  key[D]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400036] ReqId[120] type[Put]  key[D]>
Place(3) [ResilientMapImpl] put[400036]  { await ... 
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100039] ReqId[136] type[Put]  key[J]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400036] clientId[3] ...
Place(0) [ResilientMapImpl] put[100039]  { await ... 
Place(3) [MapRequest] TransId[400036] From [3] adding response for request === <request TransactionId[400036] ReqId[120] type[Put]  key[D]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100039] clientId[0] ...
Place(0) [MapRequest] TransId[100039] From [3] adding response for request === <request TransactionId[100039] ReqId[136] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300037] From [3] adding response for request === <request TransactionId[300037] ReqId[123] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100039] clientId[0] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400036] clientId[3] ...
Place(0) [MapRequest] TransId[100039] From [2] adding response for request === <request TransactionId[100039] ReqId[136] type[Put]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200036]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200036] ReqId[123] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200036] ReqId[123] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200036]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[200036] is null
Place(1) [MapRequest] TransId[200036] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200036] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300037]          ... released }    Success=true
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300037] ReqId[124] type[Put]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300037] ReqId[124] type[Put]  key[J]>
Place(2) [ResilientMapImpl] put[300037]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300037] clientId[2] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100039]          ... released }    Success=true
Place(2) [MapRequest] TransId[300037] From [2] adding response for request === <request TransactionId[300037] ReqId[124] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100039] ReqId[137] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100039] ReqId[137] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100039]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Transaction] Tx(100039) and Tx(300037) overlapped keys = J,
Place(2) [Transaction] Tx(100039) and Tx(300037) conflict in key [J]
Place(2) [Transaction] Tx(100039) and Tx(300037) conflicting=[true] ...
Place(2) [Transaction] Tx(100039) and Tx(400036) no overlap
Place(2) [Transaction] Tx(100039) and Tx(400036) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[100039] is::: ConflictReport with active transactions: 300037,   and maxTransId is: 300037
Place(2) [Replica(2)] TransId[100039] Abort my self, NOT ready to commit ...
Place(0) [MapRequest] TransId[100039] From [2] adding vote response [0] ...
Place(0) [MapRequest] TransId[100039] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100039] ReqId[137] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100039]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100039] ReqId[138] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100039] ReqId[138] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100039] ReqId[138] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100039]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100039] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100039] ...
Place(3) [Replica(3)] (ready) Transaction [100039]  is not active. Return Not Ready ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400036] From [2] adding response for request === <request TransactionId[400036] ReqId[120] type[Put]  key[D]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300037] clientId[2] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100039] From [3] adding vote response [0] ...
Place(0) [MapRequest] TransId[100039] From [3] VOTE IGNORED ...
Place(2) [MapRequest] TransId[300037] From [3] adding response for request === <request TransactionId[300037] ReqId[124] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100039]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 6ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400036]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400036] ReqId[121] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400036] ReqId[121] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] put[300037]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300037] ReqId[125] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300037] ReqId[125] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300037]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [ResilientMapImpl] commitTransaction[400036]  { await ... 
Place(2) [Transaction] Tx(300037) and Tx(400036) no overlap
Place(2) [Transaction] Tx(300037) and Tx(400036) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[300037] is null
Place(2) [MapRequest] TransId[300037] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300037] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(2) [Transaction] Tx(400036) and Tx(300037) no overlap
Place(2) [Transaction] Tx(400036) and Tx(300037) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[400036] is null
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400036] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400036] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100040]  { await ... 
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100040] ReqId[139] type[Get]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100040] ReqId[139] type[Get]  key[J]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100040] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100040] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600038] ReqId[125] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600038]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600038] ReqId[126] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600038] ReqId[126] type[Abort]  key[null]>
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600038] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600038] ReqId[126] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600038]  { await ... 
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[600038] ...
Place(0) [MapRequest] TransId[100040] From [3] adding response for request === <request TransactionId[100040] ReqId[139] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100040] From [2] adding response for request === <request TransactionId[100040] ReqId[139] type[Get]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100040]          ... released }    Success=true
Place(0) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100040] ReqId[140] type[Put]  key[J]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100040] ReqId[140] type[Put]  key[J]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600038]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 7ms
Place(0) [ResilientMapImpl] put[100040]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100040] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100040] clientId[0] ...
Place(0) [MapRequest] TransId[100040] From [3] adding response for request === <request TransactionId[100040] ReqId[140] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100040] From [2] adding response for request === <request TransactionId[100040] ReqId[140] type[Put]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100040]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100040] ReqId[141] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100040] ReqId[141] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600039]  { await ... 
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600039] ReqId[127] type[Get]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600039] ReqId[127] type[Get]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600039] clientId[5] ...
Place(0) [ResilientMapImpl] commitTransaction[100040]  { await ... 
Place(5) [Partition] Partition [3]  GET_V (W) ...
Place(5) [MapRequest] TransId[600039] From [5] adding response for request === <request TransactionId[600039] ReqId[127] type[Get]  key[W]> ..... output[5] exception[null] 
Place(2) [Transaction] Tx(100040) and Tx(300037) overlapped keys = J,
Place(2) [Transaction] Tx(100040) and Tx(300037) conflict in key [J]
Place(2) [Transaction] Tx(100040) and Tx(300037) conflicting=[true] ...
Place(2) [Replica(2)] Found conflict between transaction[100040]  and [300037] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600039] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(0) [MapRequest] TransId[100040] From [2] adding vote response [0] ...
Place(0) [MapRequest] TransId[100040] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[100040] ClientPlace [0] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[300037] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[400036] ClientPlace [3] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100040] ReqId[141] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] TransId[600039] From [3] adding response for request === <request TransactionId[600039] ReqId[127] type[Get]  key[W]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] commitTransaction[100040]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100040] ReqId[142] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100040] ReqId[142] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100040] ReqId[142] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100040]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100040] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100040]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 6ms
Place(0)key[J]  all retries failed ...
Place(0) [ResilientMapImpl] get[100041]  { await ... 
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100041] ReqId[143] type[Get]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100041] ReqId[143] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100041] clientId[0] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600039]          ... released }    Success=true
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600039] ReqId[128] type[Put]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600039] ReqId[128] type[Put]  key[W]>
Place(5) [ResilientMapImpl] put[600039]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600039] clientId[5] ...
Place(5) [MapRequest] TransId[600039] From [5] adding response for request === <request TransactionId[600039] ReqId[128] type[Put]  key[W]> ..... output[5] exception[null] 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100040] ...
Place(0) [MapRequest] TransId[100041] From [0] adding response for request === <request TransactionId[100041] ReqId[143] type[Get]  key[X]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600039] clientId[5] ...
Place(5) [MapRequest] TransId[600039] From [3] adding response for request === <request TransactionId[600039] ReqId[128] type[Put]  key[W]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100041] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(0) [MapRequest] TransId[100041] From [5] adding response for request === <request TransactionId[100041] ReqId[143] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200036] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100041] ClientPlace [0] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600039]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600039] ReqId[129] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600039] ReqId[129] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600039]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100041]          ... released }    Success=true
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100041] ReqId[144] type[Put]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100041] ReqId[144] type[Put]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100041] clientId[0] ...
Place(0) [ResilientMapImpl] put[100041]  { await ... 
Place(0) [MapRequest] TransId[100041] From [0] adding response for request === <request TransactionId[100041] ReqId[144] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100041] clientId[0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200036] ReqId[123] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200036]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200036] ReqId[124] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200036] ReqId[124] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200036] ReqId[124] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200036]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200036] ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200036] ...
Place(0) [MapRequest] TransId[100041] From [5] adding response for request === <request TransactionId[100041] ReqId[144] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100041]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100041] ReqId[145] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100041] ReqId[145] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[100041] is null
Place(0) [ResilientMapImpl] commitTransaction[100041]  { await ... 
Place(0) [MapRequest] TransId[100041] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100041] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200036]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 14ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200037]  { await ... 
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200037] ReqId[125] type[Get]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200037] ReqId[125] type[Get]  key[S]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200037] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200037] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(1) [MapRequest] TransId[200037] From [0] adding response for request === <request TransactionId[200037] ReqId[125] type[Get]  key[S]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200037] From [5] adding response for request === <request TransactionId[200037] ReqId[125] type[Get]  key[S]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300037] ReqId[125] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300037]          ... released }    Success=false
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300037] ReqId[126] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300037] ReqId[126] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300037] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300037] ReqId[126] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300037]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400036] ReqId[121] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400036]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400036] ReqId[122] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400036] ReqId[122] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400036] ReqId[122] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400036]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400036] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300037] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400036] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200037]          ... released }    Success=true
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200037] ReqId[126] type[Put]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200037] ReqId[126] type[Put]  key[S]>
Place(1) [ResilientMapImpl] put[200037]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200037] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200037] clientId[1] ...
Place(1) [MapRequest] TransId[200037] From [5] adding response for request === <request TransactionId[200037] ReqId[126] type[Put]  key[S]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200037] From [0] adding response for request === <request TransactionId[200037] ReqId[126] type[Put]  key[S]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400036]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 17ms
Place(3)key[D]  all retries failed ...
Place(3) [ResilientMapImpl] get[400037]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300037]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 6ms
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400037] ReqId[123] type[Get]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400037] ReqId[123] type[Get]  key[J]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400037] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400037] From [3] adding response for request === <request TransactionId[400037] ReqId[123] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400037] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400037] From [2] adding response for request === <request TransactionId[400037] ReqId[123] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200037]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200037] ReqId[127] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200037] ReqId[127] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200037]  { await ... 
Place(0) [Transaction] Tx(200037) and Tx(100041) no overlap
Place(0) [Transaction] Tx(200037) and Tx(100041) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[200037] is null
Place(1) [MapRequest] TransId[200037] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200037] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(2) [ResilientMapImpl] get[300038]  { await ... 
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300038] ReqId[127] type[Get]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300038] ReqId[127] type[Get]  key[J]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400037]          ... released }    Success=true
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400037] ReqId[124] type[Put]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400037] ReqId[124] type[Put]  key[J]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300038] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [ResilientMapImpl] put[400037]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400037] clientId[3] ...
Place(2) [MapRequest] TransId[300038] From [2] adding response for request === <request TransactionId[300038] ReqId[127] type[Get]  key[J]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400037] From [3] adding response for request === <request TransactionId[400037] ReqId[124] type[Put]  key[J]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300038] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400037] clientId[3] ...
Place(2) [MapRequest] TransId[300038] From [3] adding response for request === <request TransactionId[300038] ReqId[127] type[Get]  key[J]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400037] From [2] adding response for request === <request TransactionId[400037] ReqId[124] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300038]          ... released }    Success=true
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300038] ReqId[128] type[Put]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300038] ReqId[128] type[Put]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300038] clientId[2] ...
Place(2) [MapRequest] TransId[300038] From [2] adding response for request === <request TransactionId[300038] ReqId[128] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [ResilientMapImpl] put[300038]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400037]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400037] ReqId[125] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400037] ReqId[125] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400037]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300038] clientId[2] ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400037] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[300038] ClientPlace [2] isDead[false] ...
Place(2) [MapRequest] TransId[300038] From [3] adding response for request === <request TransactionId[300038] ReqId[128] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Transaction] Tx(400037) and Tx(300038) overlapped keys = J,
Place(2) [Transaction] Tx(400037) and Tx(300038) conflict in key [J]
Place(2) [Transaction] Tx(400037) and Tx(300038) conflicting=[true] ...
Place(2) [Replica(2)] ConflictReport for transaction[400037] is::: ConflictReport with active transactions: 300038,   and maxTransId is: 400037
Place(2) [Replica(2)] TransId[400037] Abort other transaction and become ready to commit ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400037] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400037] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300038]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300038] ReqId[129] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300038] ReqId[129] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300038]  { await ... 
Place(2) [Replica(2)] (ready) Transaction [300038]  is not active. Return Not Ready ...
Place(2) [MapRequest] TransId[300038] From [2] adding vote response [0] ...
Place(2) [MapRequest] TransId[300038] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200037] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100041] ClientPlace [0] isDead[false] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300038] ReqId[129] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ResilientMapImpl] commitTransaction[300038]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300038] ReqId[130] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300038] ReqId[130] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300038] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300038] ReqId[130] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300038]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600039] ReqId[129] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600039]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600039] ReqId[130] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600039] ReqId[130] type[Abort]  key[null]>
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600039] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600039] ReqId[130] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600039]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300038] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300038]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 19ms
Place(3) [Replica(3)] calling abortNoResponse for transactionId[600039] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600039]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 7ms
Place(2) [ResilientMapImpl] get[300039]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300039] ReqId[131] type[Get]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300039] ReqId[131] type[Get]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300039] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [MapRequest] TransId[300039] From [2] adding response for request === <request TransactionId[300039] ReqId[131] type[Get]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600040]  { await ... 
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600040] ReqId[131] type[Get]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600040] ReqId[131] type[Get]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600040] clientId[5] ...
Place(5) [Partition] Partition [3]  GET_V (W) ...
Place(5) [MapRequest] TransId[600040] From [5] adding response for request === <request TransactionId[600040] ReqId[131] type[Get]  key[W]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100041] ReqId[145] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100041]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100041] ReqId[146] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100041] ReqId[146] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100041] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100041] ReqId[146] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100041]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100041] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600040] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300039] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(2) [MapRequest] TransId[300039] From [3] adding response for request === <request TransactionId[300039] ReqId[131] type[Get]  key[J]> ..... output[3] exception[null] 
Place(5) [MapRequest] TransId[600040] From [3] adding response for request === <request TransactionId[600040] ReqId[131] type[Get]  key[W]> ..... output[5] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600040]          ... released }    Success=true
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600040] ReqId[132] type[Put]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600040] ReqId[132] type[Put]  key[W]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600040] clientId[5] ...
Place(5) [ResilientMapImpl] put[600040]  { await ... 
Place(5) [MapRequest] TransId[600040] From [5] adding response for request === <request TransactionId[600040] ReqId[132] type[Put]  key[W]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600040] clientId[5] ...
Place(5) [MapRequest] TransId[600040] From [3] adding response for request === <request TransactionId[600040] ReqId[132] type[Put]  key[W]> ..... output[5] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300039]          ... released }    Success=true
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300039] ReqId[132] type[Put]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300039] ReqId[132] type[Put]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300039] clientId[2] ...
Place(2) [ResilientMapImpl] put[300039]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] TransId[300039] From [2] adding response for request === <request TransactionId[300039] ReqId[132] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [ResilientMapImpl] abortTransaction[100041]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 1ms
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300039] clientId[2] ...
Place(2) [MapRequest] TransId[300039] From [3] adding response for request === <request TransactionId[300039] ReqId[132] type[Put]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600040]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600040] ReqId[133] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600040] ReqId[133] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600040]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300039]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100042]  { await ... 
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300039] ReqId[133] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300039] ReqId[133] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100042] ReqId[147] type[Get]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100042] ReqId[147] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100042] clientId[0] ...
Place(2) [ResilientMapImpl] commitTransaction[300039]  { await ... 
Place(2) [Transaction] Tx(300039) and Tx(400037) overlapped keys = J,
Place(2) [Transaction] Tx(300039) and Tx(400037) conflict in key [J]
Place(2) [Transaction] Tx(300039) and Tx(400037) conflicting=[true] ...
Place(2) [Replica(2)] Found conflict between transaction[300039]  and [400037] ...
Place(2) [MapRequest] TransId[300039] From [2] adding vote response [0] ...
Place(2) [MapRequest] TransId[300039] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [MapRequest] TransId[100042] From [0] adding response for request === <request TransactionId[100042] ReqId[147] type[Get]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100042] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(0) [MapRequest] TransId[100042] From [5] adding response for request === <request TransactionId[100042] ReqId[147] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100042]          ... released }    Success=true
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100042] ReqId[148] type[Put]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100042] ReqId[148] type[Put]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100042] clientId[0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300039] ReqId[133] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [MapRequest] TransId[100042] From [0] adding response for request === <request TransactionId[100042] ReqId[148] type[Put]  key[X]> ..... output[2] exception[null] 
Place(2) [ResilientMapImpl] commitTransaction[300039]          ... released }    Success=false
Place(0) [ResilientMapImpl] put[100042]  { await ... 
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300039] ReqId[134] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300039] ReqId[134] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300039] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300039] ReqId[134] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300039]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100042] clientId[0] ...
Place(0) [MapRequest] TransId[100042] From [5] adding response for request === <request TransactionId[100042] ReqId[148] type[Put]  key[X]> ..... output[2] exception[null] 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300039] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200037] ReqId[127] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200037]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200037] ReqId[128] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200037] ReqId[128] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200037] ReqId[128] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200037]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200037] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200037] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100042]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ResilientMapImpl] abortTransaction[300039]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 16ms
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100042] ReqId[149] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100042] ReqId[149] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[100042] is null
Place(0) [MapRequest] TransId[100042] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100042] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100042]  { await ... 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400037] ClientPlace [3] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200037]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 10ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400037] ReqId[125] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400037]          ... released }    Success=false
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400037] ReqId[126] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400037] ReqId[126] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400037] ReqId[126] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400037]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400037] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300040]  { await ... 
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300040] ReqId[135] type[Get]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300040] ReqId[135] type[Get]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300040] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [MapRequest] TransId[300040] From [2] adding response for request === <request TransactionId[300040] ReqId[135] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400037] ...
Place(1) [ResilientMapImpl] get[200038]  { await ... 
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200038] ReqId[129] type[Get]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200038] ReqId[129] type[Get]  key[S]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400037]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 7ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100042] ClientPlace [0] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400038]  { await ... 
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400038] ReqId[127] type[Get]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400038] ReqId[127] type[Get]  key[J]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400038] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400038] From [3] adding response for request === <request TransactionId[400038] ReqId[127] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300040] clientId[2] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400038] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200038] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(2) [MapRequest] TransId[300040] From [3] adding response for request === <request TransactionId[300040] ReqId[135] type[Get]  key[J]> ..... output[3] exception[null] 
Place(3) [MapRequest] TransId[400038] From [2] adding response for request === <request TransactionId[400038] ReqId[127] type[Get]  key[J]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400038]          ... released }    Success=true
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400038] ReqId[128] type[Put]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400038] ReqId[128] type[Put]  key[J]>
Place(3) [ResilientMapImpl] put[400038]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400038] clientId[3] ...
Place(3) [MapRequest] TransId[400038] From [3] adding response for request === <request TransactionId[400038] ReqId[128] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200038] clientId[1] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400038] clientId[3] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(3) [MapRequest] TransId[400038] From [2] adding response for request === <request TransactionId[400038] ReqId[128] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300040]          ... released }    Success=true
Place(2) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300040] ReqId[136] type[Put]  key[J]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300040] ReqId[136] type[Put]  key[J]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300040] clientId[2] ...
Place(2) [ResilientMapImpl] put[300040]  { await ... 
Place(2) [MapRequest] TransId[300040] From [2] adding response for request === <request TransactionId[300040] ReqId[136] type[Put]  key[J]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300040] clientId[2] ...
Place(2) [MapRequest] TransId[300040] From [3] adding response for request === <request TransactionId[300040] ReqId[136] type[Put]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200038] From [0] adding response for request === <request TransactionId[200038] ReqId[129] type[Get]  key[S]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200038] From [5] adding response for request === <request TransactionId[200038] ReqId[129] type[Get]  key[S]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400038]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400038] ReqId[129] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400038] ReqId[129] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400038]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Transaction] Tx(400038) and Tx(300040) overlapped keys = J,
Place(2) [Transaction] Tx(400038) and Tx(300040) conflict in key [J]
Place(2) [Transaction] Tx(400038) and Tx(300040) conflicting=[true] ...
Place(2) [Replica(2)] ConflictReport for transaction[400038] is::: ConflictReport with active transactions: 300040,   and maxTransId is: 400038
Place(2) [Replica(2)] TransId[400038] Abort other transaction and become ready to commit ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300040]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300040] ReqId[137] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300040] ReqId[137] type[PrepareCommit]  key[null]>
Place(2) [Replica(2)] (ready) Transaction [300040]  is not active. Return Not Ready ...
Place(2) [ResilientMapImpl] commitTransaction[300040]  { await ... 
Place(2) [MapRequest] TransId[300040] From [2] adding vote response [0] ...
Place(2) [MapRequest] TransId[300040] Waiting for votes from places [3,] commitStatus is[CancelCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(3) [MapRequest] TransId[400038] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400038] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200038]          ... released }    Success=true
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200038] ReqId[130] type[Put]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200038] ReqId[130] type[Put]  key[S]>
Place(1) [ResilientMapImpl] put[200038]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200038] clientId[1] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200038] clientId[1] ...
Place(1) [MapRequest] TransId[200038] From [0] adding response for request === <request TransactionId[200038] ReqId[130] type[Put]  key[S]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200038] From [5] adding response for request === <request TransactionId[200038] ReqId[130] type[Put]  key[S]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300040] ReqId[137] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(2) [ResilientMapImpl] commitTransaction[300040]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300040] ReqId[138] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300040] ReqId[138] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300040] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300040] ReqId[138] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300040]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200038]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200038] ReqId[131] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200038] ReqId[131] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200038]  { await ... 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Transaction] Tx(200038) and Tx(100042) no overlap
Place(0) [Transaction] Tx(200038) and Tx(100042) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[200038] is null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300040]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 6ms
Place(2)key[J]  all retries failed ...
Place(2) [ResilientMapImpl] get[300041]  { await ... 
Place(2) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300041] ReqId[139] type[Get]  key[O]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300041] ReqId[139] type[Get]  key[O]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300041] clientId[2] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(2) [MapRequest] TransId[300041] From [2] adding response for request === <request TransactionId[300041] ReqId[139] type[Get]  key[O]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200038] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200038] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300041] clientId[2] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(2) [MapRequest] TransId[300041] From [1] adding response for request === <request TransactionId[300041] ReqId[139] type[Get]  key[O]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600040] ReqId[133] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600040]          ... released }    Success=false
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600040] ReqId[134] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600040] ReqId[134] type[Abort]  key[null]>
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600040] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600040] ReqId[134] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600040]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300041]          ... released }    Success=true
Place(2) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300041] ReqId[140] type[Put]  key[O]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300041] ReqId[140] type[Put]  key[O]>
Place(2) [ResilientMapImpl] put[300041]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300041] clientId[2] ...
Place(2) [MapRequest] TransId[300041] From [2] adding response for request === <request TransactionId[300041] ReqId[140] type[Put]  key[O]> ..... output[3] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300041] clientId[2] ...
Place(2) [MapRequest] TransId[300041] From [1] adding response for request === <request TransactionId[300041] ReqId[140] type[Put]  key[O]> ..... output[3] exception[null] 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[600040] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300040] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600040]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 14ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300041]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300041] ReqId[141] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300041] ReqId[141] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300041]  { await ... 
Place(2) [Transaction] Tx(300041) and Tx(400038) no overlap
Place(2) [Transaction] Tx(300041) and Tx(400038) conflicting=[false] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(2) [Replica(2)] ConflictReport for transaction[300041] is null
Place(2) [MapRequest] TransId[300041] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300041] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(1) [Replica(1)] ConflictReport for transaction[300041] is null
Place(2) [MapRequest] TransId[300041] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300041] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600041]  { await ... 
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600041] ReqId[135] type[Get]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600041] ReqId[135] type[Get]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600041] clientId[5] ...
Place(5) [Partition] Partition [3]  GET_V (W) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] TransId[600041] From [5] adding response for request === <request TransactionId[600041] ReqId[135] type[Get]  key[W]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600041] clientId[5] ...
Place(3) [Partition] Partition [3]  GET_V (W) ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300041] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[400038] ClientPlace [3] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100042] ReqId[149] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100042]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100042] ReqId[150] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100042] ReqId[150] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100042] ReqId[150] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100042]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100042] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300041] ReqId[141] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300041] ReqId[141] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300041] ReqId[141] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] TransId[300041] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (O,4) ...
Place(1) [Replica(1)] TransId[300041] Applying commit changes:=> InitVersion[2] value[4] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (O,4) ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100042] ...
Place(5) [MapRequest] TransId[600041] From [3] adding response for request === <request TransactionId[600041] ReqId[135] type[Get]  key[W]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] get[600041]          ... released }    Success=true
Place(5) [ReplicaClient] Key[W] ParitionId: 3 Replicas[5  3   ]
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600041] ReqId[136] type[Put]  key[W]>
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600041] ReqId[136] type[Put]  key[W]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[600041] clientId[5] ...
Place(5) [ResilientMapImpl] put[600041]  { await ... 
Place(5) [MapRequest] TransId[600041] From [5] adding response for request === <request TransactionId[600041] ReqId[136] type[Put]  key[W]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[600041] clientId[5] ...
Place(5) [MapRequest] TransId[600041] From [3] adding response for request === <request TransactionId[600041] ReqId[136] type[Put]  key[W]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100042]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 0ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300041]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300042]  { await ... 
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300042] ReqId[142] type[Get]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300042] ReqId[142] type[Get]  key[R]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300042] clientId[2] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300042] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300042] ClientPlace [2] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[200038] ClientPlace [1] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] put[600041]          ... released }    Success=true
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600041] ReqId[137] type[PrepareCommit]  key[null]>
Place(5) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[600041] ReqId[137] type[PrepareCommit]  key[null]>
Place(5) [ResilientMapImpl] commitTransaction[600041]  { await ... 
Place(0) [ResilientMapImpl] get[100043]  { await ... 
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100043] ReqId[151] type[Get]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100043] ReqId[151] type[Get]  key[X]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100043] clientId[0] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [MapRequest] TransId[100043] From [0] adding response for request === <request TransactionId[100043] ReqId[151] type[Get]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100043] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(0) [MapRequest] TransId[100043] From [5] adding response for request === <request TransactionId[100043] ReqId[151] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100043]          ... released }    Success=true
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100043] ReqId[152] type[Put]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100043] ReqId[152] type[Put]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100043] clientId[0] ...
Place(0) [MapRequest] TransId[100043] From [0] adding response for request === <request TransactionId[100043] ReqId[152] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ResilientMapImpl] put[100043]  { await ... 
Place(2) [MapRequest] TransId[300042] From [5] adding response for request === <request TransactionId[300042] ReqId[142] type[Get]  key[R]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300042] From [0] adding response for request === <request TransactionId[300042] ReqId[142] type[Get]  key[R]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300042]          ... released }    Success=true
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300042] ReqId[143] type[Put]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300042] ReqId[143] type[Put]  key[R]>
Place(2) [ResilientMapImpl] put[300042]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300042] clientId[2] ...
Place(2) [MapRequest] TransId[300042] From [0] adding response for request === <request TransactionId[300042] ReqId[143] type[Put]  key[R]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400038] ReqId[129] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400038]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400038] ReqId[130] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400038] ReqId[130] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400038] ReqId[130] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400038]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400038] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300042] clientId[2] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100043] clientId[0] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400038] ...
Place(2) [MapRequest] TransId[300042] From [5] adding response for request === <request TransactionId[300042] ReqId[143] type[Put]  key[R]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100043] From [5] adding response for request === <request TransactionId[100043] ReqId[152] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100043]          ... released }    Success=true
Place(2) [ResilientMapImpl] put[300042]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100043] ReqId[153] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100043] ReqId[153] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300042] ReqId[144] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300042] ReqId[144] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100043) and Tx(200038) no overlap
Place(0) [Transaction] Tx(100043) and Tx(200038) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100043]  { await ... 
Place(2) [ResilientMapImpl] commitTransaction[300042]  { await ... 
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Transaction] Tx(100043) and Tx(300042) no overlap
Place(0) [Transaction] Tx(100043) and Tx(300042) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100043] is null
Place(0) [MapRequest] TransId[100043] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100043] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [Transaction] Tx(300042) and Tx(200038) no overlap
Place(0) [Transaction] Tx(300042) and Tx(200038) conflicting=[false] ...
Place(0) [Transaction] Tx(300042) and Tx(100043) no overlap
Place(0) [Transaction] Tx(300042) and Tx(100043) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[300042] is null
Place(2) [MapRequest] TransId[300042] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300042] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400038]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 7ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200038] ReqId[131] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200038]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200038] ReqId[132] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200038] ReqId[132] type[Abort]  key[null]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200038] ReqId[132] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200038]  { await ... 
Place(3) [ResilientMapImpl] get[400039]  { await ... 
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400039] ReqId[131] type[Get]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400039] ReqId[131] type[Get]  key[J]>
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400039] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400039] From [3] adding response for request === <request TransactionId[400039] ReqId[131] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200038] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200038] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400039] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400039] From [2] adding response for request === <request TransactionId[400039] ReqId[131] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200038]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 6ms
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400039]          ... released }    Success=true
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400039] ReqId[132] type[Put]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400039] ReqId[132] type[Put]  key[J]>
Place(3) [ResilientMapImpl] put[400039]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400039] clientId[3] ...
Place(3) [MapRequest] TransId[400039] From [3] adding response for request === <request TransactionId[400039] ReqId[132] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400039] clientId[3] ...
Place(3) [MapRequest] TransId[400039] From [2] adding response for request === <request TransactionId[400039] ReqId[132] type[Put]  key[J]> ..... output[3] exception[null] 
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200039]  { await ... 
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ResilientMapImpl] put[400039]          ... released }    Success=true
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200039] ReqId[133] type[Get]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200039] ReqId[133] type[Get]  key[S]>
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400039] ReqId[133] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400039] ReqId[133] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400039]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200039] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(1) [MapRequest] TransId[200039] From [0] adding response for request === <request TransactionId[200039] ReqId[133] type[Get]  key[S]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200039] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(1) [MapRequest] TransId[200039] From [5] adding response for request === <request TransactionId[200039] ReqId[133] type[Get]  key[S]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400039] ClientPlace [3] isDead[false] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] ConflictReport for transaction[400039] is null
Place(3) [MapRequest] TransId[400039] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400039] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200039]          ... released }    Success=true
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200039] ReqId[134] type[Put]  key[S]>
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200039] ReqId[134] type[Put]  key[S]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200039]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200039] clientId[1] ...
Place(1) [MapRequest] TransId[200039] From [0] adding response for request === <request TransactionId[200039] ReqId[134] type[Put]  key[S]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200039] clientId[1] ...
Place(1) [MapRequest] TransId[200039] From [5] adding response for request === <request TransactionId[200039] ReqId[134] type[Put]  key[S]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200039]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200039] ReqId[135] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200039] ReqId[135] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200039]  { await ... 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100043] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[300042] ClientPlace [2] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[200039] ClientPlace [1] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [MapRequest] Completing request: <request TransactionId[600041] ReqId[137] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(5) [ResilientMapImpl] commitTransaction[600041]          ... released }    Success=false
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(5) [ReplicaClient] Added Pending Request <request TransactionId[600041] ReqId[138] type[Abort]  key[null]>
Place(5) [ReplicaClient] submit= true
Place(5) [ReplicaClient] Submitting request: <request TransactionId[600041] ReqId[138] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[600041] ...
Place(5) [MapRequest] Completing request: <request TransactionId[600041] ReqId[138] type[Abort]  key[null]>  Exception: null
Place(5) [ResilientMapImpl] abortTransaction[600041]  { await ... 
Place(0) [Transaction] Tx(200039) and Tx(300042) no overlap
Place(0) [Transaction] Tx(200039) and Tx(300042) conflicting=[false] ...
Place(0) [Transaction] Tx(200039) and Tx(100043) no overlap
Place(0) [Transaction] Tx(200039) and Tx(100043) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[200039] is null
Place(1) [MapRequest] TransId[200039] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200039] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [ResilientMapImpl] abortTransaction[600041]          ... released }    Success=true
Place(5) [ResilientMapImpl] sleeping for 10ms
Place(5)key[W]  all retries failed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[600041] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300042] ReqId[144] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300042]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300042] ReqId[145] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300042] ReqId[145] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300042] ReqId[145] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300042]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300042] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300042] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100043] ReqId[153] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100043]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100043] ReqId[154] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100043] ReqId[154] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100043] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100043] ReqId[154] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100043]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100043] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300042]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 6ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100043]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 2ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300043]  { await ... 
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300043] ReqId[146] type[Get]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300043] ReqId[146] type[Get]  key[R]>
Place(0) [ResilientMapImpl] get[100044]  { await ... 
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100044] ReqId[155] type[Get]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100044] ReqId[155] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100044] clientId[0] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [MapRequest] TransId[100044] From [0] adding response for request === <request TransactionId[100044] ReqId[155] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300043] clientId[2] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300043] From [0] adding response for request === <request TransactionId[300043] ReqId[146] type[Get]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100044] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300043] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] TransId[300043] From [5] adding response for request === <request TransactionId[300043] ReqId[146] type[Get]  key[R]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100044] From [5] adding response for request === <request TransactionId[100044] ReqId[155] type[Get]  key[X]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300043]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100044]          ... released }    Success=true
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300043] ReqId[147] type[Put]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300043] ReqId[147] type[Put]  key[R]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100044] ReqId[156] type[Put]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100044] ReqId[156] type[Put]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100044] clientId[0] ...
Place(2) [ResilientMapImpl] put[300043]  { await ... 
Place(0) [MapRequest] TransId[100044] From [0] adding response for request === <request TransactionId[100044] ReqId[156] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ResilientMapImpl] put[100044]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300043] clientId[2] ...
Place(2) [MapRequest] TransId[300043] From [0] adding response for request === <request TransactionId[300043] ReqId[147] type[Put]  key[R]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400039] ClientPlace [3] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400039] ReqId[133] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400039]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400039] ReqId[134] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400039] ReqId[134] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400039] ReqId[134] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400039]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400039] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400039] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300043] clientId[2] ...
Place(2) [MapRequest] TransId[300043] From [5] adding response for request === <request TransactionId[300043] ReqId[147] type[Put]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100044] clientId[0] ...
Place(0) [MapRequest] TransId[100044] From [5] adding response for request === <request TransactionId[100044] ReqId[156] type[Put]  key[X]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300043]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100044]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300043] ReqId[148] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300043] ReqId[148] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100044] ReqId[157] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100044] ReqId[157] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300043]  { await ... 
Place(0) [Transaction] Tx(100044) and Tx(200039) no overlap
Place(0) [Transaction] Tx(100044) and Tx(200039) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [ResilientMapImpl] commitTransaction[100044]  { await ... 
Place(0) [Transaction] Tx(100044) and Tx(300043) no overlap
Place(0) [Transaction] Tx(100044) and Tx(300043) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100044] is null
Place(0) [MapRequest] TransId[100044] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100044] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [Transaction] Tx(300043) and Tx(100044) no overlap
Place(0) [Transaction] Tx(300043) and Tx(100044) conflicting=[false] ...
Place(0) [Transaction] Tx(300043) and Tx(200039) no overlap
Place(0) [Transaction] Tx(300043) and Tx(200039) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[300043] is null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] TransId[300043] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300043] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400039]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 14ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200039] ReqId[135] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200039]          ... released }    Success=false
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200039] ReqId[136] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200039] ReqId[136] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200039] ReqId[136] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200039]  { await ... 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100044] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[200039] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[300043] ClientPlace [2] isDead[false] ...
Place(3) [ResilientMapImpl] get[400040]  { await ... 
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400040] ReqId[135] type[Get]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400040] ReqId[135] type[Get]  key[J]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400040] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400040] From [3] adding response for request === <request TransactionId[400040] ReqId[135] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400040] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400040] From [2] adding response for request === <request TransactionId[400040] ReqId[135] type[Get]  key[J]> ..... output[3] exception[null] 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200039] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200039]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 19ms
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200039] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400040]          ... released }    Success=true
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400040] ReqId[136] type[Put]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400040] ReqId[136] type[Put]  key[J]>
Place(3) [ResilientMapImpl] put[400040]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400040] clientId[3] ...
Place(3) [MapRequest] TransId[400040] From [3] adding response for request === <request TransactionId[400040] ReqId[136] type[Put]  key[J]> ..... output[3] exception[null] 
Place(1) [ResilientMapImpl] get[200040]  { await ... 
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200040] ReqId[137] type[Get]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200040] ReqId[137] type[Get]  key[S]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200040] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200040] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (S) ...
Place(1) [MapRequest] TransId[200040] From [0] adding response for request === <request TransactionId[200040] ReqId[137] type[Get]  key[S]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200040] From [5] adding response for request === <request TransactionId[200040] ReqId[137] type[Get]  key[S]> ..... output[4] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400040] clientId[3] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400040] From [2] adding response for request === <request TransactionId[400040] ReqId[136] type[Put]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200040]          ... released }    Success=true
Place(1) [ReplicaClient] Key[S] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200040] ReqId[138] type[Put]  key[S]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200040] ReqId[138] type[Put]  key[S]>
Place(1) [ResilientMapImpl] put[200040]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200040] clientId[1] ...
Place(1) [MapRequest] TransId[200040] From [0] adding response for request === <request TransactionId[200040] ReqId[138] type[Put]  key[S]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200040] clientId[1] ...
Place(1) [MapRequest] TransId[200040] From [5] adding response for request === <request TransactionId[200040] ReqId[138] type[Put]  key[S]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400040]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400040] ReqId[137] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400040] ReqId[137] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400040]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200040]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200040] ReqId[139] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200040] ReqId[139] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200040]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] ConflictReport for transaction[400040] is null
Place(0) [Transaction] Tx(200040) and Tx(100044) no overlap
Place(0) [Transaction] Tx(200040) and Tx(100044) conflicting=[false] ...
Place(0) [Transaction] Tx(200040) and Tx(300043) no overlap
Place(0) [Transaction] Tx(200040) and Tx(300043) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (S) ...
Place(0) [Replica(0)] ConflictReport for transaction[200040] is null
Place(1) [MapRequest] TransId[200040] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200040] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400040] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400040] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400040] ClientPlace [3] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100044] ReqId[157] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100044]          ... released }    Success=false
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300043] ReqId[148] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300043]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300043] ReqId[149] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300043] ReqId[149] type[Abort]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100044] ReqId[158] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100044] ReqId[158] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100044] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300043] ReqId[149] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300043]  { await ... 
Place(0) [MapRequest] Completing request: <request TransactionId[100044] ReqId[158] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100044]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300043] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100044] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300043] ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200040] ClientPlace [1] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300043]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 1ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100044]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 13ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300044]  { await ... 
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300044] ReqId[150] type[Get]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300044] ReqId[150] type[Get]  key[R]>
Place(0) [ResilientMapImpl] get[100045]  { await ... 
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300044] clientId[2] ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100045] ReqId[159] type[Get]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100045] ReqId[159] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100045] clientId[0] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [MapRequest] TransId[100045] From [0] adding response for request === <request TransactionId[100045] ReqId[159] type[Get]  key[X]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300044] From [0] adding response for request === <request TransactionId[300044] ReqId[150] type[Get]  key[R]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300044] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100045] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(2) [MapRequest] TransId[300044] From [5] adding response for request === <request TransactionId[300044] ReqId[150] type[Get]  key[R]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100045] From [5] adding response for request === <request TransactionId[100045] ReqId[159] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300044]          ... released }    Success=true
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100045]          ... released }    Success=true
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300044] ReqId[151] type[Put]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300044] ReqId[151] type[Put]  key[R]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100045] ReqId[160] type[Put]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100045] ReqId[160] type[Put]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100045] clientId[0] ...
Place(2) [ResilientMapImpl] put[300044]  { await ... 
Place(0) [MapRequest] TransId[100045] From [0] adding response for request === <request TransactionId[100045] ReqId[160] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ResilientMapImpl] put[100045]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100045] clientId[0] ...
Place(0) [MapRequest] TransId[100045] From [5] adding response for request === <request TransactionId[100045] ReqId[160] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300044] clientId[2] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300044] clientId[2] ...
Place(2) [MapRequest] TransId[300044] From [0] adding response for request === <request TransactionId[300044] ReqId[151] type[Put]  key[R]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300044] From [5] adding response for request === <request TransactionId[300044] ReqId[151] type[Put]  key[R]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300044]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300044] ReqId[152] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300044] ReqId[152] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100045]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100045] ReqId[161] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100045] ReqId[161] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300044]  { await ... 
Place(0) [Transaction] Tx(100045) and Tx(200040) no overlap
Place(0) [Transaction] Tx(100045) and Tx(200040) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [ResilientMapImpl] commitTransaction[100045]  { await ... 
Place(0) [Transaction] Tx(100045) and Tx(300044) no overlap
Place(0) [Transaction] Tx(100045) and Tx(300044) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100045] is null
Place(0) [MapRequest] TransId[100045] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100045] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [Transaction] Tx(300044) and Tx(100045) no overlap
Place(0) [Transaction] Tx(300044) and Tx(100045) conflicting=[false] ...
Place(0) [Transaction] Tx(300044) and Tx(200040) no overlap
Place(0) [Transaction] Tx(300044) and Tx(200040) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[300044] is null
Place(2) [MapRequest] TransId[300044] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300044] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200040] ReqId[139] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200040]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400040] ReqId[137] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400040]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200040] ReqId[140] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] SuPlace(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
bmitting request: <request TransactionId[200040] ReqId[140] type[Abort]  key[null]>
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400040] ReqId[138] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400040] ReqId[138] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400040] ReqId[138] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400040]  { await ... 
Place(1) [MapRequest] Completing request: <request TransactionId[200040] ReqId[140] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200040]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400040] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400040] ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200040] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200040] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200040]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 16ms
Place(1)key[S]  all retries failed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400040]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 10ms
Place(1) [ResilientMapImpl] get[200041]  { await ... 
Place(1) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200041] ReqId[141] type[Get]  key[O]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200041] ReqId[141] type[Get]  key[O]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200041] clientId[1] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(1) [MapRequest] TransId[200041] From [1] adding response for request === <request TransactionId[200041] ReqId[141] type[Get]  key[O]> ..... output[4] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200041] clientId[1] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(1) [MapRequest] TransId[200041] From [2] adding response for request === <request TransactionId[200041] ReqId[141] type[Get]  key[O]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400041]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ResilientMapImpl] get[200041]          ... released }    Success=true
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400041] ReqId[139] type[Get]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400041] ReqId[139] type[Get]  key[J]>
Place(1) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200041] ReqId[142] type[Put]  key[O]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200041] ReqId[142] type[Put]  key[O]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[200041] clientId[1] ...
Place(1) [ResilientMapImpl] put[200041]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400041] clientId[3] ...
Place(1) [MapRequest] TransId[200041] From [1] adding response for request === <request TransactionId[200041] ReqId[142] type[Put]  key[O]> ..... output[4] exception[null] 
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400041] From [3] adding response for request === <request TransactionId[400041] ReqId[139] type[Get]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400041] clientId[3] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[200041] clientId[1] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400041] From [2] adding response for request === <request TransactionId[400041] ReqId[139] type[Get]  key[J]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200041] From [2] adding response for request === <request TransactionId[200041] ReqId[142] type[Put]  key[O]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200041]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400041]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200041] ReqId[143] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200041] ReqId[143] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400041] ReqId[140] type[Put]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400041] ReqId[140] type[Put]  key[J]>
Place(1) [ResilientMapImpl] commitTransaction[200041]  { await ... 
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(3) [ResilientMapImpl] put[400041]  { await ... 
Place(1) [Replica(1)] ConflictReport for transaction[200041] is null
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400041] clientId[3] ...
Place(1) [MapRequest] TransId[200041] From [1] adding vote response [1] ...
Place(1) [MapRequest] TransId[200041] Waiting for votes from places [2,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [1] adding vote response completed ...
Place(3) [MapRequest] TransId[400041] From [3] adding response for request === <request TransactionId[400041] ReqId[140] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400041] clientId[3] ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400041] ClientPlace [3] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[200041] ClientPlace [1] isDead[false] ...
Place(3) [MapRequest] TransId[400041] From [2] adding response for request === <request TransactionId[400041] ReqId[140] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(2) [Transaction] Tx(200041) and Tx(400041) no overlap
Place(2) [Transaction] Tx(200041) and Tx(400041) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[200041] is null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400041]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400041] ReqId[141] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400041] ReqId[141] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400041]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300044] ClientPlace [2] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100045] ClientPlace [0] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Transaction] Tx(400041) and Tx(200041) no overlap
Place(2) [Transaction] Tx(400041) and Tx(200041) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] ConflictReport for transaction[400041] is null
Place(1) [MapRequest] TransId[200041] From [2] adding vote response [1] ...
Place(1) [MapRequest] TransId[200041] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(1) [MapRequest] From [2] adding vote response completed ...
Place(3) [MapRequest] TransId[400041] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400041] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200041] ReqId[143] type[Commit]  key[null]>
Place(1) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[200041] ReqId[143] type[Commit]  key[null]>
Place(1) [Replica(1)] TransId[200041] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (O,5) ...
Place(1) [MapRequest] Completing request: <request TransactionId[200041] ReqId[143] type[Commit]  key[null]>  Exception: null
Place(2) [Replica(2)] TransId[200041] Applying commit changes:=> InitVersion[3] value[5] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (O,5) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200041]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200042]  { await ... 
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200042] ReqId[144] type[Get]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200042] ReqId[144] type[Get]  key[Q]>
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200042] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [MapRequest] TransId[200042] From [5] adding response for request === <request TransactionId[200042] ReqId[144] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200042] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100045] ReqId[161] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300044] ReqId[152] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300044]          ... released }    Success=false
Place(0) [ResilientMapImpl] commitTransaction[100045]          ... released }    Success=false
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100045] ReqId[162] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100045] ReqId[162] type[Abort]  key[null]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300044] ReqId[153] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300044] ReqId[153] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100045] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300044] ReqId[153] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300044]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100045] ReqId[162] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100045]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300044] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100045] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300044] ...
Place(1) [MapRequest] TransId[200042] From [3] adding response for request === <request TransactionId[200042] ReqId[144] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300044]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 0ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100045]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 16ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200042]          ... released }    Success=true
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200042] ReqId[145] type[Put]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200042] ReqId[145] type[Put]  key[Q]>
Place(1) [ResilientMapImpl] put[200042]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200042] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200042] clientId[1] ...
Place(1) [MapRequest] TransId[200042] From [3] adding response for request === <request TransactionId[200042] ReqId[145] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200042] From [5] adding response for request === <request TransactionId[200042] ReqId[145] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200042]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100046]  { await ... 
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200042] ReqId[146] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200042] ReqId[146] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100046] ReqId[163] type[Get]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100046] ReqId[163] type[Get]  key[X]>
Place(2) [ResilientMapImpl] get[300045]  { await ... 
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300045] ReqId[154] type[Get]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300045] ReqId[154] type[Get]  key[R]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100046] clientId[0] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(1) [ResilientMapImpl] commitTransaction[200042]  { await ... 
Place(0) [MapRequest] TransId[100046] From [0] adding response for request === <request TransactionId[100046] ReqId[163] type[Get]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100046] clientId[0] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300045] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300045] From [5] adding response for request === <request TransactionId[300045] ReqId[154] type[Get]  key[R]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100046] From [5] adding response for request === <request TransactionId[100046] ReqId[163] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300045] clientId[2] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300045] From [0] adding response for request === <request TransactionId[300045] ReqId[154] type[Get]  key[R]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300045]          ... released }    Success=true
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(0) [ResilientMapImpl] get[100046]          ... released }    Success=true
Place(0) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300045] ReqId[155] type[Put]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300045] ReqId[155] type[Put]  key[R]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100046] ReqId[164] type[Put]  key[X]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100046] ReqId[164] type[Put]  key[X]>
Place(0) [ResilientMapImpl] put[100046]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100046] clientId[0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300045]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100046] clientId[0] ...
Place(0) [MapRequest] TransId[100046] From [0] adding response for request === <request TransactionId[100046] ReqId[164] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300045] clientId[2] ...
Place(0) [MapRequest] TransId[100046] From [5] adding response for request === <request TransactionId[100046] ReqId[164] type[Put]  key[X]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300045] From [5] adding response for request === <request TransactionId[300045] ReqId[155] type[Put]  key[R]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300045] clientId[2] ...
Place(2) [MapRequest] TransId[300045] From [0] adding response for request === <request TransactionId[300045] ReqId[155] type[Put]  key[R]> ..... output[4] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400041] ClientPlace [3] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300045]          ... released }    Success=true
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300045] ReqId[156] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300045] ReqId[156] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300045]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100046]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100046] ReqId[165] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100046] ReqId[165] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [ResilientMapImpl] commitTransaction[100046]  { await ... 
Place(0) [Transaction] Tx(100046) and Tx(300045) no overlap
Place(0) [Transaction] Tx(100046) and Tx(300045) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[100046] is null
Place(0) [MapRequest] TransId[100046] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100046] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [Transaction] Tx(300045) and Tx(100046) no overlap
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [Transaction] Tx(300045) and Tx(100046) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[300045] is null
Place(2) [MapRequest] TransId[300045] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300045] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400041] ReqId[141] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400041]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400041] ReqId[142] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400041] ReqId[142] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400041] ReqId[142] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400041]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400041] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300045] ClientPlace [2] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100046] ClientPlace [0] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400041]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 6ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400042]  { await ... 
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400041] ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400042] ReqId[143] type[Get]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400042] ReqId[143] type[Get]  key[J]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400042] clientId[3] ...
Place(3) [Partition] Partition [2]  GET_V (J) ...
Place(3) [MapRequest] TransId[400042] From [3] adding response for request === <request TransactionId[400042] ReqId[143] type[Get]  key[J]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400042] clientId[3] ...
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400042] From [2] adding response for request === <request TransactionId[400042] ReqId[143] type[Get]  key[J]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400042]          ... released }    Success=true
Place(3) [ReplicaClient] Key[J] ParitionId: 2 Replicas[2  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400042] ReqId[144] type[Put]  key[J]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400042] ReqId[144] type[Put]  key[J]>
Place(3) [ResilientMapImpl] put[400042]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400042] clientId[3] ...
Place(3) [MapRequest] TransId[400042] From [3] adding response for request === <request TransactionId[400042] ReqId[144] type[Put]  key[J]> ..... output[3] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[400042] clientId[3] ...
Place(3) [MapRequest] TransId[400042] From [2] adding response for request === <request TransactionId[400042] ReqId[144] type[Put]  key[J]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400042]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400042] ReqId[145] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400042] ReqId[145] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400042]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (J) ...
Place(2) [Replica(2)] ConflictReport for transaction[400042] is null
Place(3) [MapRequest] TransId[400042] From [2] adding vote response [1] ...
Place(3) [MapRequest] TransId[400042] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(3) [MapRequest] From [2] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200042] ReqId[146] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200042]          ... released }    Success=false
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200042] ReqId[147] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200042] ReqId[147] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200042] ReqId[147] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200042]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200042] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200042] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200042]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 6ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[400042] ClientPlace [3] isDead[false] ...
Place(1) [ResilientMapImpl] get[200043]  { await ... 
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200043] ReqId[148] type[Get]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200043] ReqId[148] type[Get]  key[Q]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300045] ReqId[156] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300045]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300045] ReqId[157] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300045] ReqId[157] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300045] ReqId[157] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300045]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100046] ReqId[165] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100046]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100046] ReqId[166] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100046] ReqId[166] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100046] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100046] ReqId[166] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100046]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100046] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300045]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 2ms
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300045] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300045] ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100046]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 14ms
Place(0)key[X]  all retries failed ...
Place(0) [ResilientMapImpl] get[100047]  { await ... 
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100047] ReqId[167] type[Get]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100047] ReqId[167] type[Get]  key[D]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100047] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200043] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [MapRequest] TransId[200043] From [5] adding response for request === <request TransactionId[200043] ReqId[148] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(0) [MapRequest] TransId[100047] From [2] adding response for request === <request TransactionId[100047] ReqId[167] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300046]  { await ... 
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300046] ReqId[158] type[Get]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300046] ReqId[158] type[Get]  key[R]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300046] clientId[2] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300046] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300046] From [0] adding response for request === <request TransactionId[300046] ReqId[158] type[Get]  key[R]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300046] From [5] adding response for request === <request TransactionId[300046] ReqId[158] type[Get]  key[R]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100047] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200043] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100047] From [3] adding response for request === <request TransactionId[100047] ReqId[167] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200043] From [3] adding response for request === <request TransactionId[200043] ReqId[148] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200043]          ... released }    Success=true
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200043] ReqId[149] type[Put]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200043] ReqId[149] type[Put]  key[Q]>
Place(1) [ResilientMapImpl] put[200043]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300046]          ... released }    Success=true
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300046] ReqId[159] type[Put]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300046] ReqId[159] type[Put]  key[R]>
Place(2) [ResilientMapImpl] put[300046]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200043] clientId[1] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300046] clientId[2] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200043] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300046] clientId[2] ...
Place(2) [MapRequest] TransId[300046] From [0] adding response for request === <request TransactionId[300046] ReqId[159] type[Put]  key[R]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300046] From [5] adding response for request === <request TransactionId[300046] ReqId[159] type[Put]  key[R]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100047]          ... released }    Success=true
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100047] ReqId[168] type[Put]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100047] ReqId[168] type[Put]  key[D]>
Place(0) [ResilientMapImpl] put[100047]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100047] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100047] clientId[0] ...
Place(0) [MapRequest] TransId[100047] From [2] adding response for request === <request TransactionId[100047] ReqId[168] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100047] From [3] adding response for request === <request TransactionId[100047] ReqId[168] type[Put]  key[D]> ..... output[3] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300046]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300046] ReqId[160] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300046] ReqId[160] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300046]  { await ... 
Place(1) [MapRequest] TransId[200043] From [3] adding response for request === <request TransactionId[200043] ReqId[149] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200043] From [5] adding response for request === <request TransactionId[200043] ReqId[149] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[300046] is null
Place(2) [MapRequest] TransId[300046] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300046] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100047]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100047] ReqId[169] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100047] ReqId[169] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100047]  { await ... 
Place(2) [Transaction] Tx(100047) and Tx(400042) no overlap
Place(2) [Transaction] Tx(100047) and Tx(400042) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[100047] is null
Place(0) [MapRequest] TransId[100047] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100047] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400042] ReqId[145] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400042]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400042] ReqId[146] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400042] ReqId[146] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400042] ReqId[146] type[Abort]  key[null]>  Exception: null
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200043]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200043] ReqId[150] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200043] ReqId[150] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200043]  { await ... 
Place(3) [ResilientMapImpl] abortTransaction[400042]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400042] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[400042] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400042]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 19ms
Place(3)key[J]  all retries failed ...
Place(3) [ResilientMapImpl] get[400043]  { await ... 
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400043] ReqId[147] type[Get]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400043] ReqId[147] type[Get]  key[E]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400043] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400043] From [3] adding response for request === <request TransactionId[400043] ReqId[147] type[Get]  key[E]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400043] clientId[3] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400043] From [5] adding response for request === <request TransactionId[400043] ReqId[147] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400043]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400043] ReqId[148] type[Put]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400043] ReqId[148] type[Put]  key[E]>
Place(3) [ResilientMapImpl] put[400043]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400043] clientId[3] ...
Place(3) [MapRequest] TransId[400043] From [3] adding response for request === <request TransactionId[400043] ReqId[148] type[Put]  key[E]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400043] clientId[3] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400043] From [5] adding response for request === <request TransactionId[400043] ReqId[148] type[Put]  key[E]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400043]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400043] ReqId[149] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400043] ReqId[149] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400043]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[100047] ClientPlace [0] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300046] ClientPlace [2] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300046] ReqId[160] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300046]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300046] ReqId[161] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300046] ReqId[161] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300046] ReqId[161] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300046]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300046] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300046] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100047] ReqId[169] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100047]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100047] ReqId[170] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100047] ReqId[170] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100047] ReqId[170] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100047]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100047] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200043] ReqId[150] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] abortTransaction[300046]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 13ms
Place(1) [ResilientMapImpl] commitTransaction[200043]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100047] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200043] ReqId[151] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200043] ReqId[151] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200043] ReqId[151] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200043]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200043] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200043] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100047]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 2ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200043]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 6ms
Place(2) [ResilientMapImpl] get[300047]  { await ... 
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300047] ReqId[162] type[Get]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300047] ReqId[162] type[Get]  key[R]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300047] clientId[2] ...
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300047] From [0] adding response for request === <request TransactionId[300047] ReqId[162] type[Get]  key[R]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300047] clientId[2] ...
Place(5) [Partition] Partition [4]  GET_V (R) ...
Place(2) [MapRequest] TransId[300047] From [5] adding response for request === <request TransactionId[300047] ReqId[162] type[Get]  key[R]> ..... output[4] exception[null] 
Place(0) [ResilientMapImpl] get[100048]  { await ... 
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100048] ReqId[171] type[Get]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100048] ReqId[171] type[Get]  key[D]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100048] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(0) [MapRequest] TransId[100048] From [3] adding response for request === <request TransactionId[100048] ReqId[171] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300047]          ... released }    Success=true
Place(1) [ResilientMapImpl] get[200044]  { await ... 
Place(2) [ReplicaClient] Key[R] ParitionId: 4 Replicas[0  5   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300047] ReqId[163] type[Put]  key[R]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300047] ReqId[163] type[Put]  key[R]>
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200044] ReqId[152] type[Get]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200044] ReqId[152] type[Get]  key[Q]>
Place(2) [ResilientMapImpl] put[300047]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200044] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [MapRequest] TransId[200044] From [5] adding response for request === <request TransactionId[200044] ReqId[152] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200044] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[300047] clientId[2] ...
Place(1) [MapRequest] TransId[200044] From [3] adding response for request === <request TransactionId[200044] ReqId[152] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300047] clientId[2] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200044]          ... released }    Success=true
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400043] ReqId[149] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400043]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400043] ReqId[150] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400043] ReqId[150] type[Abort]  key[null]>
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200044] ReqId[153] type[Put]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200044] ReqId[153] type[Put]  key[Q]>
Place(1) [ResilientMapImpl] put[200044]  { await ... 
Place(3) [MapRequest] Completing request: <request TransactionId[400043] ReqId[150] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400043]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400043] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200044] clientId[1] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400043] ...
Place(1) [MapRequest] TransId[200044] From [5] adding response for request === <request TransactionId[200044] ReqId[153] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200044] clientId[1] ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [MapRequest] TransId[300047] From [0] adding response for request === <request TransactionId[300047] ReqId[163] type[Put]  key[R]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300047] From [5] adding response for request === <request TransactionId[300047] ReqId[163] type[Put]  key[R]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200044] From [3] adding response for request === <request TransactionId[200044] ReqId[153] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300047]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300047] ReqId[164] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300047] ReqId[164] type[PrepareCommit]  key[null]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100048] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200044]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200044] ReqId[154] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200044] ReqId[154] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300047]  { await ... 
Place(3) [ResilientMapImpl] abortTransaction[400043]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 16ms
Place(1) [ResilientMapImpl] commitTransaction[200044]  { await ... 
Place(0) [MapRequest] TransId[100048] From [2] adding response for request === <request TransactionId[100048] ReqId[171] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [Partition] Partition [4]  GET_V (R) ...
Place(0) [Replica(0)] ConflictReport for transaction[300047] is null
Place(2) [MapRequest] TransId[300047] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300047] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100048]          ... released }    Success=true
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100048] ReqId[172] type[Put]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100048] ReqId[172] type[Put]  key[D]>
Place(0) [ResilientMapImpl] put[100048]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100048] clientId[0] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100048] clientId[0] ...
Place(0) [MapRequest] TransId[100048] From [2] adding response for request === <request TransactionId[100048] ReqId[172] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100048] From [3] adding response for request === <request TransactionId[100048] ReqId[172] type[Put]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400044]  { await ... 
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400044] ReqId[151] type[Get]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400044] ReqId[151] type[Get]  key[E]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400044] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400044] From [3] adding response for request === <request TransactionId[400044] ReqId[151] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100048]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100048] ReqId[173] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100048] ReqId[173] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100048]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[100048] is null
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100048] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100048] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300047] ClientPlace [2] isDead[false] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400044] clientId[3] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400044] From [5] adding response for request === <request TransactionId[400044] ReqId[151] type[Get]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400044]          ... released }    Success=true
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400044] ReqId[152] type[Put]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400044] ReqId[152] type[Put]  key[E]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400044]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400044] clientId[3] ...
Place(3) [MapRequest] TransId[400044] From [3] adding response for request === <request TransactionId[400044] ReqId[152] type[Put]  key[E]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400044] clientId[3] ...
Place(3) [MapRequest] TransId[400044] From [5] adding response for request === <request TransactionId[400044] ReqId[152] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400044]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400044] ReqId[153] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400044] ReqId[153] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400044]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[100048] ClientPlace [0] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200044] ReqId[154] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200044]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200044] ReqId[155] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200044] ReqId[155] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200044] ReqId[155] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200044]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300047] ReqId[164] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300047]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300047] ReqId[165] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300047] ReqId[165] type[Abort]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300047] ReqId[165] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300047]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200044] ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[300047] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[300047] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200044]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 1ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300047]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 16ms
Place(2)key[R]  all retries failed ...
Place(2) [ResilientMapImpl] get[300048]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300048] ReqId[166] type[Get]  key[H]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300048] ReqId[166] type[Get]  key[H]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300048] clientId[2] ...
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(2) [MapRequest] TransId[300048] From [0] adding response for request === <request TransactionId[300048] ReqId[166] type[Get]  key[H]> ..... output[5] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300048] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(2) [MapRequest] TransId[300048] From [1] adding response for request === <request TransactionId[300048] ReqId[166] type[Get]  key[H]> ..... output[5] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[300048] ClientPlace [2] isDead[false] ...
Place(1) [ResilientMapImpl] get[200045]  { await ... 
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100048] ReqId[173] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200045] ReqId[156] type[Get]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200045] ReqId[156] type[Get]  key[Q]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300048]          ... released }    Success=true
Place(2) [ReplicaClient] Key[H] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300048] ReqId[167] type[Put]  key[H]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300048] ReqId[167] type[Put]  key[H]>
Place(0) [ResilientMapImpl] commitTransaction[100048]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100048] ReqId[174] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100048] ReqId[174] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300048]  { await ... 
Place(0) [MapRequest] Completing request: <request TransactionId[100048] ReqId[174] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100048]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100048] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200045] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300048] clientId[2] ...
Place(2) [MapRequest] TransId[300048] From [0] adding response for request === <request TransactionId[300048] ReqId[167] type[Put]  key[H]> ..... output[5] exception[null] 
Place(1) [MapRequest] TransId[200045] From [5] adding response for request === <request TransactionId[200045] ReqId[156] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300048] clientId[2] ...
Place(2) [MapRequest] TransId[300048] From [1] adding response for request === <request TransactionId[300048] ReqId[167] type[Put]  key[H]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200045] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200044] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100048] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100048]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 19ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300048]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300048] ReqId[168] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300048] ReqId[168] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300048]  { await ... 
Place(0) [Partition] Partition [0]  GET_V (H) ...
Place(0) [Replica(0)] ConflictReport for transaction[300048] is null
Place(2) [MapRequest] TransId[300048] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300048] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(1) [Partition] Partition [0]  GET_V (H) ...
Place(1) [Replica(1)] ConflictReport for transaction[300048] is null
Place(1) [MapRequest] TransId[200045] From [3] adding response for request === <request TransactionId[200045] ReqId[156] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300048] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300048] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200045]          ... released }    Success=true
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400044] ReqId[153] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200045] ReqId[157] type[Put]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200045] ReqId[157] type[Put]  key[Q]>
Place(0) [ResilientMapImpl] get[100049]  { await ... 
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100049] ReqId[175] type[Get]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100049] ReqId[175] type[Get]  key[D]>
Place(3) [ResilientMapImpl] commitTransaction[400044]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400044] ReqId[154] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400044] ReqId[154] type[Abort]  key[null]>
Place(1) [ResilientMapImpl] put[200045]  { await ... 
Place(3) [MapRequest] Completing request: <request TransactionId[400044] ReqId[154] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400044]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400044] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100049] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300048] ReqId[168] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300048] ReqId[168] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300048] ReqId[168] type[Commit]  key[null]>  Exception: null
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400044] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100049] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200045] clientId[1] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200045] clientId[1] ...
Place(0) [Replica(0)] TransId[300048] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (H,6) ...
Place(0) [MapRequest] TransId[100049] From [3] adding response for request === <request TransactionId[100049] ReqId[175] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100049] From [2] adding response for request === <request TransactionId[100049] ReqId[175] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100049]          ... released }    Success=true
Place(3) [ResilientMapImpl] abortTransaction[400044]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 6ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300048]          ... released }    Success=true
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ResilientMapImpl] get[300049]  { await ... 
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100049] ReqId[176] type[Put]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100049] ReqId[176] type[Put]  key[D]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300049] ReqId[169] type[Get]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300049] ReqId[169] type[Get]  key[V]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300049] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(0) [ResilientMapImpl] put[100049]  { await ... 
Place(2) [MapRequest] TransId[300049] From [2] adding response for request === <request TransactionId[300049] ReqId[169] type[Get]  key[V]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100049] clientId[0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300049] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(0) [MapRequest] TransId[100049] From [3] adding response for request === <request TransactionId[100049] ReqId[176] type[Put]  key[D]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200045] From [3] adding response for request === <request TransactionId[200045] ReqId[157] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200045] From [5] adding response for request === <request TransactionId[200045] ReqId[157] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(1) [Replica(1)] TransId[300048] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (H,6) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200045]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400045]  { await ... 
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200045] ReqId[158] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200045] ReqId[158] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400045] ReqId[155] type[Get]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400045] ReqId[155] type[Get]  key[E]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200045]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400045] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400045] From [3] adding response for request === <request TransactionId[400045] ReqId[155] type[Get]  key[E]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400045] clientId[3] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400045] From [5] adding response for request === <request TransactionId[400045] ReqId[155] type[Get]  key[E]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400045]          ... released }    Success=true
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400045] ReqId[156] type[Put]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400045] ReqId[156] type[Put]  key[E]>
Place(3) [ResilientMapImpl] put[400045]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400045] clientId[3] ...
Place(3) [MapRequest] TransId[400045] From [3] adding response for request === <request TransactionId[400045] ReqId[156] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300049] From [3] adding response for request === <request TransactionId[300049] ReqId[169] type[Get]  key[V]> ..... output[5] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100049] clientId[0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300049]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300049] ReqId[170] type[Put]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300049] ReqId[170] type[Put]  key[V]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300049] clientId[2] ...
Place(2) [ResilientMapImpl] put[300049]  { await ... 
Place(2) [MapRequest] TransId[300049] From [2] adding response for request === <request TransactionId[300049] ReqId[170] type[Put]  key[V]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300049] clientId[2] ...
Place(0) [MapRequest] TransId[100049] From [2] adding response for request === <request TransactionId[100049] ReqId[176] type[Put]  key[D]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300049] From [3] adding response for request === <request TransactionId[300049] ReqId[170] type[Put]  key[V]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300049]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100049]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100049] ReqId[177] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100049] ReqId[177] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300049] ReqId[171] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300049] ReqId[171] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300049]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Transaction] Tx(300049) and Tx(100049) no overlap
Place(2) [Transaction] Tx(300049) and Tx(100049) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[300049] is null
Place(2) [MapRequest] TransId[300049] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300049] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100049]  { await ... 
Place(2) [Transaction] Tx(100049) and Tx(300049) no overlap
Place(2) [Transaction] Tx(100049) and Tx(300049) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[100049] is null
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300049] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100049] ClientPlace [0] isDead[false] ...
Place(0) [MapRequest] TransId[100049] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100049] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400045] clientId[3] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400045] From [5] adding response for request === <request TransactionId[400045] ReqId[156] type[Put]  key[E]> ..... output[2] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400045]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400045] ReqId[157] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400045] ReqId[157] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400045]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200045] ReqId[158] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200045]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200045] ReqId[159] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200045] ReqId[159] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200045] ReqId[159] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200045]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200045] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200045] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200045]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 0ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200046]  { await ... 
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200046] ReqId[160] type[Get]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200046] ReqId[160] type[Get]  key[Q]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200046] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300049] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100049] ClientPlace [0] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300049] ReqId[171] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300049]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300049] ReqId[172] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300049] ReqId[172] type[Abort]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100049] ReqId[177] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100049]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100049] ReqId[178] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100049] ReqId[178] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100049] ReqId[178] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100049]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300049] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100049] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100049] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300049] ReqId[172] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300049]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300049] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200046] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300049]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 14ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100049]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 17ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200046] From [5] adding response for request === <request TransactionId[200046] ReqId[160] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200046] From [3] adding response for request === <request TransactionId[200046] ReqId[160] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200046]          ... released }    Success=true
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200046] ReqId[161] type[Put]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200046] ReqId[161] type[Put]  key[Q]>
Place(1) [ResilientMapImpl] put[200046]  { await ... 
Place(2) [ResilientMapImpl] get[300050]  { await ... 
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300050] ReqId[173] type[Get]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300050] ReqId[173] type[Get]  key[V]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300050] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(0) [ResilientMapImpl] get[100050]  { await ... 
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100050] ReqId[179] type[Get]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100050] ReqId[179] type[Get]  key[D]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] TransId[300050] From [2] adding response for request === <request TransactionId[300050] ReqId[173] type[Get]  key[V]> ..... output[5] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300050] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100050] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200046] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200046] clientId[1] ...
Place(0) [MapRequest] TransId[100050] From [3] adding response for request === <request TransactionId[100050] ReqId[179] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [MapRequest] TransId[200046] From [5] adding response for request === <request TransactionId[200046] ReqId[161] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200046] From [3] adding response for request === <request TransactionId[200046] ReqId[161] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200046]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200046] ReqId[162] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200046] ReqId[162] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400045] ReqId[157] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400045]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400045] ReqId[158] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400045] ReqId[158] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400045] ReqId[158] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400045]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400045] ...
Place(1) [ResilientMapImpl] commitTransaction[200046]  { await ... 
Place(2) [MapRequest] TransId[300050] From [3] adding response for request === <request TransactionId[300050] ReqId[173] type[Get]  key[V]> ..... output[5] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100050] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400045]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 6ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300050]          ... released }    Success=true
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300050] ReqId[174] type[Put]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300050] ReqId[174] type[Put]  key[V]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300050]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300050] clientId[2] ...
Place(2) [MapRequest] TransId[300050] From [2] adding response for request === <request TransactionId[300050] ReqId[174] type[Put]  key[V]> ..... output[5] exception[null] 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400045] ...
Place(0) [MapRequest] TransId[100050] From [2] adding response for request === <request TransactionId[100050] ReqId[179] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100050]          ... released }    Success=true
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100050] ReqId[180] type[Put]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100050] ReqId[180] type[Put]  key[D]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400046]  { await ... 
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400046] ReqId[159] type[Get]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400046] ReqId[159] type[Get]  key[E]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400046] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(0) [ResilientMapImpl] put[100050]  { await ... 
Place(3) [MapRequest] TransId[400046] From [3] adding response for request === <request TransactionId[400046] ReqId[159] type[Get]  key[E]> ..... output[2] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100050] clientId[0] ...
Place(0) [MapRequest] TransId[100050] From [2] adding response for request === <request TransactionId[100050] ReqId[180] type[Put]  key[D]> ..... output[3] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400046] clientId[3] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400046] From [5] adding response for request === <request TransactionId[400046] ReqId[159] type[Get]  key[E]> ..... output[2] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100050] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300050] clientId[2] ...
Place(2) [MapRequest] TransId[300050] From [3] adding response for request === <request TransactionId[300050] ReqId[174] type[Put]  key[V]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100050] From [3] adding response for request === <request TransactionId[100050] ReqId[180] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100050]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100050] ReqId[181] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100050] ReqId[181] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400046]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300050]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300050] ReqId[175] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300050] ReqId[175] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100050]  { await ... 
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400046] ReqId[160] type[Put]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400046] ReqId[160] type[Put]  key[E]>
Place(3) [ResilientMapImpl] put[400046]  { await ... 
Place(2) [ResilientMapImpl] commitTransaction[300050]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Transaction] Tx(300050) and Tx(100050) no overlap
Place(2) [Transaction] Tx(300050) and Tx(100050) conflicting=[false] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400046] clientId[3] ...
Place(3) [MapRequest] TransId[400046] From [3] adding response for request === <request TransactionId[400046] ReqId[160] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [Replica(2)] ConflictReport for transaction[300050] is null
Place(2) [MapRequest] TransId[300050] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300050] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(2) [Transaction] Tx(100050) and Tx(300050) no overlap
Place(2) [Transaction] Tx(100050) and Tx(300050) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[100050] is null
Place(0) [MapRequest] TransId[100050] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100050] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400046] clientId[3] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] TransId[400046] From [5] adding response for request === <request TransactionId[400046] ReqId[160] type[Put]  key[E]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400046]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400046] ReqId[161] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400046] ReqId[161] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400046]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300050] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100050] ClientPlace [0] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200046] ReqId[162] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200046]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200046] ReqId[163] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200046] ReqId[163] type[Abort]  key[null]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200046] ReqId[163] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200046]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200046] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200046]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 2ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200046] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200047]  { await ... 
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200047] ReqId[164] type[Get]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200047] ReqId[164] type[Get]  key[Q]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200047] clientId[1] ...
Place(3) [Partition] Partition [3]  GET_V (Q) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200047] clientId[1] ...
Place(5) [Partition] Partition [3]  GET_V (Q) ...
Place(1) [MapRequest] TransId[200047] From [3] adding response for request === <request TransactionId[200047] ReqId[164] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200047] From [5] adding response for request === <request TransactionId[200047] ReqId[164] type[Get]  key[Q]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300050] ReqId[175] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300050]          ... released }    Success=false
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100050] ReqId[181] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200047]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300050] ReqId[176] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300050] ReqId[176] type[Abort]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100050]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100050] ReqId[182] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100050] ReqId[182] type[Abort]  key[null]>
Place(1) [ReplicaClient] Key[Q] ParitionId: 3 Replicas[5  3   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200047] ReqId[165] type[Put]  key[Q]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200047] ReqId[165] type[Put]  key[Q]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300050] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300050] ReqId[176] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300050]  { await ... 
Place(1) [ResilientMapImpl] put[200047]  { await ... 
Place(0) [MapRequest] Completing request: <request TransactionId[100050] ReqId[182] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100050]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300050] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[200047] clientId[1] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100050] ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100050] ...
Place(1) [MapRequest] TransId[200047] From [3] adding response for request === <request TransactionId[200047] ReqId[165] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300050]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 2ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100050]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 16ms
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200047] clientId[1] ...
Place(1) [MapRequest] TransId[200047] From [5] adding response for request === <request TransactionId[200047] ReqId[165] type[Put]  key[Q]> ..... output[4] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400046] ReqId[161] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] get[100051]  { await ... 
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ResilientMapImpl] commitTransaction[400046]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ResilientMapImpl] get[300051]  { await ... 
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300051] ReqId[177] type[Get]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300051] ReqId[177] type[Get]  key[V]>
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100051] ReqId[183] type[Get]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100051] ReqId[183] type[Get]  key[D]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300051] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [MapRequest] TransId[300051] From [2] adding response for request === <request TransactionId[300051] ReqId[177] type[Get]  key[V]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400046] ReqId[162] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400046] ReqId[162] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400046] ReqId[162] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400046]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400046] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200047]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100051] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200047] ReqId[166] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200047] ReqId[166] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200047]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400046] ...
Place(0) [MapRequest] TransId[100051] From [2] adding response for request === <request TransactionId[100051] ReqId[183] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300051] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100051] ClientPlace [0] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100051] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [ResilientMapImpl] abortTransaction[400046]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 1ms
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300051] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(0) [MapRequest] TransId[100051] From [3] adding response for request === <request TransactionId[100051] ReqId[183] type[Get]  key[D]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300051] From [3] adding response for request === <request TransactionId[300051] ReqId[177] type[Get]  key[V]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100051]          ... released }    Success=true
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300051]          ... released }    Success=true
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100051] ReqId[184] type[Put]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100051] ReqId[184] type[Put]  key[D]>
Place(3) [ResilientMapImpl] get[400047]  { await ... 
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400047] ReqId[163] type[Get]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400047] ReqId[163] type[Get]  key[E]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300051] ReqId[178] type[Put]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300051] ReqId[178] type[Put]  key[V]>
Place(2) [ResilientMapImpl] put[300051]  { await ... 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300051] clientId[2] ...
Place(2) [MapRequest] TransId[300051] From [2] adding response for request === <request TransactionId[300051] ReqId[178] type[Put]  key[V]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100051]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400047] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400047] From [3] adding response for request === <request TransactionId[400047] ReqId[163] type[Get]  key[E]> ..... output[2] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100051] clientId[0] ...
Place(0) [MapRequest] TransId[100051] From [2] adding response for request === <request TransactionId[100051] ReqId[184] type[Put]  key[D]> ..... output[3] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400047] clientId[3] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(3) [MapRequest] TransId[400047] From [5] adding response for request === <request TransactionId[400047] ReqId[163] type[Get]  key[E]> ..... output[2] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100051] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300051] clientId[2] ...
Place(0) [MapRequest] TransId[100051] From [3] adding response for request === <request TransactionId[100051] ReqId[184] type[Put]  key[D]> ..... output[3] exception[null] 
Place(2) [MapRequest] TransId[300051] From [3] adding response for request === <request TransactionId[300051] ReqId[178] type[Put]  key[V]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] get[400047]          ... released }    Success=true
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300051]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300051] ReqId[179] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300051] ReqId[179] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400047] ReqId[164] type[Put]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400047] ReqId[164] type[Put]  key[E]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400047]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400047] clientId[3] ...
Place(3) [MapRequest] TransId[400047] From [3] adding response for request === <request TransactionId[400047] ReqId[164] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [ResilientMapImpl] commitTransaction[300051]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Transaction] Tx(300051) and Tx(100051) no overlap
Place(2) [Transaction] Tx(300051) and Tx(100051) conflicting=[false] ...
Place(0) [ResilientMapImpl] put[100051]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100051] ReqId[185] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100051] ReqId[185] type[PrepareCommit]  key[null]>
Place(2) [Replica(2)] ConflictReport for transaction[300051] is null
Place(2) [MapRequest] TransId[300051] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300051] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100051]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400047] clientId[3] ...
Place(2) [Transaction] Tx(100051) and Tx(300051) no overlap
Place(2) [Transaction] Tx(100051) and Tx(300051) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(2) [Replica(2)] ConflictReport for transaction[100051] is null
Place(0) [MapRequest] TransId[100051] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100051] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(3) [MapRequest] TransId[400047] From [5] adding response for request === <request TransactionId[400047] ReqId[164] type[Put]  key[E]> ..... output[2] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400047]          ... released }    Success=true
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400047] ReqId[165] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400047] ReqId[165] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] commitTransaction[400047]  { await ... 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300051] ClientPlace [2] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[100051] ClientPlace [0] isDead[false] ...
Place(1) [MapRequest] Completing request: <request TransactionId[200047] ReqId[166] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200047]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200047] ReqId[167] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200047] ReqId[167] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200047] ReqId[167] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200047]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200047] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[200047] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200047]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 13ms
Place(1)key[Q]  all retries failed ...
Place(1) [ResilientMapImpl] get[200048]  { await ... 
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200048] ReqId[168] type[Get]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200048] ReqId[168] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200048] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200048] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(1) [MapRequest] TransId[200048] From [0] adding response for request === <request TransactionId[200048] ReqId[168] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200048] From [5] adding response for request === <request TransactionId[200048] ReqId[168] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200048]          ... released }    Success=true
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200048] ReqId[169] type[Put]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200048] ReqId[169] type[Put]  key[A]>
Place(1) [ResilientMapImpl] put[200048]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200048] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200048] clientId[1] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300051] ReqId[179] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100051] ReqId[185] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300051]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300051] ReqId[180] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300051] ReqId[180] type[Abort]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100051]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100051] ReqId[186] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100051] ReqId[186] type[Abort]  key[null]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300051] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300051] ReqId[180] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300051]  { await ... 
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100051] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100051] ReqId[186] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100051]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100051] ...
Place(1) [MapRequest] TransId[200048] From [5] adding response for request === <request TransactionId[200048] ReqId[169] type[Put]  key[A]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200048] From [0] adding response for request === <request TransactionId[200048] ReqId[169] type[Put]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200048]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200048] ReqId[170] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200048] ReqId[170] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200048]  { await ... 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400047] ReqId[165] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300051]          ... released }    Success=true
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100051]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 9ms
Place(2) [ResilientMapImpl] sleeping for 19ms
Place(3) [ResilientMapImpl] commitTransaction[400047]          ... released }    Success=false
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400047] ReqId[166] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400047] ReqId[166] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400047] ReqId[166] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400047]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400047] ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300051] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[200048] is null
Place(1) [MapRequest] TransId[200048] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200048] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400047]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 0ms
Place(2) [ResilientMapImpl] get[300052]  { await ... 
Place(0) [ResilientMapImpl] get[100052]  { await ... 
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300052] ReqId[181] type[Get]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300052] ReqId[181] type[Get]  key[V]>
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100052] ReqId[187] type[Get]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100052] ReqId[187] type[Get]  key[D]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300052] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [MapRequest] TransId[300052] From [2] adding response for request === <request TransactionId[300052] ReqId[181] type[Get]  key[V]> ..... output[5] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100052] clientId[0] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100052] clientId[0] ...
Place(3) [Partition] Partition [2]  GET_V (D) ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300052] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(2) [MapRequest] TransId[300052] From [3] adding response for request === <request TransactionId[300052] ReqId[181] type[Get]  key[V]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100052] From [3] adding response for request === <request TransactionId[100052] ReqId[187] type[Get]  key[D]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100052] From [2] adding response for request === <request TransactionId[100052] ReqId[187] type[Get]  key[D]> ..... output[3] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100052]          ... released }    Success=true
Place(0) [ReplicaClient] Key[D] ParitionId: 2 Replicas[2  3   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100052] ReqId[188] type[Put]  key[D]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100052] ReqId[188] type[Put]  key[D]>
Place(3) [ResilientMapImpl] get[400048]  { await ... 
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400048] ReqId[167] type[Get]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400048] ReqId[167] type[Get]  key[E]>
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400048] clientId[3] ...
Place(3) [Partition] Partition [3]  GET_V (E) ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300052]          ... released }    Success=true
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300052] ReqId[182] type[Put]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300052] ReqId[182] type[Put]  key[V]>
Place(0) [ResilientMapImpl] put[100052]  { await ... 
Place(3) [MapRequest] TransId[400048] From [3] adding response for request === <request TransactionId[400048] ReqId[167] type[Get]  key[E]> ..... output[2] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300052] clientId[2] ...
Place(2) [ResilientMapImpl] put[300052]  { await ... 
Place(2) [MapRequest] TransId[300052] From [2] adding response for request === <request TransactionId[300052] ReqId[182] type[Put]  key[V]> ..... output[5] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100052] clientId[0] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[100052] clientId[0] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400047] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400048] clientId[3] ...
Place(5) [Partition] Partition [3]  GET_V (E) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100052] From [2] adding response for request === <request TransactionId[100052] ReqId[188] type[Put]  key[D]> ..... output[3] exception[null] 
Place(0) [MapRequest] TransId[100052] From [3] adding response for request === <request TransactionId[100052] ReqId[188] type[Put]  key[D]> ..... output[3] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300052] clientId[2] ...
Place(3) [MapRequest] TransId[400048] From [5] adding response for request === <request TransactionId[400048] ReqId[167] type[Get]  key[E]> ..... output[2] exception[null] 
Place(2) [MapRequest] TransId[300052] From [3] adding response for request === <request TransactionId[300052] ReqId[182] type[Put]  key[V]> ..... output[5] exception[null] 
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300052]          ... released }    Success=true
Place(3) [ResilientMapImpl] get[400048]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Key[E] ParitionId: 3 Replicas[5  3   ]
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400048] ReqId[168] type[Put]  key[E]>
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400048] ReqId[168] type[Put]  key[E]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300052] ReqId[183] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300052] ReqId[183] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300052]  { await ... 
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(3) [ResilientMapImpl] put[400048]  { await ... 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[400048] clientId[3] ...
Place(3) [MapRequest] TransId[400048] From [3] adding response for request === <request TransactionId[400048] ReqId[168] type[Put]  key[E]> ..... output[2] exception[null] 
Place(2) [Transaction] Tx(300052) and Tx(100052) no overlap
Place(2) [Transaction] Tx(300052) and Tx(100052) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[300052] is null
Place(2) [MapRequest] TransId[300052] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300052] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[400048] clientId[3] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100052]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100052] ReqId[189] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100052] ReqId[189] type[PrepareCommit]  key[null]>
Place(2) [Transaction] Tx(100052) and Tx(300052) no overlap
Place(2) [Transaction] Tx(100052) and Tx(300052) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (D) ...
Place(0) [ResilientMapImpl] commitTransaction[100052]  { await ... 
Place(2) [Replica(2)] ConflictReport for transaction[100052] is null
Place(0) [MapRequest] TransId[100052] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100052] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(3) [MapRequest] TransId[400048] From [5] adding response for request === <request TransactionId[400048] ReqId[168] type[Put]  key[E]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] put[400048]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400048] ReqId[169] type[PrepareCommit]  key[null]>
Place(3) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[400048] ReqId[169] type[PrepareCommit]  key[null]>
Place(3) [ResilientMapImpl] commitTransaction[400048]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[100052] ClientPlace [0] isDead[false] ...
Place(2) [Replica(2)] check transaction client  TransId=[300052] ClientPlace [2] isDead[false] ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200048] ClientPlace [1] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200048] ReqId[170] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200048]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200048] ReqId[171] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200048] ReqId[171] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200048] ReqId[171] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200048]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200048] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200048] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200048]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 16ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200049]  { await ... 
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200049] ReqId[172] type[Get]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200049] ReqId[172] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200049] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200049] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(1) [MapRequest] TransId[200049] From [0] adding response for request === <request TransactionId[200049] ReqId[172] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200049] From [5] adding response for request === <request TransactionId[200049] ReqId[172] type[Get]  key[A]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200049]          ... released }    Success=true
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200049] ReqId[173] type[Put]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200049] ReqId[173] type[Put]  key[A]>
Place(1) [ResilientMapImpl] put[200049]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200049] clientId[1] ...
Place(1) [MapRequest] TransId[200049] From [0] adding response for request === <request TransactionId[200049] ReqId[173] type[Put]  key[A]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200049] clientId[1] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200049] From [5] adding response for request === <request TransactionId[200049] ReqId[173] type[Put]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200049]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200049] ReqId[174] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200049] ReqId[174] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200049]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[200049] is null
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300052] ReqId[183] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300052]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300052] ReqId[184] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300052] ReqId[184] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300052] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300052] ReqId[184] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300052]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300052] ...
Place(1) [MapRequest] TransId[200049] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200049] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100052] ReqId[189] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100052]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100052] ReqId[190] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100052] ReqId[190] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[100052] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100052] ReqId[190] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100052]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[100052] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [MapRequest] Completing request: <request TransactionId[400048] ReqId[169] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(3) [ResilientMapImpl] commitTransaction[400048]          ... released }    Success=false
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300052]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 17ms
Place(3) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(3) [ReplicaClient] Added Pending Request <request TransactionId[400048] ReqId[170] type[Abort]  key[null]>
Place(3) [ReplicaClient] submit= true
Place(3) [ReplicaClient] Submitting request: <request TransactionId[400048] ReqId[170] type[Abort]  key[null]>
Place(3) [MapRequest] Completing request: <request TransactionId[400048] ReqId[170] type[Abort]  key[null]>  Exception: null
Place(3) [ResilientMapImpl] abortTransaction[400048]  { await ... 
Place(3) [Replica(3)] calling abortNoResponse for transactionId[400048] ...
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100052]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 8ms
Place(0)key[D]  all retries failed ...
Place(0) [ResilientMapImpl] get[100053]  { await ... 
Place(0) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100053] ReqId[191] type[Get]  key[O]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100053] ReqId[191] type[Get]  key[O]>
Place(5) [Replica(5)] calling abortNoResponse for transactionId[400048] ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100053] clientId[0] ...
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(0) [MapRequest] TransId[100053] From [2] adding response for request === <request TransactionId[100053] ReqId[191] type[Get]  key[O]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100053] clientId[0] ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(2) [ResilientMapImpl] get[300053]  { await ... 
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300053] ReqId[185] type[Get]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300053] ReqId[185] type[Get]  key[V]>
Place(3) [ReplicaClient] Check pending transactions new iteration ...
Place(3) [ResilientMapImpl] abortTransaction[400048]          ... released }    Success=true
Place(3) [ResilientMapImpl] sleeping for 2ms
Place(3)key[E]  all retries failed ...
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300053] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [MapRequest] TransId[300053] From [2] adding response for request === <request TransactionId[300053] ReqId[185] type[Get]  key[V]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100053] From [1] adding response for request === <request TransactionId[100053] ReqId[191] type[Get]  key[O]> ..... output[5] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200049] ClientPlace [1] isDead[false] ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300053] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100053]          ... released }    Success=true
Place(0) [ReplicaClient] Key[O] ParitionId: 1 Replicas[1  2   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100053] ReqId[192] type[Put]  key[O]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100053] ReqId[192] type[Put]  key[O]>
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100053] clientId[0] ...
Place(0) [ResilientMapImpl] put[100053]  { await ... 
Place(0) [MapRequest] TransId[100053] From [1] adding response for request === <request TransactionId[100053] ReqId[192] type[Put]  key[O]> ..... output[5] exception[null] 
Place(2) [Replica(2)] getOrAddActiveTransaction transId[100053] clientId[0] ...
Place(2) [MapRequest] TransId[300053] From [3] adding response for request === <request TransactionId[300053] ReqId[185] type[Get]  key[V]> ..... output[5] exception[null] 
Place(0) [MapRequest] TransId[100053] From [2] adding response for request === <request TransactionId[100053] ReqId[192] type[Put]  key[O]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300053]          ... released }    Success=true
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300053] ReqId[186] type[Put]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300053] ReqId[186] type[Put]  key[V]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300053] clientId[2] ...
Place(2) [MapRequest] TransId[300053] From [2] adding response for request === <request TransactionId[300053] ReqId[186] type[Put]  key[V]> ..... output[5] exception[null] 
Place(2) [ResilientMapImpl] put[300053]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100053]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100053] ReqId[193] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100053] ReqId[193] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100053]  { await ... 
Place(2) [Partition] Partition [1]  GET_V (O) ...
Place(2) [Transaction] Tx(100053) and Tx(300053) no overlap
Place(2) [Transaction] Tx(100053) and Tx(300053) conflicting=[false] ...
Place(2) [Replica(2)] ConflictReport for transaction[100053] is null
Place(0) [MapRequest] TransId[100053] From [2] adding vote response [1] ...
Place(0) [MapRequest] TransId[100053] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [2] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Partition] Partition [1]  GET_V (O) ...
Place(1) [Replica(1)] ConflictReport for transaction[100053] is null
Place(0) [MapRequest] TransId[100053] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100053] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300053] clientId[2] ...
Place(2) [MapRequest] TransId[300053] From [3] adding response for request === <request TransactionId[300053] ReqId[186] type[Put]  key[V]> ..... output[5] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300053]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100053] ReqId[193] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100053] ReqId[193] type[Commit]  key[null]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300053] ReqId[187] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300053] ReqId[187] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300053]  { await ... 
Place(2) [Transaction] Tx(300053) and Tx(100053) no overlap
Place(2) [Transaction] Tx(300053) and Tx(100053) conflicting=[false] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [Replica(2)] ConflictReport for transaction[300053] is null
Place(2) [MapRequest] TransId[300053] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300053] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(0) [MapRequest] Completing request: <request TransactionId[100053] ReqId[193] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[100053] Applying commit changes:=> InitVersion[4] value[6] partitionId[1] readOnly[false] deleted[false]

Place(1) [Partition] Partition [1]  PUT (O,6) ...
Place(2) [Replica(2)] TransId[100053] Applying commit changes:=> InitVersion[4] value[6] partitionId[1] readOnly[false] deleted[false]

Place(2) [Partition] Partition [1]  PUT (O,6) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100053]          ... released }    Success=true
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100054]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100054] ReqId[194] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100054] ReqId[194] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100054] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100054] From [0] adding response for request === <request TransactionId[100054] ReqId[194] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100054] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100054] From [5] adding response for request === <request TransactionId[100054] ReqId[194] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100054]          ... released }    Success=true
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100054] ReqId[195] type[Put]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100054] ReqId[195] type[Put]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100054] clientId[0] ...
Place(0) [MapRequest] TransId[100054] From [0] adding response for request === <request TransactionId[100054] ReqId[195] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ResilientMapImpl] put[100054]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100054] clientId[0] ...
Place(0) [MapRequest] TransId[100054] From [5] adding response for request === <request TransactionId[100054] ReqId[195] type[Put]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100054]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100054] ReqId[196] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100054] ReqId[196] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100054) and Tx(200049) overlapped keys = A,
Place(0) [Transaction] Tx(100054) and Tx(200049) conflict in key [A]
Place(0) [Transaction] Tx(100054) and Tx(200049) conflicting=[true] ...
Place(0) [Replica(0)] Found conflict between transaction[100054]  and [200049] ...
Place(0) [MapRequest] TransId[100054] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100054] Waiting for votes from places [5,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100054]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100054] ReqId[196] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100054]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100054] ReqId[197] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100054] ReqId[197] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100054] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100054] ReqId[197] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100054]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100054] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100054]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 1ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200049] ReqId[174] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200049]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200049] ReqId[175] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200049] ReqId[175] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200049] ReqId[175] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200049]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200049] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200049] ...
Place(0) [ResilientMapImpl] get[100055]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100055] ReqId[198] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100055] ReqId[198] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100055] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100055] From [0] adding response for request === <request TransactionId[100055] ReqId[198] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100055] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100055] From [5] adding response for request === <request TransactionId[100055] ReqId[198] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200049]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 14ms
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300053] ClientPlace [2] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100055]          ... released }    Success=true
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100055] ReqId[199] type[Put]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100055] ReqId[199] type[Put]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100055] clientId[0] ...
Place(0) [MapRequest] TransId[100055] From [0] adding response for request === <request TransactionId[100055] ReqId[199] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ResilientMapImpl] put[100055]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100055] clientId[0] ...
Place(1) [ResilientMapImpl] get[200050]  { await ... 
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200050] ReqId[176] type[Get]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200050] ReqId[176] type[Get]  key[A]>
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100055] ClientPlace [0] isDead[false] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200050] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200050] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100055] From [5] adding response for request === <request TransactionId[100055] ReqId[199] type[Put]  key[A]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100055]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100055] ReqId[200] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100055] ReqId[200] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Transaction] Tx(100055) and Tx(200050) overlapped keys = A,
Place(0) [Transaction] Tx(100055) and Tx(200050) conflict in key [A]
Place(0) [Transaction] Tx(100055) and Tx(200050) conflicting=[true] ...
Place(0) [ResilientMapImpl] commitTransaction[100055]  { await ... 
Place(0) [Replica(0)] ConflictReport for transaction[100055] is::: ConflictReport with active transactions: 200050,   and maxTransId is: 200050
Place(0) [Replica(0)] TransId[100055] Abort my self, NOT ready to commit ...
Place(0) [MapRequest] TransId[100055] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100055] Waiting for votes from places [5,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200050] From [5] adding response for request === <request TransactionId[200050] ReqId[176] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200050] From [0] adding response for request === <request TransactionId[200050] ReqId[176] type[Get]  key[A]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300053] ReqId[187] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300053]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300053] ReqId[188] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300053] ReqId[188] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300053] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300053] ReqId[188] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300053]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100055] ReqId[200] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100055]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100055] ReqId[201] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100055] ReqId[201] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100055] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100055] ReqId[201] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100055]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100055] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200050]          ... released }    Success=true
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200050] ReqId[177] type[Put]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200050] ReqId[177] type[Put]  key[A]>
Place(1) [ResilientMapImpl] put[200050]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200050] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200050] clientId[1] ...
Place(1) [MapRequest] TransId[200050] From [0] adding response for request === <request TransactionId[200050] ReqId[177] type[Put]  key[A]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300053]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 16ms
Place(1) [MapRequest] TransId[200050] From [5] adding response for request === <request TransactionId[200050] ReqId[177] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100055]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 4ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200050]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200050] ReqId[178] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200050] ReqId[178] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200050]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[200050] is null
Place(1) [MapRequest] TransId[200050] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200050] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(2) [ResilientMapImpl] get[300054]  { await ... 
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300054] ReqId[189] type[Get]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300054] ReqId[189] type[Get]  key[V]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300054] clientId[2] ...
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [MapRequest] TransId[300054] From [2] adding response for request === <request TransactionId[300054] ReqId[189] type[Get]  key[V]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] get[100056]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100056] ReqId[202] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100056] ReqId[202] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100056] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100056] From [0] adding response for request === <request TransactionId[100056] ReqId[202] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100056] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100056] From [5] adding response for request === <request TransactionId[100056] ReqId[202] type[Get]  key[A]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300054] clientId[2] ...
Place(3) [Partition] Partition [2]  GET_V (V) ...
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300053] ...
Place(2) [MapRequest] TransId[300054] From [3] adding response for request === <request TransactionId[300054] ReqId[189] type[Get]  key[V]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] get[300054]          ... released }    Success=true
Place(2) [ReplicaClient] Key[V] ParitionId: 2 Replicas[2  3   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300054] ReqId[190] type[Put]  key[V]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300054] ReqId[190] type[Put]  key[V]>
Place(2) [Replica(2)] getOrAddActiveTransaction transId[300054] clientId[2] ...
Place(2) [ResilientMapImpl] put[300054]  { await ... 
Place(2) [MapRequest] TransId[300054] From [2] adding response for request === <request TransactionId[300054] ReqId[190] type[Put]  key[V]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100056]          ... released }    Success=true
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100056] ReqId[203] type[Put]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100056] ReqId[203] type[Put]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100056] clientId[0] ...
Place(0) [ResilientMapImpl] put[100056]  { await ... 
Place(0) [MapRequest] TransId[100056] From [0] adding response for request === <request TransactionId[100056] ReqId[203] type[Put]  key[A]> ..... output[4] exception[null] 
Place(3) [Replica(3)] getOrAddActiveTransaction transId[300054] clientId[2] ...
Place(2) [MapRequest] TransId[300054] From [3] adding response for request === <request TransactionId[300054] ReqId[190] type[Put]  key[V]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100056] clientId[0] ...
Place(0) [MapRequest] TransId[100056] From [5] adding response for request === <request TransactionId[100056] ReqId[203] type[Put]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300054]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300054] ReqId[191] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300054] ReqId[191] type[PrepareCommit]  key[null]>
Place(2) [Partition] Partition [2]  GET_V (V) ...
Place(2) [ResilientMapImpl] commitTransaction[300054]  { await ... 
Place(2) [Replica(2)] ConflictReport for transaction[300054] is null
Place(2) [MapRequest] TransId[300054] From [2] adding vote response [1] ...
Place(2) [MapRequest] TransId[300054] Waiting for votes from places [3,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [2] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100056]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100056] ReqId[204] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100056] ReqId[204] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100056) and Tx(200050) overlapped keys = A,
Place(0) [Transaction] Tx(100056) and Tx(200050) conflict in key [A]
Place(0) [Transaction] Tx(100056) and Tx(200050) conflicting=[true] ...
Place(0) [Replica(0)] Found conflict between transaction[100056]  and [200050] ...
Place(0) [MapRequest] TransId[100056] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100056] Waiting for votes from places [5,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100056]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100056] ReqId[204] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100056]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100056] ReqId[205] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100056] ReqId[205] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100056] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100056] ReqId[205] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100056]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100056] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100056]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 6ms
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [Replica(2)] check transaction client  TransId=[300054] ClientPlace [2] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200050] ClientPlace [1] isDead[false] ...
Place(0) [ResilientMapImpl] get[100057]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100057] ReqId[206] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100057] ReqId[206] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100057] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100057] From [0] adding response for request === <request TransactionId[100057] ReqId[206] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100057] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100057] From [5] adding response for request === <request TransactionId[100057] ReqId[206] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100057]          ... released }    Success=true
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100057] ReqId[207] type[Put]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100057] ReqId[207] type[Put]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100057] clientId[0] ...
Place(0) [MapRequest] TransId[100057] From [0] adding response for request === <request TransactionId[100057] ReqId[207] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ResilientMapImpl] put[100057]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100057] clientId[0] ...
Place(0) [MapRequest] TransId[100057] From [5] adding response for request === <request TransactionId[100057] ReqId[207] type[Put]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100057]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100057] ReqId[208] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100057] ReqId[208] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100057) and Tx(200050) overlapped keys = A,
Place(0) [Transaction] Tx(100057) and Tx(200050) conflict in key [A]
Place(0) [Transaction] Tx(100057) and Tx(200050) conflicting=[true] ...
Place(0) [Replica(0)] Found conflict between transaction[100057]  and [200050] ...
Place(0) [MapRequest] TransId[100057] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100057] Waiting for votes from places [5,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100057]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100057] ReqId[208] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100057]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100057] ReqId[209] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100057] ReqId[209] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100057] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100057] ReqId[209] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100057]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100057] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100057]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 4ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200050] ReqId[178] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200050]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200050] ReqId[179] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200050] ReqId[179] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200050] ReqId[179] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200050]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200050] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200050] ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100058]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100058] ReqId[210] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100058] ReqId[210] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100058] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100058] From [0] adding response for request === <request TransactionId[100058] ReqId[210] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100058] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100058] From [5] adding response for request === <request TransactionId[100058] ReqId[210] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200050]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 2ms
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100058]          ... released }    Success=true
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100058] ReqId[211] type[Put]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100058] ReqId[211] type[Put]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100058] clientId[0] ...
Place(0) [MapRequest] TransId[100058] From [0] adding response for request === <request TransactionId[100058] ReqId[211] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ResilientMapImpl] put[100058]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100058] clientId[0] ...
Place(1) [ResilientMapImpl] get[200051]  { await ... 
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200051] ReqId[180] type[Get]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200051] ReqId[180] type[Get]  key[A]>
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [MapRequest] Completing request: <request TransactionId[300054] ReqId[191] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(2) [ResilientMapImpl] commitTransaction[300054]          ... released }    Success=false
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300054] ReqId[192] type[Abort]  key[null]>
Place(2) [ReplicaClient] submit= true
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300054] ReqId[192] type[Abort]  key[null]>
Place(2) [Replica(2)] calling abortNoResponse for transactionId[300054] ...
Place(2) [MapRequest] Completing request: <request TransactionId[300054] ReqId[192] type[Abort]  key[null]>  Exception: null
Place(2) [ResilientMapImpl] abortTransaction[300054]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] abortTransaction[300054]          ... released }    Success=true
Place(2) [ResilientMapImpl] sleeping for 9ms
Place(2)key[V]  all retries failed ...
Place(2) [ResilientMapImpl] get[300055]  { await ... 
Place(2) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300055] ReqId[193] type[Get]  key[Z]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300055] ReqId[193] type[Get]  key[Z]>
Place(3) [Replica(3)] calling abortNoResponse for transactionId[300054] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200051] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300055] clientId[2] ...
Place(0) [MapRequest] TransId[100058] From [5] adding response for request === <request TransactionId[100058] ReqId[211] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200051] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(2) [MapRequest] TransId[300055] From [0] adding response for request === <request TransactionId[300055] ReqId[193] type[Get]  key[Z]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200051] From [0] adding response for request === <request TransactionId[200051] ReqId[180] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300055] clientId[2] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [MapRequest] TransId[200051] From [5] adding response for request === <request TransactionId[200051] ReqId[180] type[Get]  key[A]> ..... output[4] exception[null] 
Place(2) [Replica(2)] checkDeadReplicaClient new iteration ...
Place(2) [MapRequest] TransId[300055] From [1] adding response for request === <request TransactionId[300055] ReqId[193] type[Get]  key[Z]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100058]          ... released }    Success=true
Place(2) [ResilientMapImpl] get[300055]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100058] ReqId[212] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100058] ReqId[212] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300055] ReqId[194] type[Put]  key[Z]>
Place(2) [ReplicaClient] Submitting request: <request TransactionId[300055] ReqId[194] type[Put]  key[Z]>
Place(2) [ResilientMapImpl] put[300055]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Transaction] Tx(100058) and Tx(300055) no overlap
Place(0) [Transaction] Tx(100058) and Tx(300055) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100058]  { await ... 
Place(0) [Transaction] Tx(100058) and Tx(200051) overlapped keys = A,
Place(0) [Transaction] Tx(100058) and Tx(200051) conflict in key [A]
Place(0) [Transaction] Tx(100058) and Tx(200051) conflicting=[true] ...
Place(0) [Replica(0)] ConflictReport for transaction[100058] is::: ConflictReport with active transactions: 200051,   and maxTransId is: 200051
Place(0) [Replica(0)] TransId[100058] Abort my self, NOT ready to commit ...
Place(0) [MapRequest] TransId[100058] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100058] Waiting for votes from places [5,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[300055] clientId[2] ...
Place(1) [Replica(1)] getOrAddActiveTransaction transId[300055] clientId[2] ...
Place(2) [MapRequest] TransId[300055] From [0] adding response for request === <request TransactionId[300055] ReqId[194] type[Put]  key[Z]> ..... output[4] exception[null] 
Place(2) [MapRequest] TransId[300055] From [1] adding response for request === <request TransactionId[300055] ReqId[194] type[Put]  key[Z]> ..... output[4] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200051] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[300055] ClientPlace [2] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200051]          ... released }    Success=true
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200051] ReqId[181] type[Put]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200051] ReqId[181] type[Put]  key[A]>
Place(1) [ResilientMapImpl] put[200051]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200051] clientId[1] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200051] clientId[1] ...
Place(1) [MapRequest] TransId[200051] From [5] adding response for request === <request TransactionId[200051] ReqId[181] type[Put]  key[A]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200051] From [0] adding response for request === <request TransactionId[200051] ReqId[181] type[Put]  key[A]> ..... output[4] exception[null] 
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] put[300055]          ... released }    Success=true
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300055] ReqId[195] type[PrepareCommit]  key[null]>
Place(2) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[300055] ReqId[195] type[PrepareCommit]  key[null]>
Place(2) [ResilientMapImpl] commitTransaction[300055]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100058] ReqId[212] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100058]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100058] ReqId[213] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100058] ReqId[213] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100058] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100058] ReqId[213] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100058]  { await ... 
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [Replica(1)] ConflictReport for transaction[300055] is null
Place(0) [Transaction] Tx(300055) and Tx(200051) no overlap
Place(0) [Transaction] Tx(300055) and Tx(200051) conflicting=[false] ...
Place(0) [Replica(0)] ConflictReport for transaction[300055] is null
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100058] ...
Place(2) [MapRequest] TransId[300055] From [1] adding vote response [1] ...
Place(2) [MapRequest] TransId[300055] Waiting for votes from places [0,] commitStatus is[UnusedCommit] 
Place(2) [MapRequest] From [1] adding vote response completed ...
Place(2) [MapRequest] TransId[300055] From [0] adding vote response [1] ...
Place(2) [MapRequest] TransId[300055] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(2) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200051]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200051] ReqId[182] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200051] ReqId[182] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200051]  { await ... 
Place(0) [Transaction] Tx(200051) and Tx(300055) no overlap
Place(0) [Transaction] Tx(200051) and Tx(300055) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[200051] is null
Place(1) [MapRequest] TransId[200051] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200051] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(2) [ReplicaClient] Added Pending Request <request TransactionId[300055] ReqId[195] type[Commit]  key[null]>
Place(2) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[300055] ReqId[195] type[Commit]  key[null]>
Place(2) [MapRequest] Completing request: <request TransactionId[300055] ReqId[195] type[Commit]  key[null]>  Exception: null
Place(0) [Replica(0)] TransId[300055] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (Z,5) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100058]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 0ms
Place(1) [Replica(1)] TransId[300055] Applying commit changes:=> InitVersion[3] value[5] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (Z,5) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ReplicaClient] Check pending transactions new iteration ...
Place(2) [ResilientMapImpl] commitTransaction[300055]          ... released }    Success=true
Place(0) [ResilientMapImpl] get[100059]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100059] ReqId[214] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100059] ReqId[214] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100059] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100059] From [0] adding response for request === <request TransactionId[100059] ReqId[214] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100059] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100059] From [5] adding response for request === <request TransactionId[100059] ReqId[214] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100059]          ... released }    Success=true
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100059] ReqId[215] type[Put]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100059] ReqId[215] type[Put]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100059] clientId[0] ...
Place(0) [MapRequest] TransId[100059] From [0] adding response for request === <request TransactionId[100059] ReqId[215] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ResilientMapImpl] put[100059]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100059] clientId[0] ...
Place(0) [MapRequest] TransId[100059] From [5] adding response for request === <request TransactionId[100059] ReqId[215] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100059]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100059] ReqId[216] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100059] ReqId[216] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100059) and Tx(200051) overlapped keys = A,
Place(0) [Transaction] Tx(100059) and Tx(200051) conflict in key [A]
Place(0) [Transaction] Tx(100059) and Tx(200051) conflicting=[true] ...
Place(0) [Replica(0)] Found conflict between transaction[100059]  and [200051] ...
Place(0) [MapRequest] TransId[100059] From [0] adding vote response [0] ...
Place(0) [MapRequest] TransId[100059] Waiting for votes from places [5,] commitStatus is[CancelCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ResilientMapImpl] commitTransaction[100059]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100059] ReqId[216] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.CommitVotingFailedException
Place(0) [ResilientMapImpl] commitTransaction[100059]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100059] ReqId[217] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100059] ReqId[217] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100059] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100059] ReqId[217] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100059]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100059] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100059]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 10ms
Place(0)key[A]  all retries failed ...
Place(0) [ResilientMapImpl] get[100060]  { await ... 
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100060] ReqId[218] type[Get]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100060] ReqId[218] type[Get]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100060] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100060] From [0] adding response for request === <request TransactionId[100060] ReqId[218] type[Get]  key[M]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100060] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100060] From [5] adding response for request === <request TransactionId[100060] ReqId[218] type[Get]  key[M]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100060]          ... released }    Success=true
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100060] ReqId[219] type[Put]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100060] ReqId[219] type[Put]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100060] clientId[0] ...
Place(0) [MapRequest] TransId[100060] From [0] adding response for request === <request TransactionId[100060] ReqId[219] type[Put]  key[M]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100060]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100060] clientId[0] ...
Place(0) [MapRequest] TransId[100060] From [5] adding response for request === <request TransactionId[100060] ReqId[219] type[Put]  key[M]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100060]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100060] ReqId[220] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100060] ReqId[220] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100060) and Tx(200051) no overlap
Place(0) [Transaction] Tx(100060) and Tx(200051) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100060]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] ConflictReport for transaction[100060] is null
Place(0) [MapRequest] TransId[100060] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100060] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100060] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[200051] ClientPlace [1] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200051] ReqId[182] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200051]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200051] ReqId[183] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200051] ReqId[183] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200051] ReqId[183] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200051]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200051] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200051]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 19ms
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200051] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200052]  { await ... 
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200052] ReqId[184] type[Get]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200052] ReqId[184] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200052] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200052] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(1) [MapRequest] TransId[200052] From [5] adding response for request === <request TransactionId[200052] ReqId[184] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200052] From [0] adding response for request === <request TransactionId[200052] ReqId[184] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200052]          ... released }    Success=true
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200052] ReqId[185] type[Put]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200052] ReqId[185] type[Put]  key[A]>
Place(1) [ResilientMapImpl] put[200052]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200052] clientId[1] ...
Place(1) [MapRequest] TransId[200052] From [0] adding response for request === <request TransactionId[200052] ReqId[185] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200052] clientId[1] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200052] From [5] adding response for request === <request TransactionId[200052] ReqId[185] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200052]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200052] ReqId[186] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200052] ReqId[186] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200052]  { await ... 
Place(0) [Transaction] Tx(200052) and Tx(100060) no overlap
Place(0) [Transaction] Tx(200052) and Tx(100060) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[200052] is null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200052] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200052] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100060] ReqId[220] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100060]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100060] ReqId[221] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100060] ReqId[221] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100060] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100060] ReqId[221] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100060]  { await ... 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200052] ClientPlace [1] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100060] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100060]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 7ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100061]  { await ... 
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100061] ReqId[222] type[Get]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100061] ReqId[222] type[Get]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100061] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100061] From [0] adding response for request === <request TransactionId[100061] ReqId[222] type[Get]  key[M]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100061] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100061] From [5] adding response for request === <request TransactionId[100061] ReqId[222] type[Get]  key[M]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100061]          ... released }    Success=true
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100061] ReqId[223] type[Put]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100061] ReqId[223] type[Put]  key[M]>
Place(0) [ResilientMapImpl] put[100061]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100061] clientId[0] ...
Place(0) [MapRequest] TransId[100061] From [0] adding response for request === <request TransactionId[100061] ReqId[223] type[Put]  key[M]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100061] clientId[0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100061] From [5] adding response for request === <request TransactionId[100061] ReqId[223] type[Put]  key[M]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100061]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100061] ReqId[224] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100061] ReqId[224] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100061) and Tx(200052) no overlap
Place(0) [Transaction] Tx(100061) and Tx(200052) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [ResilientMapImpl] commitTransaction[100061]  { await ... 
Place(0) [Replica(0)] ConflictReport for transaction[100061] is null
Place(0) [MapRequest] TransId[100061] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100061] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200052] ReqId[186] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200052]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200052] ReqId[187] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200052] ReqId[187] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200052] ReqId[187] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200052]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200052] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200052] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200052]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 17ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200053]  { await ... 
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200053] ReqId[188] type[Get]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200053] ReqId[188] type[Get]  key[A]>
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100061] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200053] clientId[1] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200053] clientId[1] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(1) [MapRequest] TransId[200053] From [0] adding response for request === <request TransactionId[200053] ReqId[188] type[Get]  key[A]> ..... output[4] exception[null] 
Place(1) [MapRequest] TransId[200053] From [5] adding response for request === <request TransactionId[200053] ReqId[188] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200053]          ... released }    Success=true
Place(1) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200053] ReqId[189] type[Put]  key[A]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200053] ReqId[189] type[Put]  key[A]>
Place(1) [ResilientMapImpl] put[200053]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200053] clientId[1] ...
Place(1) [MapRequest] TransId[200053] From [0] adding response for request === <request TransactionId[200053] ReqId[189] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200053] clientId[1] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200053] From [5] adding response for request === <request TransactionId[200053] ReqId[189] type[Put]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200053]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200053] ReqId[190] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200053] ReqId[190] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200053]  { await ... 
Place(0) [Transaction] Tx(200053) and Tx(100061) no overlap
Place(0) [Transaction] Tx(200053) and Tx(100061) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[200053] is null
Place(1) [MapRequest] TransId[200053] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200053] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100061] ReqId[224] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100061]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100061] ReqId[225] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100061] ReqId[225] type[Abort]  key[null]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100061] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100061] ReqId[225] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100061]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100061] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100061]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 18ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100062]  { await ... 
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100062] ReqId[226] type[Get]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100062] ReqId[226] type[Get]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100062] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100062] From [0] adding response for request === <request TransactionId[100062] ReqId[226] type[Get]  key[M]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100062] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100062] From [5] adding response for request === <request TransactionId[100062] ReqId[226] type[Get]  key[M]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100062]          ... released }    Success=true
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100062] ReqId[227] type[Put]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100062] ReqId[227] type[Put]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100062] clientId[0] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100062] From [0] adding response for request === <request TransactionId[100062] ReqId[227] type[Put]  key[M]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100062]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100062] clientId[0] ...
Place(0) [MapRequest] TransId[100062] From [5] adding response for request === <request TransactionId[100062] ReqId[227] type[Put]  key[M]> ..... output[5] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200053] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100062] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100062]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100062] ReqId[228] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100062] ReqId[228] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100062) and Tx(200053) no overlap
Place(0) [Transaction] Tx(100062) and Tx(200053) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100062]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] ConflictReport for transaction[100062] is null
Place(0) [MapRequest] TransId[100062] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100062] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200053] ReqId[190] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] commitTransaction[200053]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200053] ReqId[191] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200053] ReqId[191] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200053] ReqId[191] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200053]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200053] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200053] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200053]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 16ms
Place(1)key[A]  all retries failed ...
Place(1) [ResilientMapImpl] get[200054]  { await ... 
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200054] ReqId[192] type[Get]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200054] ReqId[192] type[Get]  key[X]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200054] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(1) [MapRequest] TransId[200054] From [5] adding response for request === <request TransactionId[200054] ReqId[192] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200054] clientId[1] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(1) [MapRequest] TransId[200054] From [0] adding response for request === <request TransactionId[200054] ReqId[192] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200054]          ... released }    Success=true
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200054] ReqId[193] type[Put]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200054] ReqId[193] type[Put]  key[X]>
Place(1) [ResilientMapImpl] put[200054]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200054] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200054] clientId[1] ...
Place(1) [MapRequest] TransId[200054] From [0] adding response for request === <request TransactionId[200054] ReqId[193] type[Put]  key[X]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200054] From [5] adding response for request === <request TransactionId[200054] ReqId[193] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200054]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200054] ReqId[194] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200054] ReqId[194] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200054]  { await ... 
Place(0) [Transaction] Tx(200054) and Tx(100062) no overlap
Place(0) [Transaction] Tx(200054) and Tx(100062) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[200054] is null
Place(1) [MapRequest] TransId[200054] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200054] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100062] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[200054] ClientPlace [1] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100062] ReqId[228] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100062]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100062] ReqId[229] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100062] ReqId[229] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100062] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100062] ReqId[229] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100062]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100062] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100062]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 4ms
Place(0) [ResilientMapImpl] get[100063]  { await ... 
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100063] ReqId[230] type[Get]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100063] ReqId[230] type[Get]  key[M]>
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100063] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100063] From [0] adding response for request === <request TransactionId[100063] ReqId[230] type[Get]  key[M]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100063] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100063] From [5] adding response for request === <request TransactionId[100063] ReqId[230] type[Get]  key[M]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100063]          ... released }    Success=true
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100063] ReqId[231] type[Put]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100063] ReqId[231] type[Put]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100063] clientId[0] ...
Place(0) [MapRequest] TransId[100063] From [0] adding response for request === <request TransactionId[100063] ReqId[231] type[Put]  key[M]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100063]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100063] clientId[0] ...
Place(0) [MapRequest] TransId[100063] From [5] adding response for request === <request TransactionId[100063] ReqId[231] type[Put]  key[M]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100063]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100063] ReqId[232] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100063] ReqId[232] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100063) and Tx(200054) no overlap
Place(0) [Transaction] Tx(100063) and Tx(200054) conflicting=[false] ...
Place(0) [ResilientMapImpl] commitTransaction[100063]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] ConflictReport for transaction[100063] is null
Place(0) [MapRequest] TransId[100063] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100063] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200054] ReqId[194] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200054]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200054] ReqId[195] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200054] ReqId[195] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200054] ReqId[195] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200054]  { await ... 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200054] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100063] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200054] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200054] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200054]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 9ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200055]  { await ... 
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200055] ReqId[196] type[Get]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200055] ReqId[196] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200055] clientId[1] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200055] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200055] From [5] adding response for request === <request TransactionId[200055] ReqId[196] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200055] From [0] adding response for request === <request TransactionId[200055] ReqId[196] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200055]          ... released }    Success=true
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200055] ReqId[197] type[Put]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200055] ReqId[197] type[Put]  key[X]>
Place(1) [ResilientMapImpl] put[200055]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200055] clientId[1] ...
Place(1) [MapRequest] TransId[200055] From [0] adding response for request === <request TransactionId[200055] ReqId[197] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200055] clientId[1] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200055] From [5] adding response for request === <request TransactionId[200055] ReqId[197] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200055]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200055] ReqId[198] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200055] ReqId[198] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200055]  { await ... 
Place(0) [Transaction] Tx(200055) and Tx(100063) no overlap
Place(0) [Transaction] Tx(200055) and Tx(100063) conflicting=[false] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[200055] is null
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200055] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200055] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100063] ReqId[232] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100063]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100063] ReqId[233] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100063] ReqId[233] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100063] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100063] ReqId[233] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100063]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100063] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100063]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 0ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100064]  { await ... 
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100064] ReqId[234] type[Get]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100064] ReqId[234] type[Get]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100064] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100064] From [0] adding response for request === <request TransactionId[100064] ReqId[234] type[Get]  key[M]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100064] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100064] ClientPlace [0] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[200055] ClientPlace [1] isDead[false] ...
Place(0) [MapRequest] TransId[100064] From [5] adding response for request === <request TransactionId[100064] ReqId[234] type[Get]  key[M]> ..... output[5] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100064]          ... released }    Success=true
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100064] ReqId[235] type[Put]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100064] ReqId[235] type[Put]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100064] clientId[0] ...
Place(0) [MapRequest] TransId[100064] From [0] adding response for request === <request TransactionId[100064] ReqId[235] type[Put]  key[M]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100064]  { await ... 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100064] clientId[0] ...
Place(0) [MapRequest] TransId[100064] From [5] adding response for request === <request TransactionId[100064] ReqId[235] type[Put]  key[M]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100064]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100064] ReqId[236] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100064] ReqId[236] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100064) and Tx(200055) no overlap
Place(0) [Transaction] Tx(100064) and Tx(200055) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] ConflictReport for transaction[100064] is null
Place(0) [ResilientMapImpl] commitTransaction[100064]  { await ... 
Place(0) [MapRequest] TransId[100064] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100064] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200055] ReqId[198] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200055]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200055] ReqId[199] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200055] ReqId[199] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200055] ReqId[199] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200055]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200055] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200055] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200055]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 8ms
Place(1) [ResilientMapImpl] get[200056]  { await ... 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200056] ReqId[200] type[Get]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200056] ReqId[200] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200056] clientId[1] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(1) [MapRequest] TransId[200056] From [0] adding response for request === <request TransactionId[200056] ReqId[200] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200056] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] TransId[200056] From [5] adding response for request === <request TransactionId[200056] ReqId[200] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200056] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100064] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200056]          ... released }    Success=true
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200056] ReqId[201] type[Put]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200056] ReqId[201] type[Put]  key[X]>
Place(1) [ResilientMapImpl] put[200056]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200056] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200056] clientId[1] ...
Place(1) [MapRequest] TransId[200056] From [5] adding response for request === <request TransactionId[200056] ReqId[201] type[Put]  key[X]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200056] From [0] adding response for request === <request TransactionId[200056] ReqId[201] type[Put]  key[X]> ..... output[2] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100064] ReqId[236] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100064]          ... released }    Success=false
Place(1) [ResilientMapImpl] put[200056]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100064] ReqId[237] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100064] ReqId[237] type[Abort]  key[null]>
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200056] ReqId[202] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200056] ReqId[202] type[PrepareCommit]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100064] ...
Place(1) [ResilientMapImpl] commitTransaction[200056]  { await ... 
Place(0) [MapRequest] Completing request: <request TransactionId[100064] ReqId[237] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100064]  { await ... 
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[200056] is null
Place(1) [MapRequest] TransId[200056] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200056] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100064]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 12ms
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100064] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100065]  { await ... 
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100065] ReqId[238] type[Get]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100065] ReqId[238] type[Get]  key[M]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100065] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100065] From [0] adding response for request === <request TransactionId[100065] ReqId[238] type[Get]  key[M]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100065] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (M) ...
Place(0) [MapRequest] TransId[100065] From [5] adding response for request === <request TransactionId[100065] ReqId[238] type[Get]  key[M]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100065]          ... released }    Success=true
Place(0) [ReplicaClient] Key[M] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100065] ReqId[239] type[Put]  key[M]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100065] ReqId[239] type[Put]  key[M]>
Place(0) [ResilientMapImpl] put[100065]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100065] clientId[0] ...
Place(0) [MapRequest] TransId[100065] From [0] adding response for request === <request TransactionId[100065] ReqId[239] type[Put]  key[M]> ..... output[5] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100065] clientId[0] ...
Place(0) [MapRequest] TransId[100065] From [5] adding response for request === <request TransactionId[100065] ReqId[239] type[Put]  key[M]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] put[100065]          ... released }    Success=true
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100065] ReqId[240] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100065] ReqId[240] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100065]  { await ... 
Place(0) [Transaction] Tx(100065) and Tx(200056) no overlap
Place(0) [Transaction] Tx(100065) and Tx(200056) conflicting=[false] ...
Place(0) [Partition] Partition [5]  GET_V (M) ...
Place(0) [Replica(0)] ConflictReport for transaction[100065] is null
Place(0) [MapRequest] TransId[100065] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100065] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200056] ClientPlace [1] isDead[false] ...
Place(0) [Replica(0)] check transaction client  TransId=[100065] ClientPlace [0] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200056] ReqId[202] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200056]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200056] ReqId[203] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200056] ReqId[203] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200056] ReqId[203] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200056]  { await ... 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200056]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 1ms
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200056] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200056] ...
Place(1) [ResilientMapImpl] get[200057]  { await ... 
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200057] ReqId[204] type[Get]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200057] ReqId[204] type[Get]  key[X]>
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200057] clientId[1] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200057] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(1) [MapRequest] TransId[200057] From [0] adding response for request === <request TransactionId[200057] ReqId[204] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200057] From [5] adding response for request === <request TransactionId[200057] ReqId[204] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200057]          ... released }    Success=true
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200057] ReqId[205] type[Put]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200057] ReqId[205] type[Put]  key[X]>
Place(1) [ResilientMapImpl] put[200057]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200057] clientId[1] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200057] clientId[1] ...
Place(1) [MapRequest] TransId[200057] From [0] adding response for request === <request TransactionId[200057] ReqId[205] type[Put]  key[X]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200057] From [5] adding response for request === <request TransactionId[200057] ReqId[205] type[Put]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100065] ReqId[240] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] put[200057]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ResilientMapImpl] commitTransaction[100065]          ... released }    Success=false
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200057] ReqId[206] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200057] ReqId[206] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100065] ReqId[241] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100065] ReqId[241] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100065] ...
Place(1) [ResilientMapImpl] commitTransaction[200057]  { await ... 
Place(0) [MapRequest] Completing request: <request TransactionId[100065] ReqId[241] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100065]  { await ... 
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[200057] is null
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100065] ...
Place(1) [MapRequest] TransId[200057] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200057] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100065]          ... released }    Success=true
Place(0) [ResilientMapImpl] sleeping for 16ms
Place(0)key[M]  all retries failed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100066]  { await ... 
Place(0) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100066] ReqId[242] type[Get]  key[Z]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100066] ReqId[242] type[Get]  key[Z]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100066] clientId[0] ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [MapRequest] TransId[100066] From [0] adding response for request === <request TransactionId[100066] ReqId[242] type[Get]  key[Z]> ..... output[5] exception[null] 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100066] clientId[0] ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [MapRequest] TransId[100066] From [1] adding response for request === <request TransactionId[100066] ReqId[242] type[Get]  key[Z]> ..... output[5] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100066]          ... released }    Success=true
Place(0) [ReplicaClient] Key[Z] ParitionId: 0 Replicas[0  1   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100066] ReqId[243] type[Put]  key[Z]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100066] ReqId[243] type[Put]  key[Z]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100066] clientId[0] ...
Place(0) [MapRequest] TransId[100066] From [0] adding response for request === <request TransactionId[100066] ReqId[243] type[Put]  key[Z]> ..... output[5] exception[null] 
Place(0) [ResilientMapImpl] put[100066]  { await ... 
Place(1) [Replica(1)] getOrAddActiveTransaction transId[100066] clientId[0] ...
Place(0) [MapRequest] TransId[100066] From [1] adding response for request === <request TransactionId[100066] ReqId[243] type[Put]  key[Z]> ..... output[5] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200057] ClientPlace [1] isDead[false] ...
Place(0) [ResilientMapImpl] put[100066]          ... released }    Success=true
Place(0) [Replica(0)] check transaction client  TransId=[100066] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100066] ReqId[244] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100066] ReqId[244] type[PrepareCommit]  key[null]>
Place(0) [Transaction] Tx(100066) and Tx(200057) no overlap
Place(0) [Transaction] Tx(100066) and Tx(200057) conflicting=[false] ...
Place(0) [Partition] Partition [0]  GET_V (Z) ...
Place(0) [Replica(0)] ConflictReport for transaction[100066] is null
Place(0) [ResilientMapImpl] commitTransaction[100066]  { await ... 
Place(0) [MapRequest] TransId[100066] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100066] Waiting for votes from places [1,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(1) [Partition] Partition [0]  GET_V (Z) ...
Place(1) [Replica(1)] ConflictReport for transaction[100066] is null
Place(0) [MapRequest] TransId[100066] From [1] adding vote response [1] ...
Place(0) [MapRequest] TransId[100066] Waiting for votes from places [] commitStatus is[ConfirmCommit] 
Place(0) [MapRequest] From [1] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100066] ReqId[244] type[Commit]  key[null]>
Place(0) [ReplicaClient] Submitting ConfirmCommit for request: <request TransactionId[100066] ReqId[244] type[Commit]  key[null]>
Place(0) [Replica(0)] TransId[100066] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(0) [Partition] Partition [0]  PUT (Z,6) ...
Place(0) [MapRequest] Completing request: <request TransactionId[100066] ReqId[244] type[Commit]  key[null]>  Exception: null
Place(1) [Replica(1)] TransId[100066] Applying commit changes:=> InitVersion[4] value[6] partitionId[0] readOnly[false] deleted[false]

Place(1) [Partition] Partition [0]  PUT (Z,6) ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] commitTransaction[100066]          ... released }    Success=true
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200057] ReqId[206] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200057]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200057] ReqId[207] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200057] ReqId[207] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200057] ReqId[207] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200057]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200057] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200057] ...
Place(1) [Replica(1)] checkDeadReplicaClient new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200057]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 4ms
Place(1) [ResilientMapImpl] get[200058]  { await ... 
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200058] ReqId[208] type[Get]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200058] ReqId[208] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200058] clientId[1] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(1) [MapRequest] TransId[200058] From [0] adding response for request === <request TransactionId[200058] ReqId[208] type[Get]  key[X]> ..... output[2] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200058] ClientPlace [1] isDead[false] ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200058] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(1) [MapRequest] TransId[200058] From [5] adding response for request === <request TransactionId[200058] ReqId[208] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200058]          ... released }    Success=true
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200058] ReqId[209] type[Put]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200058] ReqId[209] type[Put]  key[X]>
Place(1) [ResilientMapImpl] put[200058]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200058] clientId[1] ...
Place(1) [MapRequest] TransId[200058] From [0] adding response for request === <request TransactionId[200058] ReqId[209] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200058] clientId[1] ...
Place(1) [MapRequest] TransId[200058] From [5] adding response for request === <request TransactionId[200058] ReqId[209] type[Put]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200058]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200058] ReqId[210] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200058] ReqId[210] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200058]  { await ... 
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[200058] is null
Place(1) [MapRequest] TransId[200058] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200058] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200058] ClientPlace [1] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200058] ReqId[210] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200058]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200058] ReqId[211] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200058] ReqId[211] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200058] ReqId[211] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200058]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200058] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200058] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200058]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 6ms
Place(1) [ResilientMapImpl] get[200059]  { await ... 
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200059] ReqId[212] type[Get]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200059] ReqId[212] type[Get]  key[X]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200059] clientId[1] ...
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200059] clientId[1] ...
Place(5) [Partition] Partition [4]  GET_V (X) ...
Place(1) [MapRequest] TransId[200059] From [0] adding response for request === <request TransactionId[200059] ReqId[212] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [MapRequest] TransId[200059] From [5] adding response for request === <request TransactionId[200059] ReqId[212] type[Get]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] get[200059]          ... released }    Success=true
Place(1) [ReplicaClient] Key[X] ParitionId: 4 Replicas[0  5   ]
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200059] ReqId[213] type[Put]  key[X]>
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200059] ReqId[213] type[Put]  key[X]>
Place(1) [ResilientMapImpl] put[200059]  { await ... 
Place(0) [Replica(0)] getOrAddActiveTransaction transId[200059] clientId[1] ...
Place(1) [MapRequest] TransId[200059] From [0] adding response for request === <request TransactionId[200059] ReqId[213] type[Put]  key[X]> ..... output[2] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[200059] clientId[1] ...
Place(1) [MapRequest] TransId[200059] From [5] adding response for request === <request TransactionId[200059] ReqId[213] type[Put]  key[X]> ..... output[2] exception[null] 
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] put[200059]          ... released }    Success=true
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200059] ReqId[214] type[PrepareCommit]  key[null]>
Place(1) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[200059] ReqId[214] type[PrepareCommit]  key[null]>
Place(1) [ResilientMapImpl] commitTransaction[200059]  { await ... 
Place(0) [Partition] Partition [4]  GET_V (X) ...
Place(0) [Replica(0)] ConflictReport for transaction[200059] is null
Place(1) [MapRequest] TransId[200059] From [0] adding vote response [1] ...
Place(1) [MapRequest] TransId[200059] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(1) [MapRequest] From [0] adding vote response completed ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[200059] ClientPlace [1] isDead[false] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [MapRequest] Completing request: <request TransactionId[200059] ReqId[214] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(1) [ResilientMapImpl] commitTransaction[200059]          ... released }    Success=false
Place(1) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(1) [ReplicaClient] Added Pending Request <request TransactionId[200059] ReqId[215] type[Abort]  key[null]>
Place(1) [ReplicaClient] submit= true
Place(1) [ReplicaClient] Submitting request: <request TransactionId[200059] ReqId[215] type[Abort]  key[null]>
Place(1) [MapRequest] Completing request: <request TransactionId[200059] ReqId[215] type[Abort]  key[null]>  Exception: null
Place(1) [ResilientMapImpl] abortTransaction[200059]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[200059] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[200059] ...
Place(1) [ReplicaClient] Check pending transactions new iteration ...
Place(1) [ResilientMapImpl] abortTransaction[200059]          ... released }    Success=true
Place(1) [ResilientMapImpl] sleeping for 4ms
Place(1)key[X]  all retries failed ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [ResilientMapImpl] $$= Running attempt [1/6] for request [Get] =$$
Place(0) [ResilientMapImpl] get[100067]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100067] ReqId[245] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100067] ReqId[245] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100067] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100067] From [0] adding response for request === <request TransactionId[100067] ReqId[245] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100067] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100067] From [5] adding response for request === <request TransactionId[100067] ReqId[245] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100067]          ... released }    Success=true
Place(0) [ResilientMapImpl] Result = 4
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100067] ReqId[246] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100067] ReqId[246] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100067]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[100067] is null
Place(0) [MapRequest] TransId[100067] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100067] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100067] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100067] ReqId[246] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100067]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100067] ReqId[247] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100067] ReqId[247] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100067] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100067] ReqId[247] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100067]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100067] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100067]          ... released }    Success=true
Place(0) [ResilientMapImpl] $$= Running attempt [2/6] for request [Get] =$$
Place(0) [ResilientMapImpl] get[100068]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100068] ReqId[248] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100068] ReqId[248] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100068] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100068] From [0] adding response for request === <request TransactionId[100068] ReqId[248] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100068] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100068] From [5] adding response for request === <request TransactionId[100068] ReqId[248] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100068]          ... released }    Success=true
Place(0) [ResilientMapImpl] Result = 4
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100068] ReqId[249] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100068] ReqId[249] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100068]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[100068] is null
Place(0) [MapRequest] TransId[100068] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100068] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100068] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100068] ReqId[249] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100068]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100068] ReqId[250] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100068] ReqId[250] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100068] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100068] ReqId[250] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100068]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100068] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100068]          ... released }    Success=true
Place(0) [ResilientMapImpl] $$= Running attempt [3/6] for request [Get] =$$
Place(0) [ResilientMapImpl] get[100069]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100069] ReqId[251] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100069] ReqId[251] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100069] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100069] From [0] adding response for request === <request TransactionId[100069] ReqId[251] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100069] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100069] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] TransId[100069] From [5] adding response for request === <request TransactionId[100069] ReqId[251] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100069]          ... released }    Success=true
Place(0) [ResilientMapImpl] Result = 4
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100069] ReqId[252] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100069] ReqId[252] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[100069] is null
Place(0) [ResilientMapImpl] commitTransaction[100069]  { await ... 
Place(0) [MapRequest] TransId[100069] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100069] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100069] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100069] ReqId[252] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100069]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100069] ReqId[253] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100069] ReqId[253] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100069] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100069] ReqId[253] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100069]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100069] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100069]          ... released }    Success=true
Place(0) [ResilientMapImpl] $$= Running attempt [4/6] for request [Get] =$$
Place(0) [ResilientMapImpl] get[100070]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100070] ReqId[254] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100070] ReqId[254] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100070] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100070] From [0] adding response for request === <request TransactionId[100070] ReqId[254] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100070] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100070] From [5] adding response for request === <request TransactionId[100070] ReqId[254] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100070]          ... released }    Success=true
Place(0) [ResilientMapImpl] Result = 4
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100070] ReqId[255] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100070] ReqId[255] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[100070] is null
Place(0) [MapRequest] TransId[100070] From [0] adding vote response [1] ...
Place(0) [ResilientMapImpl] commitTransaction[100070]  { await ... 
Place(0) [MapRequest] TransId[100070] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100070] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100070] ReqId[255] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100070]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100070] ReqId[256] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100070] ReqId[256] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100070] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100070] ReqId[256] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100070]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100070] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100070]          ... released }    Success=true
Place(0) [ResilientMapImpl] $$= Running attempt [5/6] for request [Get] =$$
Place(0) [ResilientMapImpl] get[100071]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100071] ReqId[257] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100071] ReqId[257] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100071] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100071] From [0] adding response for request === <request TransactionId[100071] ReqId[257] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100071] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100071] From [5] adding response for request === <request TransactionId[100071] ReqId[257] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100071]          ... released }    Success=true
Place(0) [ResilientMapImpl] Result = 4
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100071] ReqId[258] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100071] ReqId[258] type[PrepareCommit]  key[null]>
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[100071] is null
Place(0) [ResilientMapImpl] commitTransaction[100071]  { await ... 
Place(0) [MapRequest] TransId[100071] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100071] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100071] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100071] ReqId[258] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100071]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100071] ReqId[259] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100071] ReqId[259] type[Abort]  key[null]>
Place(0) [MapRequest] Completing request: <request TransactionId[100071] ReqId[259] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100071]  { await ... 
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100071] ...
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100071] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100071]          ... released }    Success=true
Place(0) [ResilientMapImpl] $$= Running attempt [6/6] for request [Get] =$$
Place(0) [ResilientMapImpl] get[100072]  { await ... 
Place(0) [ReplicaClient] Key[A] ParitionId: 5 Replicas[0  5   ]
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100072] ReqId[260] type[Get]  key[A]>
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100072] ReqId[260] type[Get]  key[A]>
Place(0) [Replica(0)] getOrAddActiveTransaction transId[100072] clientId[0] ...
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100072] From [0] adding response for request === <request TransactionId[100072] ReqId[260] type[Get]  key[A]> ..... output[4] exception[null] 
Place(5) [Replica(5)] getOrAddActiveTransaction transId[100072] clientId[0] ...
Place(5) [Partition] Partition [5]  GET_V (A) ...
Place(0) [MapRequest] TransId[100072] From [5] adding response for request === <request TransactionId[100072] ReqId[260] type[Get]  key[A]> ..... output[4] exception[null] 
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100072] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] get[100072]          ... released }    Success=true
Place(0) [ResilientMapImpl] Result = 4
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100072] ReqId[261] type[PrepareCommit]  key[null]>
Place(0) [ReplicaClient] Submitting ReadyToCommit?  for request: <request TransactionId[100072] ReqId[261] type[PrepareCommit]  key[null]>
Place(0) [ResilientMapImpl] commitTransaction[100072]  { await ... 
Place(0) [Partition] Partition [5]  GET_V (A) ...
Place(0) [Replica(0)] ConflictReport for transaction[100072] is null
Place(0) [MapRequest] TransId[100072] From [0] adding vote response [1] ...
Place(0) [MapRequest] TransId[100072] Waiting for votes from places [5,] commitStatus is[UnusedCommit] 
Place(0) [MapRequest] From [0] adding vote response completed ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
Place(0) [Replica(0)] check transaction client  TransId=[100072] ClientPlace [0] isDead[false] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [MapRequest] Completing request: <request TransactionId[100072] ReqId[261] type[PrepareCommit]  key[null]>  Exception: x10.util.resilient.map.exception.RequestTimeoutException
Place(0) [ResilientMapImpl] commitTransaction[100072]          ... released }    Success=false
Place(0) [ReplicaClient] notifyDeadPlaces: deadReplicas count is [0] ...
Place(0) [ReplicaClient] Added Pending Request <request TransactionId[100072] ReqId[262] type[Abort]  key[null]>
Place(0) [ReplicaClient] submit= true
Place(0) [ReplicaClient] Submitting request: <request TransactionId[100072] ReqId[262] type[Abort]  key[null]>
Place(0) [Replica(0)] calling abortNoResponse for transactionId[100072] ...
Place(0) [MapRequest] Completing request: <request TransactionId[100072] ReqId[262] type[Abort]  key[null]>  Exception: null
Place(0) [ResilientMapImpl] abortTransaction[100072]  { await ... 
Place(5) [Replica(5)] calling abortNoResponse for transactionId[100072] ...
Place(0) [ReplicaClient] Check pending transactions new iteration ...
Place(0) [ResilientMapImpl] abortTransaction[100072]          ... released }    Success=true
Place(0) [Replica(0)] checkDeadReplicaClient new iteration ...
++++++ Test failed.
